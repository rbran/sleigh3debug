pub type AddrType = u32;
#[derive(Clone, Copy, Debug)]
pub enum Register {
    contextreg,
    e0,
    e2,
    e4,
    e6,
    e8,
    e10,
    e12,
    e14,
    d0,
    d1,
    d2,
    d3,
    d4,
    d5,
    d6,
    d7,
    d8,
    d9,
    d10,
    d11,
    d12,
    d13,
    d14,
    d15,
    p0,
    p2,
    p4,
    p6,
    p8,
    p10,
    p12,
    p14,
    a0,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    a10,
    a11,
    a12,
    a13,
    a14,
    a15,
    PC,
    PSW,
    PCXI,
    ISP,
    SYSCON,
    CPU_ID,
    CORE_ID,
    COMPAT,
    SMACON,
    FCX,
    LCX,
    ICR,
    PIPN,
    BIV,
    BTV,
    PSTR,
    DSTR,
    DATR,
    DEADD,
    PIETR,
    PIEAR,
    DIETR,
    DIEAR,
    PMA0,
    PMA1,
    PMA2,
    PCON1,
    PCON2,
    PCON0,
    DCON0,
    DCON1,
    DCON2,
    DPR0_L,
    DPR0_U,
    DPR1_L,
    DPR1_U,
    DPR2_L,
    DPR2_U,
    DPR3_L,
    DPR3_U,
    DPR4_L,
    DPR4_U,
    DPR5_L,
    DPR5_U,
    DPR6_L,
    DPR6_U,
    DPR7_L,
    DPR7_U,
    DPR8_L,
    DPR8_U,
    DPR9_L,
    DPR9_U,
    DPR10_L,
    DPR10_U,
    DPR11_L,
    DPR11_U,
    DPR12_L,
    DPR12_U,
    DPR13_L,
    DPR13_U,
    DPR14_L,
    DPR14_U,
    DPR15_L,
    DPR15_U,
    CPR0_L,
    CPR0_U,
    CPR1_L,
    CPR1_U,
    CPR2_L,
    CPR2_U,
    CPR3_L,
    CPR3_U,
    CPR4_L,
    CPR4_U,
    CPR5_L,
    CPR5_U,
    CPR6_L,
    CPR6_U,
    CPR7_L,
    CPR7_U,
    CPR8_L,
    CPR8_U,
    CPR9_L,
    CPR9_U,
    CPR10_L,
    CPR10_U,
    CPR11_L,
    CPR11_U,
    CPR12_L,
    CPR12_U,
    CPR13_L,
    CPR13_U,
    CPR14_L,
    CPR14_U,
    CPR15_L,
    CPR15_U,
    DPRE_0,
    DPRE_1,
    DPRE_2,
    DPRE_3,
    DPWE_0,
    DPWE_1,
    DPWE_2,
    DPWE_3,
    CPXE_0,
    CPXE_1,
    CPXE_2,
    CPXE_3,
    TPS_TIMER0,
    TPS_TIMER1,
    TPS_TIMER2,
    TPS_CON,
    FPU_TRAP_CON,
    FPU_TRAP_PC,
    FPU_TRAP_OPC,
    FPU_TRAP_SRC1,
    FPU_TRAP_SRC2,
    FPU_TRAP_SRC3,
    DBGSR,
    EXEVT,
    CREVT,
    SWEVT,
    TRIG_ACC,
    DMS,
    DCX,
    DBGTCR,
    TASK_ASI,
    TR0EVT,
    TR0ADR,
    TR1EVT,
    TR1ADR,
    TR2EVT,
    TRA2DR,
    TR3EVT,
    TR3ADR,
    TR4EVT,
    TR4ADR,
    TR5EVT,
    TR5ADR,
    TR6EVT,
    TR6ADR,
    TR7EVT,
    TR7ADR,
    CCTRL,
    CCNT,
    ICNT,
    M1CNT,
    M2CNT,
    M3CNT,
    R0,
    R1,
    R2,
    R3,
    R4,
    R5,
    R6,
    R7,
}
impl Register {
    fn as_str(&self) -> &'static str {
        match self {
            Self::contextreg => "contextreg",
            Self::e0 => "e0",
            Self::e2 => "e2",
            Self::e4 => "e4",
            Self::e6 => "e6",
            Self::e8 => "e8",
            Self::e10 => "e10",
            Self::e12 => "e12",
            Self::e14 => "e14",
            Self::d0 => "d0",
            Self::d1 => "d1",
            Self::d2 => "d2",
            Self::d3 => "d3",
            Self::d4 => "d4",
            Self::d5 => "d5",
            Self::d6 => "d6",
            Self::d7 => "d7",
            Self::d8 => "d8",
            Self::d9 => "d9",
            Self::d10 => "d10",
            Self::d11 => "d11",
            Self::d12 => "d12",
            Self::d13 => "d13",
            Self::d14 => "d14",
            Self::d15 => "d15",
            Self::p0 => "p0",
            Self::p2 => "p2",
            Self::p4 => "p4",
            Self::p6 => "p6",
            Self::p8 => "p8",
            Self::p10 => "p10",
            Self::p12 => "p12",
            Self::p14 => "p14",
            Self::a0 => "a0",
            Self::a1 => "a1",
            Self::a2 => "a2",
            Self::a3 => "a3",
            Self::a4 => "a4",
            Self::a5 => "a5",
            Self::a6 => "a6",
            Self::a7 => "a7",
            Self::a8 => "a8",
            Self::a9 => "a9",
            Self::a10 => "a10",
            Self::a11 => "a11",
            Self::a12 => "a12",
            Self::a13 => "a13",
            Self::a14 => "a14",
            Self::a15 => "a15",
            Self::PC => "PC",
            Self::PSW => "PSW",
            Self::PCXI => "PCXI",
            Self::ISP => "ISP",
            Self::SYSCON => "SYSCON",
            Self::CPU_ID => "CPU_ID",
            Self::CORE_ID => "CORE_ID",
            Self::COMPAT => "COMPAT",
            Self::SMACON => "SMACON",
            Self::FCX => "FCX",
            Self::LCX => "LCX",
            Self::ICR => "ICR",
            Self::PIPN => "PIPN",
            Self::BIV => "BIV",
            Self::BTV => "BTV",
            Self::PSTR => "PSTR",
            Self::DSTR => "DSTR",
            Self::DATR => "DATR",
            Self::DEADD => "DEADD",
            Self::PIETR => "PIETR",
            Self::PIEAR => "PIEAR",
            Self::DIETR => "DIETR",
            Self::DIEAR => "DIEAR",
            Self::PMA0 => "PMA0",
            Self::PMA1 => "PMA1",
            Self::PMA2 => "PMA2",
            Self::PCON1 => "PCON1",
            Self::PCON2 => "PCON2",
            Self::PCON0 => "PCON0",
            Self::DCON0 => "DCON0",
            Self::DCON1 => "DCON1",
            Self::DCON2 => "DCON2",
            Self::DPR0_L => "DPR0_L",
            Self::DPR0_U => "DPR0_U",
            Self::DPR1_L => "DPR1_L",
            Self::DPR1_U => "DPR1_U",
            Self::DPR2_L => "DPR2_L",
            Self::DPR2_U => "DPR2_U",
            Self::DPR3_L => "DPR3_L",
            Self::DPR3_U => "DPR3_U",
            Self::DPR4_L => "DPR4_L",
            Self::DPR4_U => "DPR4_U",
            Self::DPR5_L => "DPR5_L",
            Self::DPR5_U => "DPR5_U",
            Self::DPR6_L => "DPR6_L",
            Self::DPR6_U => "DPR6_U",
            Self::DPR7_L => "DPR7_L",
            Self::DPR7_U => "DPR7_U",
            Self::DPR8_L => "DPR8_L",
            Self::DPR8_U => "DPR8_U",
            Self::DPR9_L => "DPR9_L",
            Self::DPR9_U => "DPR9_U",
            Self::DPR10_L => "DPR10_L",
            Self::DPR10_U => "DPR10_U",
            Self::DPR11_L => "DPR11_L",
            Self::DPR11_U => "DPR11_U",
            Self::DPR12_L => "DPR12_L",
            Self::DPR12_U => "DPR12_U",
            Self::DPR13_L => "DPR13_L",
            Self::DPR13_U => "DPR13_U",
            Self::DPR14_L => "DPR14_L",
            Self::DPR14_U => "DPR14_U",
            Self::DPR15_L => "DPR15_L",
            Self::DPR15_U => "DPR15_U",
            Self::CPR0_L => "CPR0_L",
            Self::CPR0_U => "CPR0_U",
            Self::CPR1_L => "CPR1_L",
            Self::CPR1_U => "CPR1_U",
            Self::CPR2_L => "CPR2_L",
            Self::CPR2_U => "CPR2_U",
            Self::CPR3_L => "CPR3_L",
            Self::CPR3_U => "CPR3_U",
            Self::CPR4_L => "CPR4_L",
            Self::CPR4_U => "CPR4_U",
            Self::CPR5_L => "CPR5_L",
            Self::CPR5_U => "CPR5_U",
            Self::CPR6_L => "CPR6_L",
            Self::CPR6_U => "CPR6_U",
            Self::CPR7_L => "CPR7_L",
            Self::CPR7_U => "CPR7_U",
            Self::CPR8_L => "CPR8_L",
            Self::CPR8_U => "CPR8_U",
            Self::CPR9_L => "CPR9_L",
            Self::CPR9_U => "CPR9_U",
            Self::CPR10_L => "CPR10_L",
            Self::CPR10_U => "CPR10_U",
            Self::CPR11_L => "CPR11_L",
            Self::CPR11_U => "CPR11_U",
            Self::CPR12_L => "CPR12_L",
            Self::CPR12_U => "CPR12_U",
            Self::CPR13_L => "CPR13_L",
            Self::CPR13_U => "CPR13_U",
            Self::CPR14_L => "CPR14_L",
            Self::CPR14_U => "CPR14_U",
            Self::CPR15_L => "CPR15_L",
            Self::CPR15_U => "CPR15_U",
            Self::DPRE_0 => "DPRE_0",
            Self::DPRE_1 => "DPRE_1",
            Self::DPRE_2 => "DPRE_2",
            Self::DPRE_3 => "DPRE_3",
            Self::DPWE_0 => "DPWE_0",
            Self::DPWE_1 => "DPWE_1",
            Self::DPWE_2 => "DPWE_2",
            Self::DPWE_3 => "DPWE_3",
            Self::CPXE_0 => "CPXE_0",
            Self::CPXE_1 => "CPXE_1",
            Self::CPXE_2 => "CPXE_2",
            Self::CPXE_3 => "CPXE_3",
            Self::TPS_TIMER0 => "TPS_TIMER0",
            Self::TPS_TIMER1 => "TPS_TIMER1",
            Self::TPS_TIMER2 => "TPS_TIMER2",
            Self::TPS_CON => "TPS_CON",
            Self::FPU_TRAP_CON => "FPU_TRAP_CON",
            Self::FPU_TRAP_PC => "FPU_TRAP_PC",
            Self::FPU_TRAP_OPC => "FPU_TRAP_OPC",
            Self::FPU_TRAP_SRC1 => "FPU_TRAP_SRC1",
            Self::FPU_TRAP_SRC2 => "FPU_TRAP_SRC2",
            Self::FPU_TRAP_SRC3 => "FPU_TRAP_SRC3",
            Self::DBGSR => "DBGSR",
            Self::EXEVT => "EXEVT",
            Self::CREVT => "CREVT",
            Self::SWEVT => "SWEVT",
            Self::TRIG_ACC => "TRIG_ACC",
            Self::DMS => "DMS",
            Self::DCX => "DCX",
            Self::DBGTCR => "DBGTCR",
            Self::TASK_ASI => "TASK_ASI",
            Self::TR0EVT => "TR0EVT",
            Self::TR0ADR => "TR0ADR",
            Self::TR1EVT => "TR1EVT",
            Self::TR1ADR => "TR1ADR",
            Self::TR2EVT => "TR2EVT",
            Self::TRA2DR => "TRA2DR",
            Self::TR3EVT => "TR3EVT",
            Self::TR3ADR => "TR3ADR",
            Self::TR4EVT => "TR4EVT",
            Self::TR4ADR => "TR4ADR",
            Self::TR5EVT => "TR5EVT",
            Self::TR5ADR => "TR5ADR",
            Self::TR6EVT => "TR6EVT",
            Self::TR6ADR => "TR6ADR",
            Self::TR7EVT => "TR7EVT",
            Self::TR7ADR => "TR7ADR",
            Self::CCTRL => "CCTRL",
            Self::CCNT => "CCNT",
            Self::ICNT => "ICNT",
            Self::M1CNT => "M1CNT",
            Self::M2CNT => "M2CNT",
            Self::M3CNT => "M3CNT",
            Self::R0 => "R0",
            Self::R1 => "R1",
            Self::R2 => "R2",
            Self::R3 => "R3",
            Self::R4 => "R4",
            Self::R5 => "R5",
            Self::R6 => "R6",
            Self::R7 => "R7",
        }
    }
}
impl core::fmt::Display for Register {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}
fn meaning_0_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::d0,
        1 => Register::d1,
        2 => Register::d2,
        3 => Register::d3,
        4 => Register::d4,
        5 => Register::d5,
        6 => Register::d6,
        7 => Register::d7,
        8 => Register::d8,
        9 => Register::d9,
        10 => Register::d10,
        11 => Register::d11,
        12 => Register::d12,
        13 => Register::d13,
        14 => Register::d14,
        15 => Register::d15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_0_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_0_value(num.try_into().unwrap());
    <DisplayElement>::Register(value)
}
fn meaning_1_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::e0,
        2 => Register::e2,
        4 => Register::e4,
        6 => Register::e6,
        8 => Register::e8,
        10 => Register::e10,
        12 => Register::e12,
        14 => Register::e14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_1_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_1_value(num.try_into().unwrap());
    <DisplayElement>::Register(value)
}
fn meaning_2_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::e2,
        2 => Register::e4,
        4 => Register::e6,
        6 => Register::e8,
        8 => Register::e10,
        10 => Register::e12,
        12 => Register::e14,
        14 => Register::e0,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_2_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_2_value(num.try_into().unwrap());
    <DisplayElement>::Register(value)
}
fn meaning_3_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::d0,
        2 => Register::d2,
        4 => Register::d4,
        6 => Register::d6,
        8 => Register::d8,
        10 => Register::d10,
        12 => Register::d12,
        14 => Register::d14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_3_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_3_value(num.try_into().unwrap());
    <DisplayElement>::Register(value)
}
fn meaning_4_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::d1,
        2 => Register::d3,
        4 => Register::d5,
        6 => Register::d7,
        8 => Register::d9,
        10 => Register::d11,
        12 => Register::d13,
        14 => Register::d15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_4_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_4_value(num.try_into().unwrap());
    <DisplayElement>::Register(value)
}
fn meaning_5_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::a0,
        1 => Register::a1,
        2 => Register::a2,
        3 => Register::a3,
        4 => Register::a4,
        5 => Register::a5,
        6 => Register::a6,
        7 => Register::a7,
        8 => Register::a8,
        9 => Register::a9,
        10 => Register::a10,
        11 => Register::a11,
        12 => Register::a12,
        13 => Register::a13,
        14 => Register::a14,
        15 => Register::a15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_5_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_5_value(num.try_into().unwrap());
    <DisplayElement>::Register(value)
}
fn meaning_6_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::p0,
        2 => Register::p2,
        4 => Register::p4,
        6 => Register::p6,
        8 => Register::p8,
        10 => Register::p10,
        12 => Register::p12,
        14 => Register::p14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_6_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_6_value(num.try_into().unwrap());
    <DisplayElement>::Register(value)
}
fn meaning_7_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::a0,
        2 => Register::a2,
        4 => Register::a4,
        6 => Register::a6,
        8 => Register::a8,
        10 => Register::a10,
        12 => Register::a12,
        14 => Register::a14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_7_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_7_value(num.try_into().unwrap());
    <DisplayElement>::Register(value)
}
fn meaning_8_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::a1,
        2 => Register::a3,
        4 => Register::a5,
        6 => Register::a7,
        8 => Register::a9,
        10 => Register::a11,
        12 => Register::a13,
        14 => Register::a15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_8_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_8_value(num.try_into().unwrap());
    <DisplayElement>::Register(value)
}
fn meaning_9_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::R0,
        1 => Register::R1,
        2 => Register::R2,
        3 => Register::R3,
        4 => Register::R4,
        5 => Register::R5,
        6 => Register::R6,
        7 => Register::R7,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_9_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_9_value(num.try_into().unwrap());
    <DisplayElement>::Register(value)
}
#[derive(Clone, Copy, Debug)]
pub enum DisplayElement {
    Literal(&'static str),
    Register(Register),
    Number(bool, bool, u64),
}
impl core::fmt::Display for DisplayElement {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::Literal(lit) => lit.fmt(f),
            Self::Register(reg) => reg.fmt(f),
            Self::Number(true, false, value) => {
                write!(f, "0x{:x}", value)
            }
            Self::Number(true, true, value) => {
                write!(f, "-0x{:x}", value)
            }
            Self::Number(false, false, value) => value.fmt(f),
            Self::Number(false, true, value) => {
                write!(f, "-{:x}", value)
            }
        }
    }
}
#[doc = "Create token_fields: pcp_op0000"]
fn token_34(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 1) as u8)
}
#[doc = "Create token_fields: pcp_op0009"]
fn token_36(tokens: &[u8]) -> u16 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 1023) as u16)
}
#[doc = "Create token_fields: op0606"]
fn token_8(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 6) & 1) as u8)
}
#[doc = "Create token_fields: op0003 ccAB"]
fn token_1(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 15) as u8)
}
#[doc = "Create token_fields: op0007 op1623"]
fn token_4(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 255) as u8)
}
#[doc = "Create token_fields: op2131"]
fn token_29(tokens: &[u8]) -> u16 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 5) & 2047) as u16)
}
#[doc = "Create token_fields: pcp_op0101"]
fn token_38(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 1) & 1) as u8)
}
#[doc = "Create token_fields: pcp_op0204"]
fn token_40(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 2) & 7) as u8)
}
#[doc = "Create token_fields: op2123"]
fn token_27(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 5) & 7) as u8)
}
#[doc = "Create token_fields: op0407 op2023"]
fn token_7(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 4) & 15) as u8)
}
#[doc = "Create token_fields: op2027"]
fn token_25(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 4) & 255) as u8)
}
#[doc = "Create token_fields: pcp_op0010"]
fn token_37(tokens: &[u8]) -> u16 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 2047) as u16)
}
#[doc = "Create token_fields: R0305"]
fn token_42(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 3) & 7) as u8)
}
#[doc = "Create token_fields: pcp_op0708"]
fn token_46(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 7) & 3) as u8)
}
#[doc = "Create token_fields: op0607"]
fn token_9(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 6) & 3) as u8)
}
#[doc = "Create token_fields: op2127"]
fn token_28(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 5) & 127) as u8)
}
#[doc = "Create token_fields: pcp_op0808"]
fn token_47(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 8) & 1) as u8)
}
#[doc = "Create token_fields: pcp_op0909"]
fn token_48(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 9) & 1) as u8)
}
#[doc = "Create token_fields: pcp_op0910"]
fn token_49(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 9) & 3) as u8)
}
#[doc = "Create token_fields: pcp_op0912"]
fn token_50(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 9) & 15) as u8)
}
#[doc = "Create token_fields: pcp_op1010"]
fn token_51(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 10) & 1) as u8)
}
#[doc = "Create token_fields: op0404 op2020 pcp_op0404"]
fn token_5(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 4) & 1) as u8)
}
#[doc = "Create token_fields: pcp_op0303"]
fn token_41(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 3) & 1) as u8)
}
#[doc = "Create token_fields: pcp_op0202"]
fn token_39(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 2) & 1) as u8)
}
#[doc = "Create token_fields: Rd0811 Ra0811 Re0811 Ree0811 Reo0811 ReN0811 op0811 Rp0811 Rpe0811 Rpo0811 Rd2427 Re2427 Ree2427 Reo2427"]
fn token_12(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 8) & 15) as u8)
}
#[doc = "Create token_fields: pcp_op0406"]
fn token_43(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 4) & 7) as u8)
}
#[doc = "Create token_fields: pcp_op0505"]
fn token_44(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 5) & 1) as u8)
}
#[doc = "Create token_fields: addrmode"]
fn token_54(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 13) & 7) as u8)
}
#[doc = "Create token_fields: Rd1215 op1215 sop1215 Ra1215 Rpe1215 Rpo1215 Rd2831 Ra2831 Re2831 Ree2831 Reo2831 op2831 sop2831"]
fn token_15(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 12) & 15) as u8)
}
#[doc = "Create token_fields: pcp_op1212"]
fn token_53(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 12) & 1) as u8)
}
#[doc = "Create token_fields: R0608"]
fn token_45(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 6) & 7) as u8)
}
#[doc = "Create token_fields: op0006 op1622"]
fn token_3(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 127) as u8)
}
#[doc = "Create token_fields: op1631 pcp_op1631"]
fn token_21(tokens: &[u8]) -> u16 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 65535) as u16)
}
#[doc = "Create token_fields: pcp_op1012"]
fn token_52(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 10) & 7) as u8)
}
#[doc = "Create token_fields: op0005 op1621 pcp_op0005"]
fn token_2(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 63) as u8)
}
#[doc = "Create token_fields: op1620 sop1620 pcp_op0004"]
fn token_18(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 31) as u8)
}
#[doc = "Create token_fields: op0405 pcp_op0405"]
fn token_6(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 4) & 3) as u8)
}
#[doc = "Create token_fields: op1515 op3131"]
fn token_16(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 15) & 1) as u8)
}
#[doc = "Create token_fields: op1617 pcp_op0001"]
fn token_17(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 3) as u8)
}
#[doc = "Create token_fields: op0707 pcp_op0707"]
fn token_10(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 7) & 1) as u8)
}
#[doc = "Create token_fields: op1823"]
fn token_23(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 2) & 63) as u8)
}
#[doc = "Create token_fields: op0810"]
fn token_11(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 8) & 7) as u8)
}
#[doc = "Create token_fields: op2122 pcp_op0506"]
fn token_26(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 5) & 3) as u8)
}
#[doc = "Create token_fields: op2225 ccB"]
fn token_30(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 6) & 15) as u8)
}
#[doc = "Create token_fields: op2227 sop2227"]
fn token_31(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 6) & 63) as u8)
}
#[doc = "Create token_fields: op1627 sop1627"]
fn token_19(tokens: &[u8]) -> u16 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 4095) as u16)
}
#[doc = "Create token_fields: op0815 sop0815"]
fn token_13(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 8) & 255) as u8)
}
#[doc = "Create token_fields: op1827"]
fn token_24(tokens: &[u8]) -> u16 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 2) & 1023) as u16)
}
#[doc = "Create token_fields: op2327"]
fn token_32(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 7) & 31) as u8)
}
#[doc = "Create token_fields: op2627"]
fn token_33(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 10) & 3) as u8)
}
#[doc = "Create token_fields: op1111 pcp_op1111"]
fn token_14(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 11) & 1) as u8)
}
#[doc = "Create token_fields: pcp_op0002 ccA"]
fn token_35(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 7) as u8)
}
#[doc = "Create token_fields: sop1630"]
fn token_20(tokens: &[u8]) -> u16 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 0) & 32767) as u16)
}
#[doc = "Create token_fields: op1819 pcp_op0203"]
fn token_22(tokens: &[u8]) -> u8 {
    (((u16::from_le_bytes(tokens[0..2].try_into().unwrap()) >> 2) & 3) as u8)
}
#[derive(Clone, Copy, Default)]
pub struct ContextMemory(pub u8);
impl ContextMemory {
    pub fn read_PCPMode(&self) -> u8 {
        (((self.0.reverse_bits() >> 7) & 1) as u8)
    }
    pub fn write_PCPMode(&mut self, value: u8) {
        self.0 = ((self.0.reverse_bits() & !(1 << 7)) | ((value as u8 & 1) << 7)).reverse_bits();
    }
}
#[derive(Clone)]
pub struct GlobalSet {
    default: ContextMemory,
    branches: std::collections::HashMap<AddrType, ContextMemory>,
}
impl GlobalSet {
    pub fn new(default: ContextMemory) -> Self {
        Self {
            default,
            branches: std::collections::HashMap::new(),
        }
    }
    pub fn set(&mut self, address: Option<AddrType>, set: impl FnOnce(&mut ContextMemory)) {
        let Some (address) = address else { return } ;
        let entry = self
            .branches
            .entry(address)
            .or_insert_with(|| self.default.clone());
        set(entry);
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2005:1, end:2005:2))"]
#[derive(Clone, Debug)]
struct debug_instructionVar0 {}
impl debug_instructionVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("debug"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2026:1, end:2026:2))"]
#[derive(Clone, Debug)]
struct disable_instructionVar1 {}
impl disable_instructionVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("disable"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2074:1, end:2074:2))"]
#[derive(Clone, Debug)]
struct dsync_instructionVar2 {}
impl dsync_instructionVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dsync"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2252:1, end:2252:2))"]
#[derive(Clone, Debug)]
struct enable_instructionVar3 {}
impl enable_instructionVar3 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("enable"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2451:1, end:2451:2))"]
#[derive(Clone, Debug)]
struct fret_instructionVar4 {}
impl fret_instructionVar4 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("fret"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2661:1, end:2661:2))"]
#[derive(Clone, Debug)]
struct isync_instructionVar5 {}
impl isync_instructionVar5 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("isync"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2908:1, end:2908:2))"]
#[derive(Clone, Debug)]
struct ji_instructionVar6 {}
impl ji_instructionVar6 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ji"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::a11),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6804:1, end:6804:2))"]
#[derive(Clone, Debug)]
struct nop_instructionVar7 {}
impl nop_instructionVar7 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("nop"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7107:1, end:7107:2))"]
#[derive(Clone, Debug)]
struct ret_instructionVar8 {}
impl ret_instructionVar8 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ret"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7150:1, end:7150:2))"]
#[derive(Clone, Debug)]
struct rfe_instructionVar9 {}
impl rfe_instructionVar9 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rfe"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7173:1, end:7173:2))"]
#[derive(Clone, Debug)]
struct rfm_instructionVar10 {}
impl rfm_instructionVar10 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rfm"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7195:1, end:7195:2))"]
#[derive(Clone, Debug)]
struct rslcx_instructionVar11 {}
impl rslcx_instructionVar11 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rslcx"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7208:1, end:7208:2))"]
#[derive(Clone, Debug)]
struct rstv_instructionVar12 {}
impl rstv_instructionVar12 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rstv"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8228:1, end:8228:2))"]
#[derive(Clone, Debug)]
struct svlcx_instructionVar13 {}
impl svlcx_instructionVar13 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("svlcx"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8315:1, end:8315:2))"]
#[derive(Clone, Debug)]
struct tlbflush_a_instructionVar14 {}
impl tlbflush_a_instructionVar14 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("tlbflush.a"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8322:1, end:8322:2))"]
#[derive(Clone, Debug)]
struct tlbflush_b_instructionVar15 {}
impl tlbflush_b_instructionVar15 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("tlbflush.b"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8350:1, end:8350:2))"]
#[derive(Clone, Debug)]
struct trapsv_instructionVar16 {}
impl trapsv_instructionVar16 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("trapsv"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8358:1, end:8358:2))"]
#[derive(Clone, Debug)]
struct trapv_instructionVar17 {}
impl trapv_instructionVar17 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("trapv"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8401:1, end:8401:2))"]
#[derive(Clone, Debug)]
struct wait_instructionVar18 {}
impl wait_instructionVar18 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("wait"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:918:1, end:918:2))"]
#[derive(Clone, Debug)]
struct abs_instructionVar19 {
    Rd2831: u8,
    Rd1215: u8,
}
impl abs_instructionVar19 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("abs"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:925:1, end:925:2))"]
#[derive(Clone, Debug)]
struct abs_b_instructionVar20 {
    Rd2831: u8,
    Rd1215: u8,
}
impl abs_b_instructionVar20 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("abs.b"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:939:1, end:939:2))"]
#[derive(Clone, Debug)]
struct abs_h_instructionVar21 {
    Rd2831: u8,
    Rd1215: u8,
}
impl abs_h_instructionVar21 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("abs.h"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1013:1, end:1013:2))"]
#[derive(Clone, Debug)]
struct abss_instructionVar22 {
    Rd2831: u8,
    Rd1215: u8,
}
impl abss_instructionVar22 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("abss"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1021:1, end:1021:2))"]
#[derive(Clone, Debug)]
struct abss_h_instructionVar23 {
    Rd2831: u8,
    Rd1215: u8,
}
impl abss_h_instructionVar23 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("abss.h"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1811:1, end:1811:2))"]
#[derive(Clone, Debug)]
struct calli_instructionVar24 {
    Ra0811: u8,
}
impl calli_instructionVar24 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("calli"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2033:1, end:2033:2))"]
#[derive(Clone, Debug)]
struct disable_instructionVar25 {
    Rd0811: u8,
}
impl disable_instructionVar25 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("disable"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2427:1, end:2427:2))"]
#[derive(Clone, Debug)]
struct fcalli_instructionVar26 {
    Ra0811: u8,
}
impl fcalli_instructionVar26 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("fcalli"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2902:1, end:2902:2))"]
#[derive(Clone, Debug)]
struct ji_instructionVar27 {
    Ra0811: u8,
}
impl ji_instructionVar27 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ji"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2940:1, end:2940:2))"]
#[derive(Clone, Debug)]
struct jli_instructionVar28 {
    Ra0811: u8,
}
impl jli_instructionVar28 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jli"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7079:1, end:7079:2))"]
#[derive(Clone, Debug)]
struct restore_instructionVar29 {
    Rd0811: u8,
}
impl restore_instructionVar29 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("restore"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8308:1, end:8308:2))"]
#[derive(Clone, Debug)]
struct tlbdemap_instructionVar30 {
    Rd0811: u8,
}
impl tlbdemap_instructionVar30 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("tlbdemap"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8329:1, end:8329:2))"]
#[derive(Clone, Debug)]
struct tlbmap_instructionVar31 {
    Re0811: u8,
}
impl tlbmap_instructionVar31 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("tlbmap"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Re0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8336:1, end:8336:2))"]
#[derive(Clone, Debug)]
struct tlbprobe_a_instructionVar32 {
    Rd0811: u8,
}
impl tlbprobe_a_instructionVar32 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("tlbprobe.a"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8343:1, end:8343:2))"]
#[derive(Clone, Debug)]
struct tlbprobe_i_instructionVar33 {
    Rd0811: u8,
}
impl tlbprobe_i_instructionVar33 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("tlbprobe.i"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8376:1, end:8376:2))"]
#[derive(Clone, Debug)]
struct updfl_instructionVar34 {
    Rd0811: u8,
}
impl updfl_instructionVar34 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("updfl"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1533:1, end:1533:2))"]
#[derive(Clone, Debug)]
struct bsplit_instructionVar35 {
    Re2831: u8,
    Rd0811: u8,
}
impl bsplit_instructionVar35 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("bsplit"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Re2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1839:1, end:1839:2))"]
#[derive(Clone, Debug)]
struct clo_instructionVar36 {
    Rd2831: u8,
    Rd0811: u8,
}
impl clo_instructionVar36 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("clo"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1845:1, end:1845:2))"]
#[derive(Clone, Debug)]
struct clo_h_instructionVar37 {
    Rd2831: u8,
    Rd0811: u8,
}
impl clo_h_instructionVar37 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("clo.h"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1854:1, end:1854:2))"]
#[derive(Clone, Debug)]
struct cls_instructionVar38 {
    Rd2831: u8,
    Rd0811: u8,
}
impl cls_instructionVar38 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cls"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1860:1, end:1860:2))"]
#[derive(Clone, Debug)]
struct cls_h_instructionVar39 {
    Rd2831: u8,
    Rd0811: u8,
}
impl cls_h_instructionVar39 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cls.h"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1869:1, end:1869:2))"]
#[derive(Clone, Debug)]
struct clz_instructionVar40 {
    Rd2831: u8,
    Rd0811: u8,
}
impl clz_instructionVar40 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("clz"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1875:1, end:1875:2))"]
#[derive(Clone, Debug)]
struct clz_h_instructionVar41 {
    Rd2831: u8,
    Rd0811: u8,
}
impl clz_h_instructionVar41 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("clz.h"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2348:1, end:2348:2))"]
#[derive(Clone, Debug)]
struct eqz_a_instructionVar42 {
    Rd2831: u8,
    Ra0811: u8,
}
impl eqz_a_instructionVar42 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eqz.a"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2463:1, end:2463:2))"]
#[derive(Clone, Debug)]
struct ftoi_instructionVar43 {
    Rd2831: u8,
    Rd0811: u8,
}
impl ftoi_instructionVar43 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ftoi"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2473:1, end:2473:2))"]
#[derive(Clone, Debug)]
struct ftoiz_instructionVar44 {
    Rd2831: u8,
    Rd0811: u8,
}
impl ftoiz_instructionVar44 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ftoiz"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2503:1, end:2503:2))"]
#[derive(Clone, Debug)]
struct ftou_instructionVar45 {
    Rd2831: u8,
    Rd0811: u8,
}
impl ftou_instructionVar45 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ftou"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2513:1, end:2513:2))"]
#[derive(Clone, Debug)]
struct ftouz_instructionVar46 {
    Rd2831: u8,
    Rd0811: u8,
}
impl ftouz_instructionVar46 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ftouz"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2668:1, end:2668:2))"]
#[derive(Clone, Debug)]
struct itof_instructionVar47 {
    Rd2831: u8,
    Rd0811: u8,
}
impl itof_instructionVar47 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("itof"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3386:1, end:3386:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar48 {
    Re0811: u8,
    ReN0811: u8,
    BO: TableBO,
}
impl ld_dd_instructionVar48 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.dd"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 41 {
                return None;
            }
            let ReN0811 = token_12(tokens);
            let Re0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_2(tokens) != 0 {
                return None;
            }
            if token_31(tokens) != 9 {
                return None;
            }
            if token_15(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (ReN0811, Re0811), pattern_len))
        };
        let ((), (ReN0811, Re0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3425:1, end:3425:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar49 {
    Re0811: u8,
    ReN0811: u8,
    BO: TableBO,
}
impl ld_dd_instructionVar49 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.dd"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 41 {
                return None;
            }
            let Re0811 = token_12(tokens);
            let ReN0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_2(tokens) != 0 {
                return None;
            }
            if token_31(tokens) != 41 {
                return None;
            }
            if token_15(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5055:1, end:5055:2))"]
#[derive(Clone, Debug)]
struct mffr_instructionVar50 {
    Rd2831: u8,
    Rd0811: u8,
}
impl mffr_instructionVar50 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mffr"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5168:1, end:5168:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar51 {
    Rd2831: u8,
    Rd1215: u8,
}
impl mov_instructionVar51 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5183:1, end:5183:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar52 {
    Re2831: u8,
    Rd1215: u8,
}
impl mov_instructionVar52 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Re2831, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5218:1, end:5218:2))"]
#[derive(Clone, Debug)]
struct mov_a_instructionVar53 {
    Ra2831: u8,
    Rd1215: u8,
}
impl mov_a_instructionVar53 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov.a"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ra2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra2831, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5232:1, end:5232:2))"]
#[derive(Clone, Debug)]
struct mov_aa_instructionVar54 {
    Ra2831: u8,
    Ra1215: u8,
}
impl mov_aa_instructionVar54 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov.aa"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ra2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra2831, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5246:1, end:5246:2))"]
#[derive(Clone, Debug)]
struct mov_d_instructionVar55 {
    Rd2831: u8,
    Ra1215: u8,
}
impl mov_d_instructionVar55 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov.d"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6377:1, end:6377:2))"]
#[derive(Clone, Debug)]
struct mtfr_instructionVar56 {
    Rd0811: u8,
    Rd1215: u8,
}
impl mtfr_instructionVar56 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mtfr"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6791:1, end:6791:2))"]
#[derive(Clone, Debug)]
struct nez_a_instructionVar57 {
    Rd2831: u8,
    Ra0811: u8,
}
impl nez_a_instructionVar57 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("nez.a"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7048:1, end:7048:2))"]
#[derive(Clone, Debug)]
struct parity_instructionVar58 {
    Rd2831: u8,
    Rd0811: u8,
}
impl parity_instructionVar58 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("parity"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7069:1, end:7069:2))"]
#[derive(Clone, Debug)]
struct qseed_f_instructionVar59 {
    Rd2831: u8,
    Rd0811: u8,
}
impl qseed_f_instructionVar59 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("qseed.f"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7259:1, end:7259:2))"]
#[derive(Clone, Debug)]
struct sat_b_instructionVar60 {
    Rd2831: u8,
    Rd0811: u8,
}
impl sat_b_instructionVar60 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sat.b"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7275:1, end:7275:2))"]
#[derive(Clone, Debug)]
struct sat_bu_instructionVar61 {
    Rd2831: u8,
    Rd0811: u8,
}
impl sat_bu_instructionVar61 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sat.bu"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7291:1, end:7291:2))"]
#[derive(Clone, Debug)]
struct sat_h_instructionVar62 {
    Rd2831: u8,
    Rd0811: u8,
}
impl sat_h_instructionVar62 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sat.h"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7307:1, end:7307:2))"]
#[derive(Clone, Debug)]
struct sat_hu_instructionVar63 {
    Rd2831: u8,
    Rd0811: u8,
}
impl sat_hu_instructionVar63 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sat.hu"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7846:1, end:7846:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar64 {
    Re0811: u8,
    ReN0811: u8,
    BO: TableBO,
}
impl st_dd_instructionVar64 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.dd"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 169 {
                return None;
            }
            let Re0811 = token_12(tokens);
            let ReN0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_2(tokens) != 0 {
                return None;
            }
            if token_31(tokens) != 9 {
                return None;
            }
            if token_15(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7885:1, end:7885:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar65 {
    Re0811: u8,
    ReN0811: u8,
    BO: TableBO,
}
impl st_dd_instructionVar65 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.dd"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 169 {
                return None;
            }
            let ReN0811 = token_12(tokens);
            let Re0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_2(tokens) != 0 {
                return None;
            }
            if token_31(tokens) != 41 {
                return None;
            }
            if token_15(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (ReN0811, Re0811), pattern_len))
        };
        let ((), (ReN0811, Re0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8367:1, end:8367:2))"]
#[derive(Clone, Debug)]
struct unpack_instructionVar66 {
    Re2831: u8,
    Rd0811: u8,
}
impl unpack_instructionVar66 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("unpack"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Re2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8390:1, end:8390:2))"]
#[derive(Clone, Debug)]
struct utof_instructionVar67 {
    Rd2831: u8,
    Rd0811: u8,
}
impl utof_instructionVar67 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("utof"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd2831, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:949:1, end:949:2))"]
#[derive(Clone, Debug)]
struct absdif_instructionVar68 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl absdif_instructionVar68 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("absdif"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:963:1, end:963:2))"]
#[derive(Clone, Debug)]
struct absdif_b_instructionVar69 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl absdif_b_instructionVar69 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("absdif.b"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:977:1, end:977:2))"]
#[derive(Clone, Debug)]
struct absdif_h_instructionVar70 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl absdif_h_instructionVar70 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("absdif.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:987:1, end:987:2))"]
#[derive(Clone, Debug)]
struct absdifs_instructionVar71 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl absdifs_instructionVar71 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("absdifs"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1003:1, end:1003:2))"]
#[derive(Clone, Debug)]
struct absdifs_h_instructionVar72 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl absdifs_h_instructionVar72 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("absdifs.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1077:1, end:1077:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar73 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl add_instructionVar73 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1107:1, end:1107:2))"]
#[derive(Clone, Debug)]
struct add_a_instructionVar74 {
    Ra2831: u8,
    Ra0811: u8,
    Ra1215: u8,
}
impl add_a_instructionVar74 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add.a"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ra2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra2831,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1113:1, end:1113:2))"]
#[derive(Clone, Debug)]
struct add_b_instructionVar75 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl add_b_instructionVar75 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add.b"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1137:1, end:1137:2))"]
#[derive(Clone, Debug)]
struct add_h_instructionVar76 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl add_h_instructionVar76 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1147:1, end:1147:2))"]
#[derive(Clone, Debug)]
struct addc_instructionVar77 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl addc_instructionVar77 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("addc"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1193:1, end:1193:2))"]
#[derive(Clone, Debug)]
struct adds_instructionVar78 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl adds_instructionVar78 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("adds"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1209:1, end:1209:2))"]
#[derive(Clone, Debug)]
struct adds_h_instructionVar79 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl adds_h_instructionVar79 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("adds.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1219:1, end:1219:2))"]
#[derive(Clone, Debug)]
struct adds_hu_instructionVar80 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl adds_hu_instructionVar80 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("adds.hu"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1229:1, end:1229:2))"]
#[derive(Clone, Debug)]
struct adds_u_instructionVar81 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl adds_u_instructionVar81 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("adds.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1262:1, end:1262:2))"]
#[derive(Clone, Debug)]
struct addsc_at_instructionVar82 {
    Ra2831: u8,
    Ra1215: u8,
    Rd0811: u8,
}
impl addsc_at_instructionVar82 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("addsc.at"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ra2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra2831,
                Ra1215,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1269:1, end:1269:2))"]
#[derive(Clone, Debug)]
struct addx_instructionVar83 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl addx_instructionVar83 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("addx"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1303:1, end:1303:2))"]
#[derive(Clone, Debug)]
struct and_instructionVar84 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl and_instructionVar84 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1331:1, end:1331:2))"]
#[derive(Clone, Debug)]
struct and_eq_instructionVar85 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl and_eq_instructionVar85 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.eq"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1343:1, end:1343:2))"]
#[derive(Clone, Debug)]
struct and_ge_instructionVar86 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl and_ge_instructionVar86 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.ge"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1355:1, end:1355:2))"]
#[derive(Clone, Debug)]
struct and_ge_u_instructionVar87 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl and_ge_u_instructionVar87 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.ge.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1367:1, end:1367:2))"]
#[derive(Clone, Debug)]
struct and_lt_instructionVar88 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl and_lt_instructionVar88 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.lt"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1379:1, end:1379:2))"]
#[derive(Clone, Debug)]
struct and_lt_u_instructionVar89 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl and_lt_u_instructionVar89 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.lt.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1391:1, end:1391:2))"]
#[derive(Clone, Debug)]
struct and_ne_instructionVar90 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl and_ne_instructionVar90 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.ne"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1427:1, end:1427:2))"]
#[derive(Clone, Debug)]
struct andn_instructionVar91 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl andn_instructionVar91 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("andn"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1489:1, end:1489:2))"]
#[derive(Clone, Debug)]
struct bmerge_instructionVar92 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl bmerge_instructionVar92 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("bmerge"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1937:1, end:1937:2))"]
#[derive(Clone, Debug)]
struct cmp_f_instructionVar93 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl cmp_f_instructionVar93 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cmp.f"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1971:1, end:1971:2))"]
#[derive(Clone, Debug)]
struct crc32_instructionVar94 {
    Rd2831: u8,
    Rd1215: u8,
    Rd0811: u8,
}
impl crc32_instructionVar94 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("crc32"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd1215,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2041:1, end:2041:2))"]
#[derive(Clone, Debug)]
struct div_instructionVar95 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl div_instructionVar95 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("div"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2052:1, end:2052:2))"]
#[derive(Clone, Debug)]
struct div_u_instructionVar96 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl div_u_instructionVar96 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("div.u"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2064:1, end:2064:2))"]
#[derive(Clone, Debug)]
struct div_f_instructionVar97 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl div_f_instructionVar97 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("div.f"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2103:1, end:2103:2))"]
#[derive(Clone, Debug)]
struct dvinit_instructionVar98 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl dvinit_instructionVar98 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dvinit"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2120:1, end:2120:2))"]
#[derive(Clone, Debug)]
struct dvinit_b_instructionVar99 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl dvinit_b_instructionVar99 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dvinit.b"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2136:1, end:2136:2))"]
#[derive(Clone, Debug)]
struct dvinit_bu_instructionVar100 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl dvinit_bu_instructionVar100 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dvinit.bu"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2152:1, end:2152:2))"]
#[derive(Clone, Debug)]
struct dvinit_h_instructionVar101 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl dvinit_h_instructionVar101 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dvinit.h"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2169:1, end:2169:2))"]
#[derive(Clone, Debug)]
struct dvinit_hu_instructionVar102 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl dvinit_hu_instructionVar102 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dvinit.hu"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2185:1, end:2185:2))"]
#[derive(Clone, Debug)]
struct dvinit_u_instructionVar103 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl dvinit_u_instructionVar103 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dvinit.u"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2270:1, end:2270:2))"]
#[derive(Clone, Debug)]
struct eq_instructionVar104 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl eq_instructionVar104 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eq"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2282:1, end:2282:2))"]
#[derive(Clone, Debug)]
struct eq_a_instructionVar105 {
    Rd2831: u8,
    Ra0811: u8,
    Ra1215: u8,
}
impl eq_a_instructionVar105 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eq.a"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2288:1, end:2288:2))"]
#[derive(Clone, Debug)]
struct eq_b_instructionVar106 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl eq_b_instructionVar106 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eq.b"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2298:1, end:2298:2))"]
#[derive(Clone, Debug)]
struct eq_h_instructionVar107 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl eq_h_instructionVar107 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eq.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2306:1, end:2306:2))"]
#[derive(Clone, Debug)]
struct eq_w_instructionVar108 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl eq_w_instructionVar108 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eq.w"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2312:1, end:2312:2))"]
#[derive(Clone, Debug)]
struct eqany_b_instructionVar109 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl eqany_b_instructionVar109 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eqany.b"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2332:1, end:2332:2))"]
#[derive(Clone, Debug)]
struct eqany_h_instructionVar110 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl eqany_h_instructionVar110 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eqany.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2484:1, end:2484:2))"]
#[derive(Clone, Debug)]
struct ftoq31_instructionVar111 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl ftoq31_instructionVar111 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ftoq31"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2493:1, end:2493:2))"]
#[derive(Clone, Debug)]
struct ftoq31z_instructionVar112 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl ftoq31z_instructionVar112 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ftoq31z"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2523:1, end:2523:2))"]
#[derive(Clone, Debug)]
struct ge_instructionVar113 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl ge_instructionVar113 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ge"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2535:1, end:2535:2))"]
#[derive(Clone, Debug)]
struct ge_a_instructionVar114 {
    Rd2831: u8,
    Ra0811: u8,
    Ra1215: u8,
}
impl ge_a_instructionVar114 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ge.a"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2541:1, end:2541:2))"]
#[derive(Clone, Debug)]
struct ge_u_instructionVar115 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl ge_u_instructionVar115 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ge.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3737:1, end:3737:2))"]
#[derive(Clone, Debug)]
struct lt_instructionVar116 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl lt_instructionVar116 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3749:1, end:3749:2))"]
#[derive(Clone, Debug)]
struct lt_a_instructionVar117 {
    Rd2831: u8,
    Ra0811: u8,
    Ra1215: u8,
}
impl lt_a_instructionVar117 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt.a"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3755:1, end:3755:2))"]
#[derive(Clone, Debug)]
struct lt_b_instructionVar118 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl lt_b_instructionVar118 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt.b"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3765:1, end:3765:2))"]
#[derive(Clone, Debug)]
struct lt_bu_instructionVar119 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl lt_bu_instructionVar119 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt.bu"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3775:1, end:3775:2))"]
#[derive(Clone, Debug)]
struct lt_h_instructionVar120 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl lt_h_instructionVar120 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3783:1, end:3783:2))"]
#[derive(Clone, Debug)]
struct lt_hu_instructionVar121 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl lt_hu_instructionVar121 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt.hu"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3791:1, end:3791:2))"]
#[derive(Clone, Debug)]
struct lt_u_instructionVar122 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl lt_u_instructionVar122 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3803:1, end:3803:2))"]
#[derive(Clone, Debug)]
struct lt_w_instructionVar123 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl lt_w_instructionVar123 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt.w"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3809:1, end:3809:2))"]
#[derive(Clone, Debug)]
struct lt_wu_instructionVar124 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl lt_wu_instructionVar124 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt.wu"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4977:1, end:4977:2))"]
#[derive(Clone, Debug)]
struct max_instructionVar125 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl max_instructionVar125 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("max"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4989:1, end:4989:2))"]
#[derive(Clone, Debug)]
struct max_b_instructionVar126 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl max_b_instructionVar126 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("max.b"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5003:1, end:5003:2))"]
#[derive(Clone, Debug)]
struct max_bu_instructionVar127 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl max_bu_instructionVar127 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("max.bu"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5017:1, end:5017:2))"]
#[derive(Clone, Debug)]
struct max_h_instructionVar128 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl max_h_instructionVar128 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("max.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5027:1, end:5027:2))"]
#[derive(Clone, Debug)]
struct max_hu_instructionVar129 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl max_hu_instructionVar129 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("max.hu"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5037:1, end:5037:2))"]
#[derive(Clone, Debug)]
struct max_u_instructionVar130 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl max_u_instructionVar130 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("max.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5062:1, end:5062:2))"]
#[derive(Clone, Debug)]
struct min_instructionVar131 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl min_instructionVar131 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("min"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5074:1, end:5074:2))"]
#[derive(Clone, Debug)]
struct min_b_instructionVar132 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl min_b_instructionVar132 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("min.b"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5088:1, end:5088:2))"]
#[derive(Clone, Debug)]
struct min_bu_instructionVar133 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl min_bu_instructionVar133 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("min.bu"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5102:1, end:5102:2))"]
#[derive(Clone, Debug)]
struct min_h_instructionVar134 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl min_h_instructionVar134 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("min.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5112:1, end:5112:2))"]
#[derive(Clone, Debug)]
struct min_hu_instructionVar135 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl min_hu_instructionVar135 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("min.hu"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5122:1, end:5122:2))"]
#[derive(Clone, Debug)]
struct min_u_instructionVar136 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl min_u_instructionVar136 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("min.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5191:1, end:5191:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar137 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl mov_instructionVar137 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6399:1, end:6399:2))"]
#[derive(Clone, Debug)]
struct mul_instructionVar138 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl mul_instructionVar138 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6417:1, end:6417:2))"]
#[derive(Clone, Debug)]
struct mul_instructionVar139 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl mul_instructionVar139 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6426:1, end:6426:2))"]
#[derive(Clone, Debug)]
struct mul_f_instructionVar140 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl mul_f_instructionVar140 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.f"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6573:1, end:6573:2))"]
#[derive(Clone, Debug)]
struct mul_u_instructionVar141 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl mul_u_instructionVar141 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6726:1, end:6726:2))"]
#[derive(Clone, Debug)]
struct muls_instructionVar142 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl muls_instructionVar142 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("muls"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6744:1, end:6744:2))"]
#[derive(Clone, Debug)]
struct muls_u_instructionVar143 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl muls_u_instructionVar143 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("muls.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6753:1, end:6753:2))"]
#[derive(Clone, Debug)]
struct nand_instructionVar144 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl nand_instructionVar144 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("nand"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6773:1, end:6773:2))"]
#[derive(Clone, Debug)]
struct ne_instructionVar145 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl ne_instructionVar145 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ne"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6785:1, end:6785:2))"]
#[derive(Clone, Debug)]
struct ne_a_instructionVar146 {
    Rd2831: u8,
    Ra0811: u8,
    Ra1215: u8,
}
impl ne_a_instructionVar146 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ne.a"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6819:1, end:6819:2))"]
#[derive(Clone, Debug)]
struct nor_instructionVar147 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl nor_instructionVar147 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("nor"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6855:1, end:6855:2))"]
#[derive(Clone, Debug)]
struct or_instructionVar148 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl or_instructionVar148 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6887:1, end:6887:2))"]
#[derive(Clone, Debug)]
struct or_eq_instructionVar149 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl or_eq_instructionVar149 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.eq"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6899:1, end:6899:2))"]
#[derive(Clone, Debug)]
struct or_ge_instructionVar150 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl or_ge_instructionVar150 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.ge"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6911:1, end:6911:2))"]
#[derive(Clone, Debug)]
struct or_ge_u_instructionVar151 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl or_ge_u_instructionVar151 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.ge.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6923:1, end:6923:2))"]
#[derive(Clone, Debug)]
struct or_lt_instructionVar152 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl or_lt_instructionVar152 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.lt"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6935:1, end:6935:2))"]
#[derive(Clone, Debug)]
struct or_lt_u_instructionVar153 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl or_lt_u_instructionVar153 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.lt.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6947:1, end:6947:2))"]
#[derive(Clone, Debug)]
struct or_ne_instructionVar154 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl or_ne_instructionVar154 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.ne"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6987:1, end:6987:2))"]
#[derive(Clone, Debug)]
struct orn_instructionVar155 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl orn_instructionVar155 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("orn"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7060:1, end:7060:2))"]
#[derive(Clone, Debug)]
struct q31tof_instructionVar156 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl q31tof_instructionVar156 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("q31tof"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7353:1, end:7353:2))"]
#[derive(Clone, Debug)]
struct sh_instructionVar157 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sh_instructionVar157 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7392:1, end:7392:2))"]
#[derive(Clone, Debug)]
struct sh_eq_instructionVar158 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sh_eq_instructionVar158 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.eq"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7404:1, end:7404:2))"]
#[derive(Clone, Debug)]
struct sh_ge_instructionVar159 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sh_ge_instructionVar159 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.ge"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7416:1, end:7416:2))"]
#[derive(Clone, Debug)]
struct sh_ge_u_instructionVar160 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sh_ge_u_instructionVar160 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.ge.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7428:1, end:7428:2))"]
#[derive(Clone, Debug)]
struct sh_h_instructionVar161 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sh_h_instructionVar161 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7452:1, end:7452:2))"]
#[derive(Clone, Debug)]
struct sh_lt_instructionVar162 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sh_lt_instructionVar162 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.lt"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7464:1, end:7464:2))"]
#[derive(Clone, Debug)]
struct sh_lt_u_instructionVar163 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sh_lt_u_instructionVar163 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.lt.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7485:1, end:7485:2))"]
#[derive(Clone, Debug)]
struct sh_ne_instructionVar164 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sh_ne_instructionVar164 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.ne"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7556:1, end:7556:2))"]
#[derive(Clone, Debug)]
struct sha_instructionVar165 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sha_instructionVar165 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sha"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7580:1, end:7580:2))"]
#[derive(Clone, Debug)]
struct sha_h_instructionVar166 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sha_h_instructionVar166 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sha.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7622:1, end:7622:2))"]
#[derive(Clone, Debug)]
struct shas_instructionVar167 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl shas_instructionVar167 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("shas"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8115:1, end:8115:2))"]
#[derive(Clone, Debug)]
struct sub_instructionVar168 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sub_instructionVar168 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8130:1, end:8130:2))"]
#[derive(Clone, Debug)]
struct sub_a_instructionVar169 {
    Ra2831: u8,
    Ra0811: u8,
    Ra1215: u8,
}
impl sub_a_instructionVar169 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub.a"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ra2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra2831,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8136:1, end:8136:2))"]
#[derive(Clone, Debug)]
struct sub_b_instructionVar170 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sub_b_instructionVar170 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub.b"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8157:1, end:8157:2))"]
#[derive(Clone, Debug)]
struct sub_h_instructionVar171 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sub_h_instructionVar171 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8166:1, end:8166:2))"]
#[derive(Clone, Debug)]
struct subc_instructionVar172 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl subc_instructionVar172 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("subc"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8183:1, end:8183:2))"]
#[derive(Clone, Debug)]
struct subs_instructionVar173 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl subs_instructionVar173 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("subs"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8191:1, end:8191:2))"]
#[derive(Clone, Debug)]
struct subs_h_instructionVar174 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl subs_h_instructionVar174 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("subs.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8201:1, end:8201:2))"]
#[derive(Clone, Debug)]
struct subs_hu_instructionVar175 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl subs_hu_instructionVar175 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("subs.hu"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8211:1, end:8211:2))"]
#[derive(Clone, Debug)]
struct subs_u_instructionVar176 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl subs_u_instructionVar176 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("subs.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8219:1, end:8219:2))"]
#[derive(Clone, Debug)]
struct subx_instructionVar177 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl subx_instructionVar177 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("subx"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8408:1, end:8408:2))"]
#[derive(Clone, Debug)]
struct xnor_instructionVar178 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl xnor_instructionVar178 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xnor"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8436:1, end:8436:2))"]
#[derive(Clone, Debug)]
struct xor_instructionVar179 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl xor_instructionVar179 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8448:1, end:8448:2))"]
#[derive(Clone, Debug)]
struct xor_eq_instructionVar180 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl xor_eq_instructionVar180 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.eq"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8460:1, end:8460:2))"]
#[derive(Clone, Debug)]
struct xor_ge_instructionVar181 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl xor_ge_instructionVar181 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.ge"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8472:1, end:8472:2))"]
#[derive(Clone, Debug)]
struct xor_ge_u_instructionVar182 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl xor_ge_u_instructionVar182 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.ge.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8484:1, end:8484:2))"]
#[derive(Clone, Debug)]
struct xor_lt_instructionVar183 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl xor_lt_instructionVar183 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.lt"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8496:1, end:8496:2))"]
#[derive(Clone, Debug)]
struct xor_lt_u_instructionVar184 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl xor_lt_u_instructionVar184 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.lt.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8508:1, end:8508:2))"]
#[derive(Clone, Debug)]
struct xor_ne_instructionVar185 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl xor_ne_instructionVar185 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.ne"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8528:1, end:8528:2))"]
#[derive(Clone, Debug)]
struct xpose_b_instructionVar186 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl xpose_b_instructionVar186 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xpose.b"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8535:1, end:8535:2))"]
#[derive(Clone, Debug)]
struct xpose_h_instructionVar187 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl xpose_h_instructionVar187 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xpose.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1254:1, end:1254:2))"]
#[derive(Clone, Debug)]
struct addsc_a_instructionVar188 {
    Ra2831: u8,
    Ra1215: u8,
    Rd0811: u8,
    const1617Z: Tableconst1617Z,
}
impl addsc_a_instructionVar188 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("addsc.a"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ra2831,
                Ra1215,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1468:1, end:1468:2))"]
#[derive(Clone, Debug)]
struct bisr_instructionVar189 {
    const1220Z: Tableconst1220Z,
}
impl bisr_instructionVar189 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("bisr"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 173 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_29(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1220Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6436:1, end:6436:2))"]
#[derive(Clone, Debug)]
struct mul_h_instructionVar190 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_h_instructionVar190 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6449:1, end:6449:2))"]
#[derive(Clone, Debug)]
struct mul_h_instructionVar191 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_h_instructionVar191 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6462:1, end:6462:2))"]
#[derive(Clone, Debug)]
struct mul_h_instructionVar192 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_h_instructionVar192 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6475:1, end:6475:2))"]
#[derive(Clone, Debug)]
struct mul_h_instructionVar193 {
    Ree2831: u8,
    Reo2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_h_instructionVar193 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6488:1, end:6488:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar194 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar194 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6497:1, end:6497:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar195 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar195 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6506:1, end:6506:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar196 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar196 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6515:1, end:6515:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar197 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar197 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6526:1, end:6526:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar198 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar198 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6537:1, end:6537:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar199 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar199 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6546:1, end:6546:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar200 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar200 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6555:1, end:6555:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar201 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar201 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6582:1, end:6582:2))"]
#[derive(Clone, Debug)]
struct mulm_h_instructionVar202 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mulm_h_instructionVar202 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mulm.h"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6595:1, end:6595:2))"]
#[derive(Clone, Debug)]
struct mulm_h_instructionVar203 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mulm_h_instructionVar203 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mulm.h"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6608:1, end:6608:2))"]
#[derive(Clone, Debug)]
struct mulm_h_instructionVar204 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mulm_h_instructionVar204 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mulm.h"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6621:1, end:6621:2))"]
#[derive(Clone, Debug)]
struct mulm_h_instructionVar205 {
    Re2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mulm_h_instructionVar205 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mulm.h"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6634:1, end:6634:2))"]
#[derive(Clone, Debug)]
struct mulr_h_instructionVar206 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mulr_h_instructionVar206 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mulr.h"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6649:1, end:6649:2))"]
#[derive(Clone, Debug)]
struct mulr_h_instructionVar207 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mulr_h_instructionVar207 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mulr.h"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6664:1, end:6664:2))"]
#[derive(Clone, Debug)]
struct mulr_h_instructionVar208 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mulr_h_instructionVar208 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mulr.h"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6679:1, end:6679:2))"]
#[derive(Clone, Debug)]
struct mulr_h_instructionVar209 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mulr_h_instructionVar209 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mulr.h"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6694:1, end:6694:2))"]
#[derive(Clone, Debug)]
struct mulr_q_instructionVar210 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mulr_q_instructionVar210 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mulr.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6706:1, end:6706:2))"]
#[derive(Clone, Debug)]
struct mulr_q_instructionVar211 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl mulr_q_instructionVar211 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mulr.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7361:1, end:7361:2))"]
#[derive(Clone, Debug)]
struct sh_instructionVar212 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl sh_instructionVar212 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 0 {
                return None;
            }
            if token_5(tokens) != 1 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7368:1, end:7368:2))"]
#[derive(Clone, Debug)]
struct sh_instructionVar213 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl sh_instructionVar213 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 0 {
                return None;
            }
            if token_5(tokens) != 0 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8301:1, end:8301:2))"]
#[derive(Clone, Debug)]
struct syscall_instructionVar214 {
    const1220Z: Tableconst1220Z,
}
impl syscall_instructionVar214 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("syscall"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 173 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_29(tokens) != 4 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1220Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:956:1, end:956:2))"]
#[derive(Clone, Debug)]
struct absdif_instructionVar215 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl absdif_instructionVar215 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("absdif"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 14 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:995:1, end:995:2))"]
#[derive(Clone, Debug)]
struct absdifs_instructionVar216 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl absdifs_instructionVar216 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("absdifs"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 15 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1084:1, end:1084:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar217 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl add_instructionVar217 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 0 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1128:1, end:1128:2))"]
#[derive(Clone, Debug)]
struct add_f_instructionVar218 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
}
impl add_f_instructionVar218 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add.f"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1156:1, end:1156:2))"]
#[derive(Clone, Debug)]
struct addc_instructionVar219 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl addc_instructionVar219 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("addc"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 5 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1201:1, end:1201:2))"]
#[derive(Clone, Debug)]
struct adds_instructionVar220 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl adds_instructionVar220 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("adds"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 2 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1237:1, end:1237:2))"]
#[derive(Clone, Debug)]
struct adds_u_instructionVar221 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl adds_u_instructionVar221 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("adds.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 3 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1278:1, end:1278:2))"]
#[derive(Clone, Debug)]
struct addx_instructionVar222 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl addx_instructionVar222 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("addx"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 4 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1309:1, end:1309:2))"]
#[derive(Clone, Debug)]
struct and_instructionVar223 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl and_instructionVar223 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 8 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1337:1, end:1337:2))"]
#[derive(Clone, Debug)]
struct and_eq_instructionVar224 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl and_eq_instructionVar224 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.eq"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 32 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1349:1, end:1349:2))"]
#[derive(Clone, Debug)]
struct and_ge_instructionVar225 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl and_ge_instructionVar225 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.ge"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 36 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1361:1, end:1361:2))"]
#[derive(Clone, Debug)]
struct and_ge_u_instructionVar226 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl and_ge_u_instructionVar226 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.ge.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 37 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1373:1, end:1373:2))"]
#[derive(Clone, Debug)]
struct and_lt_instructionVar227 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl and_lt_instructionVar227 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.lt"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 34 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1385:1, end:1385:2))"]
#[derive(Clone, Debug)]
struct and_lt_u_instructionVar228 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl and_lt_u_instructionVar228 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.lt.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 35 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1397:1, end:1397:2))"]
#[derive(Clone, Debug)]
struct and_ne_instructionVar229 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl and_ne_instructionVar229 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.ne"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 33 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1433:1, end:1433:2))"]
#[derive(Clone, Debug)]
struct andn_instructionVar230 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl andn_instructionVar230 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("andn"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 14 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2081:1, end:2081:2))"]
#[derive(Clone, Debug)]
struct dvadj_instructionVar231 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd1215: u8,
}
impl dvadj_instructionVar231 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dvadj"));
        let extend: [DisplayElement; 10usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ree2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2201:1, end:2201:2))"]
#[derive(Clone, Debug)]
struct dvstep_instructionVar232 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd1215: u8,
}
impl dvstep_instructionVar232 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dvstep"));
        let extend: [DisplayElement; 10usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ree2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2230:1, end:2230:2))"]
#[derive(Clone, Debug)]
struct dvstep_u_instructionVar233 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd1215: u8,
}
impl dvstep_u_instructionVar233 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dvstep.u"));
        let extend: [DisplayElement; 10usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2354:1, end:2354:2))"]
#[derive(Clone, Debug)]
struct extr_instructionVar234 {
    Rd2831: u8,
    Rd0811: u8,
    Ree2427: u8,
    Reo2427: u8,
}
impl extr_instructionVar234 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("extr"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2378:1, end:2378:2))"]
#[derive(Clone, Debug)]
struct extr_u_instructionVar235 {
    Rd2831: u8,
    Rd0811: u8,
    Ree2427: u8,
    Reo2427: u8,
}
impl extr_u_instructionVar235 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("extr.u"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Reo2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2678:1, end:2678:2))"]
#[derive(Clone, Debug)]
struct ixmax_instructionVar236 {
    Re2831: u8,
    Re2427: u8,
    Rd1215: u8,
}
impl ixmax_instructionVar236 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ixmax"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2703:1, end:2703:2))"]
#[derive(Clone, Debug)]
struct ixmax_u_instructionVar237 {
    Re2831: u8,
    Re2427: u8,
    Rd1215: u8,
}
impl ixmax_u_instructionVar237 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ixmax.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2728:1, end:2728:2))"]
#[derive(Clone, Debug)]
struct ixmin_instructionVar238 {
    Re2831: u8,
    Re2427: u8,
    Rd1215: u8,
}
impl ixmin_instructionVar238 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ixmin"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2753:1, end:2753:2))"]
#[derive(Clone, Debug)]
struct ixmin_u_instructionVar239 {
    Re2831: u8,
    Re2427: u8,
    Rd1215: u8,
}
impl ixmin_u_instructionVar239 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ixmin.u"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7007:1, end:7007:2))"]
#[derive(Clone, Debug)]
struct pack_instructionVar240 {
    Rd2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
}
impl pack_instructionVar240 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("pack"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Reo2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Ree2427,
                Reo2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8148:1, end:8148:2))"]
#[derive(Clone, Debug)]
struct sub_f_instructionVar241 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
}
impl sub_f_instructionVar241 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub.f"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1685:1, end:1685:2))"]
#[derive(Clone, Debug)]
struct cadd_instructionVar242 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl cadd_instructionVar242 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cadd"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1712:1, end:1712:2))"]
#[derive(Clone, Debug)]
struct caddn_instructionVar243 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl caddn_instructionVar243 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("caddn"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1980:1, end:1980:2))"]
#[derive(Clone, Debug)]
struct csub_instructionVar244 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl csub_instructionVar244 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("csub"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1989:1, end:1989:2))"]
#[derive(Clone, Debug)]
struct csubn_instructionVar245 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl csubn_instructionVar245 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("csubn"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2019:1, end:2019:2))"]
#[derive(Clone, Debug)]
struct dextr_instructionVar246 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    Rd2427: u8,
}
impl dextr_instructionVar246 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dextr"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
                Rd2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2276:1, end:2276:2))"]
#[derive(Clone, Debug)]
struct eq_instructionVar247 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl eq_instructionVar247 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eq"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 16 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2322:1, end:2322:2))"]
#[derive(Clone, Debug)]
struct eqany_b_instructionVar248 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl eqany_b_instructionVar248 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eqany.b"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 86 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2340:1, end:2340:2))"]
#[derive(Clone, Debug)]
struct eqany_h_instructionVar249 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl eqany_h_instructionVar249 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eqany.h"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 118 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2370:1, end:2370:2))"]
#[derive(Clone, Debug)]
struct extr_instructionVar250 {
    Rd2831: u8,
    Rd0811: u8,
    Rd2427: u8,
    const1620Z: Tableconst1620Z,
}
impl extr_instructionVar250 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("extr"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd2831,
                Rd0811,
                Rd2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2394:1, end:2394:2))"]
#[derive(Clone, Debug)]
struct extr_u_instructionVar251 {
    Rd2831: u8,
    Rd0811: u8,
    Rd2427: u8,
    const1620Z: Tableconst1620Z,
}
impl extr_u_instructionVar251 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("extr.u"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd2831,
                Rd0811,
                Rd2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2529:1, end:2529:2))"]
#[derive(Clone, Debug)]
struct ge_instructionVar252 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl ge_instructionVar252 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ge"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 20 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2547:1, end:2547:2))"]
#[derive(Clone, Debug)]
struct ge_u_instructionVar253 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl ge_u_instructionVar253 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ge.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 21 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2563:1, end:2563:2))"]
#[derive(Clone, Debug)]
struct imask_instructionVar254 {
    Ree2831: u8,
    Reo2831: u8,
    Rd1215: u8,
    Rd2427: u8,
    const1620Z: Tableconst1620Z,
}
impl imask_instructionVar254 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("imask"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Ree2831,
                Reo2831,
                Rd1215,
                Rd2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2583:1, end:2583:2))"]
#[derive(Clone, Debug)]
struct imask_instructionVar255 {
    Ree2831: u8,
    Reo2831: u8,
    Rd2427: u8,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
}
impl imask_instructionVar255 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("imask"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                Ree2831,
                Reo2831,
                Rd2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2600:1, end:2600:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar256 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    Ree2427: u8,
    Reo2427: u8,
}
impl insert_instructionVar256 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("insert"));
        let extend: [DisplayElement; 10usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Reo2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2627:1, end:2627:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar257 {
    Rd2831: u8,
    Rd0811: u8,
    Ree2427: u8,
    Reo2427: u8,
    const1215Z: Tableconst1215Z,
}
impl insert_instructionVar257 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("insert"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                Rd2831,
                Rd0811,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3743:1, end:3743:2))"]
#[derive(Clone, Debug)]
struct lt_instructionVar258 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl lt_instructionVar258 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 18 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3797:1, end:3797:2))"]
#[derive(Clone, Debug)]
struct lt_u_instructionVar259 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl lt_u_instructionVar259 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 19 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3815:1, end:3815:2))"]
#[derive(Clone, Debug)]
struct madd_instructionVar260 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl madd_instructionVar260 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3839:1, end:3839:2))"]
#[derive(Clone, Debug)]
struct madd_instructionVar261 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl madd_instructionVar261 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3848:1, end:3848:2))"]
#[derive(Clone, Debug)]
struct madd_f_instructionVar262 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl madd_f_instructionVar262 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.f"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4073:1, end:4073:2))"]
#[derive(Clone, Debug)]
struct madd_u_instructionVar263 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl madd_u_instructionVar263 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.u"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4389:1, end:4389:2))"]
#[derive(Clone, Debug)]
struct madds_instructionVar264 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl madds_instructionVar264 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4416:1, end:4416:2))"]
#[derive(Clone, Debug)]
struct madds_instructionVar265 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl madds_instructionVar265 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4611:1, end:4611:2))"]
#[derive(Clone, Debug)]
struct madds_u_instructionVar266 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl madds_u_instructionVar266 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.u"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4630:1, end:4630:2))"]
#[derive(Clone, Debug)]
struct madds_u_instructionVar267 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl madds_u_instructionVar267 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.u"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5270:1, end:5270:2))"]
#[derive(Clone, Debug)]
struct msub_instructionVar268 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl msub_instructionVar268 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5294:1, end:5294:2))"]
#[derive(Clone, Debug)]
struct msub_instructionVar269 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl msub_instructionVar269 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5303:1, end:5303:2))"]
#[derive(Clone, Debug)]
struct msub_f_instructionVar270 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl msub_f_instructionVar270 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.f"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5480:1, end:5480:2))"]
#[derive(Clone, Debug)]
struct msub_u_instructionVar271 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl msub_u_instructionVar271 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.u"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6131:1, end:6131:2))"]
#[derive(Clone, Debug)]
struct msubs_instructionVar272 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl msubs_instructionVar272 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6158:1, end:6158:2))"]
#[derive(Clone, Debug)]
struct msubs_instructionVar273 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl msubs_instructionVar273 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6343:1, end:6343:2))"]
#[derive(Clone, Debug)]
struct msubs_u_instructionVar274 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl msubs_u_instructionVar274 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.u"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6362:1, end:6362:2))"]
#[derive(Clone, Debug)]
struct msubs_u_instructionVar275 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl msubs_u_instructionVar275 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.u"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7313:1, end:7313:2))"]
#[derive(Clone, Debug)]
struct sel_instructionVar276 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl sel_instructionVar276 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sel"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7325:1, end:7325:2))"]
#[derive(Clone, Debug)]
struct seln_instructionVar277 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl seln_instructionVar277 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("seln"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3897:1, end:3897:2))"]
#[derive(Clone, Debug)]
struct madd_h_instructionVar278 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_h_instructionVar278 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3912:1, end:3912:2))"]
#[derive(Clone, Debug)]
struct madd_h_instructionVar279 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_h_instructionVar279 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3927:1, end:3927:2))"]
#[derive(Clone, Debug)]
struct madd_h_instructionVar280 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_h_instructionVar280 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3942:1, end:3942:2))"]
#[derive(Clone, Debug)]
struct madd_h_instructionVar281 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_h_instructionVar281 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3957:1, end:3957:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar282 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar282 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3968:1, end:3968:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar283 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar283 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3979:1, end:3979:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar284 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar284 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3990:1, end:3990:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar285 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar285 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4001:1, end:4001:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar286 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar286 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4012:1, end:4012:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar287 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar287 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4022:1, end:4022:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar288 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar288 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4032:1, end:4032:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar289 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar289 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4042:1, end:4042:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar290 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar290 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4053:1, end:4053:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar291 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar291 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4082:1, end:4082:2))"]
#[derive(Clone, Debug)]
struct maddm_h_instructionVar292 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddm_h_instructionVar292 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4094:1, end:4094:2))"]
#[derive(Clone, Debug)]
struct maddm_h_instructionVar293 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddm_h_instructionVar293 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4106:1, end:4106:2))"]
#[derive(Clone, Debug)]
struct maddm_h_instructionVar294 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddm_h_instructionVar294 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4118:1, end:4118:2))"]
#[derive(Clone, Debug)]
struct maddm_h_instructionVar295 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddm_h_instructionVar295 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4130:1, end:4130:2))"]
#[derive(Clone, Debug)]
struct maddms_h_instructionVar296 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddms_h_instructionVar296 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4143:1, end:4143:2))"]
#[derive(Clone, Debug)]
struct maddms_h_instructionVar297 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddms_h_instructionVar297 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4156:1, end:4156:2))"]
#[derive(Clone, Debug)]
struct maddms_h_instructionVar298 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddms_h_instructionVar298 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4169:1, end:4169:2))"]
#[derive(Clone, Debug)]
struct maddms_h_instructionVar299 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddms_h_instructionVar299 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4182:1, end:4182:2))"]
#[derive(Clone, Debug)]
struct maddr_h_instructionVar300 {
    Rd2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddr_h_instructionVar300 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddr.h"));
        let extend: [DisplayElement; 11usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4196:1, end:4196:2))"]
#[derive(Clone, Debug)]
struct maddr_h_instructionVar301 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddr_h_instructionVar301 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4210:1, end:4210:2))"]
#[derive(Clone, Debug)]
struct maddr_h_instructionVar302 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddr_h_instructionVar302 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4224:1, end:4224:2))"]
#[derive(Clone, Debug)]
struct maddr_h_instructionVar303 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddr_h_instructionVar303 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4238:1, end:4238:2))"]
#[derive(Clone, Debug)]
struct maddr_h_instructionVar304 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddr_h_instructionVar304 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4252:1, end:4252:2))"]
#[derive(Clone, Debug)]
struct maddr_q_instructionVar305 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddr_q_instructionVar305 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddr.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4264:1, end:4264:2))"]
#[derive(Clone, Debug)]
struct maddr_q_instructionVar306 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddr_q_instructionVar306 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddr.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4276:1, end:4276:2))"]
#[derive(Clone, Debug)]
struct maddrs_h_instructionVar307 {
    Rd2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddrs_h_instructionVar307 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddrs.h"));
        let extend: [DisplayElement; 11usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4292:1, end:4292:2))"]
#[derive(Clone, Debug)]
struct maddrs_h_instructionVar308 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddrs_h_instructionVar308 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4310:1, end:4310:2))"]
#[derive(Clone, Debug)]
struct maddrs_h_instructionVar309 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddrs_h_instructionVar309 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4328:1, end:4328:2))"]
#[derive(Clone, Debug)]
struct maddrs_h_instructionVar310 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddrs_h_instructionVar310 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4346:1, end:4346:2))"]
#[derive(Clone, Debug)]
struct maddrs_h_instructionVar311 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddrs_h_instructionVar311 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4364:1, end:4364:2))"]
#[derive(Clone, Debug)]
struct maddrs_q_instructionVar312 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddrs_q_instructionVar312 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddrs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4377:1, end:4377:2))"]
#[derive(Clone, Debug)]
struct maddrs_q_instructionVar313 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddrs_q_instructionVar313 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddrs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4426:1, end:4426:2))"]
#[derive(Clone, Debug)]
struct madds_h_instructionVar314 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_h_instructionVar314 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4441:1, end:4441:2))"]
#[derive(Clone, Debug)]
struct madds_h_instructionVar315 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_h_instructionVar315 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4456:1, end:4456:2))"]
#[derive(Clone, Debug)]
struct madds_h_instructionVar316 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_h_instructionVar316 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4471:1, end:4471:2))"]
#[derive(Clone, Debug)]
struct madds_h_instructionVar317 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_h_instructionVar317 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4486:1, end:4486:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar318 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar318 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4498:1, end:4498:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar319 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar319 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4510:1, end:4510:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar320 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar320 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4522:1, end:4522:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar321 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar321 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4534:1, end:4534:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar322 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar322 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4546:1, end:4546:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar323 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar323 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4557:1, end:4557:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar324 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar324 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4568:1, end:4568:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar325 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar325 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4580:1, end:4580:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar326 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar326 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4592:1, end:4592:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar327 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar327 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4640:1, end:4640:2))"]
#[derive(Clone, Debug)]
struct maddsu_h_instructionVar328 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsu_h_instructionVar328 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsu.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4655:1, end:4655:2))"]
#[derive(Clone, Debug)]
struct maddsu_h_instructionVar329 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsu_h_instructionVar329 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsu.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4670:1, end:4670:2))"]
#[derive(Clone, Debug)]
struct maddsu_h_instructionVar330 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsu_h_instructionVar330 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsu.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4685:1, end:4685:2))"]
#[derive(Clone, Debug)]
struct maddsu_h_instructionVar331 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsu_h_instructionVar331 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsu.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4700:1, end:4700:2))"]
#[derive(Clone, Debug)]
struct maddsum_h_instructionVar332 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsum_h_instructionVar332 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsum.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4712:1, end:4712:2))"]
#[derive(Clone, Debug)]
struct maddsum_h_instructionVar333 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsum_h_instructionVar333 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsum.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4724:1, end:4724:2))"]
#[derive(Clone, Debug)]
struct maddsum_h_instructionVar334 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsum_h_instructionVar334 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsum.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4736:1, end:4736:2))"]
#[derive(Clone, Debug)]
struct maddsum_h_instructionVar335 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsum_h_instructionVar335 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsum.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4748:1, end:4748:2))"]
#[derive(Clone, Debug)]
struct maddsums_h_instructionVar336 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsums_h_instructionVar336 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsums.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4761:1, end:4761:2))"]
#[derive(Clone, Debug)]
struct maddsums_h_instructionVar337 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsums_h_instructionVar337 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsums.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4774:1, end:4774:2))"]
#[derive(Clone, Debug)]
struct maddsums_h_instructionVar338 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsums_h_instructionVar338 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsums.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4787:1, end:4787:2))"]
#[derive(Clone, Debug)]
struct maddsums_h_instructionVar339 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsums_h_instructionVar339 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsums.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4800:1, end:4800:2))"]
#[derive(Clone, Debug)]
struct maddsur_h_instructionVar340 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsur_h_instructionVar340 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsur.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4814:1, end:4814:2))"]
#[derive(Clone, Debug)]
struct maddsur_h_instructionVar341 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsur_h_instructionVar341 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsur.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4828:1, end:4828:2))"]
#[derive(Clone, Debug)]
struct maddsur_h_instructionVar342 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsur_h_instructionVar342 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsur.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4842:1, end:4842:2))"]
#[derive(Clone, Debug)]
struct maddsur_h_instructionVar343 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsur_h_instructionVar343 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsur.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4856:1, end:4856:2))"]
#[derive(Clone, Debug)]
struct maddsurs_h_instructionVar344 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsurs_h_instructionVar344 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsurs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4872:1, end:4872:2))"]
#[derive(Clone, Debug)]
struct maddsurs_h_instructionVar345 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsurs_h_instructionVar345 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsurs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4888:1, end:4888:2))"]
#[derive(Clone, Debug)]
struct maddsurs_h_instructionVar346 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsurs_h_instructionVar346 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsurs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4904:1, end:4904:2))"]
#[derive(Clone, Debug)]
struct maddsurs_h_instructionVar347 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsurs_h_instructionVar347 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsurs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4920:1, end:4920:2))"]
#[derive(Clone, Debug)]
struct maddsus_h_instructionVar348 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsus_h_instructionVar348 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsus.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4935:1, end:4935:2))"]
#[derive(Clone, Debug)]
struct maddsus_h_instructionVar349 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsus_h_instructionVar349 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsus.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4948:1, end:4948:2))"]
#[derive(Clone, Debug)]
struct maddsus_h_instructionVar350 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsus_h_instructionVar350 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsus.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4963:1, end:4963:2))"]
#[derive(Clone, Debug)]
struct maddsus_h_instructionVar351 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl maddsus_h_instructionVar351 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("maddsus.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4983:1, end:4983:2))"]
#[derive(Clone, Debug)]
struct max_instructionVar352 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl max_instructionVar352 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("max"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 26 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5043:1, end:5043:2))"]
#[derive(Clone, Debug)]
struct max_u_instructionVar353 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl max_u_instructionVar353 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("max.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 27 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5068:1, end:5068:2))"]
#[derive(Clone, Debug)]
struct min_instructionVar354 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl min_instructionVar354 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("min"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 24 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5128:1, end:5128:2))"]
#[derive(Clone, Debug)]
struct min_u_instructionVar355 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl min_u_instructionVar355 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("min.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 25 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5313:1, end:5313:2))"]
#[derive(Clone, Debug)]
struct msub_h_instructionVar356 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_h_instructionVar356 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5328:1, end:5328:2))"]
#[derive(Clone, Debug)]
struct msub_h_instructionVar357 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_h_instructionVar357 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5343:1, end:5343:2))"]
#[derive(Clone, Debug)]
struct msub_h_instructionVar358 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_h_instructionVar358 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5358:1, end:5358:2))"]
#[derive(Clone, Debug)]
struct msub_h_instructionVar359 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_h_instructionVar359 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5373:1, end:5373:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar360 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar360 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5384:1, end:5384:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar361 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar361 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5393:1, end:5393:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar362 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar362 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5402:1, end:5402:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar363 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar363 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5411:1, end:5411:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar364 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar364 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5422:1, end:5422:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar365 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar365 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5431:1, end:5431:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar366 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar366 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5440:1, end:5440:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar367 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar367 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5449:1, end:5449:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar368 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar368 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5460:1, end:5460:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar369 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar369 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5489:1, end:5489:2))"]
#[derive(Clone, Debug)]
struct msubad_h_instructionVar370 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubad_h_instructionVar370 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubad.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5504:1, end:5504:2))"]
#[derive(Clone, Debug)]
struct msubad_h_instructionVar371 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubad_h_instructionVar371 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubad.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5519:1, end:5519:2))"]
#[derive(Clone, Debug)]
struct msubad_h_instructionVar372 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubad_h_instructionVar372 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubad.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5534:1, end:5534:2))"]
#[derive(Clone, Debug)]
struct msubad_h_instructionVar373 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubad_h_instructionVar373 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubad.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5549:1, end:5549:2))"]
#[derive(Clone, Debug)]
struct msubadm_h_instructionVar374 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadm_h_instructionVar374 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5561:1, end:5561:2))"]
#[derive(Clone, Debug)]
struct msubadm_h_instructionVar375 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadm_h_instructionVar375 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5573:1, end:5573:2))"]
#[derive(Clone, Debug)]
struct msubadm_h_instructionVar376 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadm_h_instructionVar376 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5585:1, end:5585:2))"]
#[derive(Clone, Debug)]
struct msubadm_h_instructionVar377 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadm_h_instructionVar377 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5597:1, end:5597:2))"]
#[derive(Clone, Debug)]
struct msubadms_h_instructionVar378 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadms_h_instructionVar378 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5610:1, end:5610:2))"]
#[derive(Clone, Debug)]
struct msubadms_h_instructionVar379 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadms_h_instructionVar379 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5623:1, end:5623:2))"]
#[derive(Clone, Debug)]
struct msubadms_h_instructionVar380 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadms_h_instructionVar380 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5636:1, end:5636:2))"]
#[derive(Clone, Debug)]
struct msubadms_h_instructionVar381 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadms_h_instructionVar381 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5649:1, end:5649:2))"]
#[derive(Clone, Debug)]
struct msubadr_h_instructionVar382 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadr_h_instructionVar382 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5662:1, end:5662:2))"]
#[derive(Clone, Debug)]
struct msubadr_h_instructionVar383 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadr_h_instructionVar383 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5676:1, end:5676:2))"]
#[derive(Clone, Debug)]
struct msubadr_h_instructionVar384 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadr_h_instructionVar384 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5690:1, end:5690:2))"]
#[derive(Clone, Debug)]
struct msubadr_h_instructionVar385 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadr_h_instructionVar385 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5704:1, end:5704:2))"]
#[derive(Clone, Debug)]
struct msubadrs_h_instructionVar386 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadrs_h_instructionVar386 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5720:1, end:5720:2))"]
#[derive(Clone, Debug)]
struct msubadrs_h_instructionVar387 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadrs_h_instructionVar387 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5736:1, end:5736:2))"]
#[derive(Clone, Debug)]
struct msubadrs_h_instructionVar388 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadrs_h_instructionVar388 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5752:1, end:5752:2))"]
#[derive(Clone, Debug)]
struct msubadrs_h_instructionVar389 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubadrs_h_instructionVar389 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubadrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5768:1, end:5768:2))"]
#[derive(Clone, Debug)]
struct msubads_h_instructionVar390 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubads_h_instructionVar390 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubads.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5783:1, end:5783:2))"]
#[derive(Clone, Debug)]
struct msubads_h_instructionVar391 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubads_h_instructionVar391 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubads.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5798:1, end:5798:2))"]
#[derive(Clone, Debug)]
struct msubads_h_instructionVar392 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubads_h_instructionVar392 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubads.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5813:1, end:5813:2))"]
#[derive(Clone, Debug)]
struct msubads_h_instructionVar393 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubads_h_instructionVar393 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubads.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5828:1, end:5828:2))"]
#[derive(Clone, Debug)]
struct msubm_h_instructionVar394 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubm_h_instructionVar394 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5841:1, end:5841:2))"]
#[derive(Clone, Debug)]
struct msubm_h_instructionVar395 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubm_h_instructionVar395 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5854:1, end:5854:2))"]
#[derive(Clone, Debug)]
struct msubm_h_instructionVar396 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubm_h_instructionVar396 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5867:1, end:5867:2))"]
#[derive(Clone, Debug)]
struct msubm_h_instructionVar397 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubm_h_instructionVar397 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubm.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5880:1, end:5880:2))"]
#[derive(Clone, Debug)]
struct msubms_h_instructionVar398 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubms_h_instructionVar398 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5893:1, end:5893:2))"]
#[derive(Clone, Debug)]
struct msubms_h_instructionVar399 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubms_h_instructionVar399 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5906:1, end:5906:2))"]
#[derive(Clone, Debug)]
struct msubms_h_instructionVar400 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubms_h_instructionVar400 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2831 = token_15(tokens_current);
        let Re2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5919:1, end:5919:2))"]
#[derive(Clone, Debug)]
struct msubms_h_instructionVar401 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubms_h_instructionVar401 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubms.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5932:1, end:5932:2))"]
#[derive(Clone, Debug)]
struct msubr_h_instructionVar402 {
    Rd2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubr_h_instructionVar402 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubr.h"));
        let extend: [DisplayElement; 11usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5946:1, end:5946:2))"]
#[derive(Clone, Debug)]
struct msubr_h_instructionVar403 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubr_h_instructionVar403 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5960:1, end:5960:2))"]
#[derive(Clone, Debug)]
struct msubr_h_instructionVar404 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubr_h_instructionVar404 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5974:1, end:5974:2))"]
#[derive(Clone, Debug)]
struct msubr_h_instructionVar405 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubr_h_instructionVar405 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5988:1, end:5988:2))"]
#[derive(Clone, Debug)]
struct msubr_h_instructionVar406 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubr_h_instructionVar406 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubr.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6002:1, end:6002:2))"]
#[derive(Clone, Debug)]
struct msubr_q_instructionVar407 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubr_q_instructionVar407 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubr.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6014:1, end:6014:2))"]
#[derive(Clone, Debug)]
struct msubr_q_instructionVar408 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubr_q_instructionVar408 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubr.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6026:1, end:6026:2))"]
#[derive(Clone, Debug)]
struct msubrs_h_instructionVar409 {
    Rd2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubrs_h_instructionVar409 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubrs.h"));
        let extend: [DisplayElement; 11usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6042:1, end:6042:2))"]
#[derive(Clone, Debug)]
struct msubrs_h_instructionVar410 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubrs_h_instructionVar410 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6058:1, end:6058:2))"]
#[derive(Clone, Debug)]
struct msubrs_h_instructionVar411 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubrs_h_instructionVar411 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6074:1, end:6074:2))"]
#[derive(Clone, Debug)]
struct msubrs_h_instructionVar412 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubrs_h_instructionVar412 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6090:1, end:6090:2))"]
#[derive(Clone, Debug)]
struct msubrs_h_instructionVar413 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubrs_h_instructionVar413 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubrs.h"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6106:1, end:6106:2))"]
#[derive(Clone, Debug)]
struct msubrs_q_instructionVar414 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubrs_q_instructionVar414 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubrs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6119:1, end:6119:2))"]
#[derive(Clone, Debug)]
struct msubrs_q_instructionVar415 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubrs_q_instructionVar415 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubrs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6168:1, end:6168:2))"]
#[derive(Clone, Debug)]
struct msubs_h_instructionVar416 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_h_instructionVar416 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6183:1, end:6183:2))"]
#[derive(Clone, Debug)]
struct msubs_h_instructionVar417 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_h_instructionVar417 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6198:1, end:6198:2))"]
#[derive(Clone, Debug)]
struct msubs_h_instructionVar418 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_h_instructionVar418 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2427 = token_12(tokens_current);
        let Reo2427 = token_12(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6213:1, end:6213:2))"]
#[derive(Clone, Debug)]
struct msubs_h_instructionVar419 {
    Ree2831: u8,
    Reo2831: u8,
    Ree2427: u8,
    Reo2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_h_instructionVar419 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.h"));
        let extend: [DisplayElement; 13usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree2427),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2427 = token_12(tokens_current);
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        let Ree2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ree2831,
                Reo2831,
                Ree2427,
                Reo2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6228:1, end:6228:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar420 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar420 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6240:1, end:6240:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar421 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar421 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6250:1, end:6250:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar422 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar422 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6260:1, end:6260:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar423 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar423 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6270:1, end:6270:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar424 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar424 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6282:1, end:6282:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar425 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar425 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6292:1, end:6292:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar426 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar426 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6302:1, end:6302:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar427 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar427 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6312:1, end:6312:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar428 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar428 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("u,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6324:1, end:6324:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar429 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar429 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.q"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal("l,"),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1617Z = if let Some((len, table)) =
            Tableconst1617Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re2427 = token_12(tokens_current);
        let Re2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Re2831,
                Re2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6391:1, end:6391:2))"]
#[derive(Clone, Debug)]
struct mul_instructionVar430 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl mul_instructionVar430 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 83 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 1 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6408:1, end:6408:2))"]
#[derive(Clone, Debug)]
struct mul_instructionVar431 {
    Re2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl mul_instructionVar431 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 83 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 3 {
                return None;
            }
            let Re2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Re2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6564:1, end:6564:2))"]
#[derive(Clone, Debug)]
struct mul_u_instructionVar432 {
    Re2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl mul_u_instructionVar432 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 83 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 2 {
                return None;
            }
            let Re2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Re2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6717:1, end:6717:2))"]
#[derive(Clone, Debug)]
struct muls_instructionVar433 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl muls_instructionVar433 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("muls"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 83 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 5 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6735:1, end:6735:2))"]
#[derive(Clone, Debug)]
struct muls_u_instructionVar434 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl muls_u_instructionVar434 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("muls.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 83 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 4 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6759:1, end:6759:2))"]
#[derive(Clone, Debug)]
struct nand_instructionVar435 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl nand_instructionVar435 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("nand"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 9 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6779:1, end:6779:2))"]
#[derive(Clone, Debug)]
struct ne_instructionVar436 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl ne_instructionVar436 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ne"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 17 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6825:1, end:6825:2))"]
#[derive(Clone, Debug)]
struct nor_instructionVar437 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl nor_instructionVar437 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("nor"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 11 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6861:1, end:6861:2))"]
#[derive(Clone, Debug)]
struct or_instructionVar438 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl or_instructionVar438 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 10 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6893:1, end:6893:2))"]
#[derive(Clone, Debug)]
struct or_eq_instructionVar439 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl or_eq_instructionVar439 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.eq"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 39 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6905:1, end:6905:2))"]
#[derive(Clone, Debug)]
struct or_ge_instructionVar440 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl or_ge_instructionVar440 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.ge"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 43 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6917:1, end:6917:2))"]
#[derive(Clone, Debug)]
struct or_ge_u_instructionVar441 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl or_ge_u_instructionVar441 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.ge.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 44 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6929:1, end:6929:2))"]
#[derive(Clone, Debug)]
struct or_lt_instructionVar442 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl or_lt_instructionVar442 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.lt"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 41 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6941:1, end:6941:2))"]
#[derive(Clone, Debug)]
struct or_lt_u_instructionVar443 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl or_lt_u_instructionVar443 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.lt.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 42 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6953:1, end:6953:2))"]
#[derive(Clone, Debug)]
struct or_ne_instructionVar444 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl or_ne_instructionVar444 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.ne"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 40 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6993:1, end:6993:2))"]
#[derive(Clone, Debug)]
struct orn_instructionVar445 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl orn_instructionVar445 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("orn"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 15 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7226:1, end:7226:2))"]
#[derive(Clone, Debug)]
struct rsub_instructionVar446 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl rsub_instructionVar446 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rsub"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 8 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7233:1, end:7233:2))"]
#[derive(Clone, Debug)]
struct rsubs_instructionVar447 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl rsubs_instructionVar447 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rsubs"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 10 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7241:1, end:7241:2))"]
#[derive(Clone, Debug)]
struct rsubs_u_instructionVar448 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl rsubs_u_instructionVar448 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rsubs.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 11 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7398:1, end:7398:2))"]
#[derive(Clone, Debug)]
struct sh_eq_instructionVar449 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl sh_eq_instructionVar449 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.eq"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 55 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7410:1, end:7410:2))"]
#[derive(Clone, Debug)]
struct sh_ge_instructionVar450 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl sh_ge_instructionVar450 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.ge"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 59 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7422:1, end:7422:2))"]
#[derive(Clone, Debug)]
struct sh_ge_u_instructionVar451 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl sh_ge_u_instructionVar451 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.ge.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 60 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7440:1, end:7440:2))"]
#[derive(Clone, Debug)]
struct sh_h_instructionVar452 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl sh_h_instructionVar452 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.h"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 64 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7458:1, end:7458:2))"]
#[derive(Clone, Debug)]
struct sh_lt_instructionVar453 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl sh_lt_instructionVar453 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.lt"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 57 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7470:1, end:7470:2))"]
#[derive(Clone, Debug)]
struct sh_lt_u_instructionVar454 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl sh_lt_u_instructionVar454 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.lt.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 58 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7491:1, end:7491:2))"]
#[derive(Clone, Debug)]
struct sh_ne_instructionVar455 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl sh_ne_instructionVar455 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.ne"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 56 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7568:1, end:7568:2))"]
#[derive(Clone, Debug)]
struct sha_instructionVar456 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl sha_instructionVar456 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sha"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 1 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7601:1, end:7601:2))"]
#[derive(Clone, Debug)]
struct sha_h_instructionVar457 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl sha_h_instructionVar457 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sha.h"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 65 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7634:1, end:7634:2))"]
#[derive(Clone, Debug)]
struct shas_instructionVar458 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl shas_instructionVar458 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("shas"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 2 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8414:1, end:8414:2))"]
#[derive(Clone, Debug)]
struct xnor_instructionVar459 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl xnor_instructionVar459 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xnor"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 13 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8442:1, end:8442:2))"]
#[derive(Clone, Debug)]
struct xor_instructionVar460 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl xor_instructionVar460 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 143 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 12 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8454:1, end:8454:2))"]
#[derive(Clone, Debug)]
struct xor_eq_instructionVar461 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl xor_eq_instructionVar461 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.eq"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 47 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8466:1, end:8466:2))"]
#[derive(Clone, Debug)]
struct xor_ge_instructionVar462 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl xor_ge_instructionVar462 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.ge"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 51 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8478:1, end:8478:2))"]
#[derive(Clone, Debug)]
struct xor_ge_u_instructionVar463 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl xor_ge_u_instructionVar463 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.ge.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 52 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8490:1, end:8490:2))"]
#[derive(Clone, Debug)]
struct xor_lt_instructionVar464 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl xor_lt_instructionVar464 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.lt"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 49 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8502:1, end:8502:2))"]
#[derive(Clone, Debug)]
struct xor_lt_u_instructionVar465 {
    Rd2831: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl xor_lt_u_instructionVar465 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.lt.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 50 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8514:1, end:8514:2))"]
#[derive(Clone, Debug)]
struct xor_ne_instructionVar466 {
    Rd2831: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl xor_ne_instructionVar466 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.ne"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 139 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_28(tokens) != 48 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1694:1, end:1694:2))"]
#[derive(Clone, Debug)]
struct cadd_instructionVar467 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl cadd_instructionVar467 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cadd"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 171 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 0 {
                return None;
            }
            let Rd2427 = token_12(tokens);
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1721:1, end:1721:2))"]
#[derive(Clone, Debug)]
struct caddn_instructionVar468 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl caddn_instructionVar468 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("caddn"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 171 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 1 {
                return None;
            }
            let Rd2427 = token_12(tokens);
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2012:1, end:2012:2))"]
#[derive(Clone, Debug)]
struct dextr_instructionVar469 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
}
impl dextr_instructionVar469 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dextr"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2362:1, end:2362:2))"]
#[derive(Clone, Debug)]
struct extr_instructionVar470 {
    Rd2831: u8,
    Rd0811: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl extr_instructionVar470 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("extr"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2386:1, end:2386:2))"]
#[derive(Clone, Debug)]
struct extr_u_instructionVar471 {
    Rd2831: u8,
    Rd0811: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl extr_u_instructionVar471 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("extr.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2553:1, end:2553:2))"]
#[derive(Clone, Debug)]
struct imask_instructionVar472 {
    Ree2831: u8,
    Reo2831: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl imask_instructionVar472 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("imask"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ree2831 = token_15(tokens_current);
        let Reo2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Ree2831,
                Reo2831,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2574:1, end:2574:2))"]
#[derive(Clone, Debug)]
struct imask_instructionVar473 {
    Ree2831: u8,
    Reo2831: u8,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl imask_instructionVar473 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("imask"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_3_display(self.Ree2831),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo2831),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Reo2831 = token_15(tokens_current);
        let Ree2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                const2327Z,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2618:1, end:2618:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar474 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    Rd2427: u8,
    const1620Z: Tableconst1620Z,
}
impl insert_instructionVar474 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("insert"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        let Rd2427 = token_12(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
                Rd2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2645:1, end:2645:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar475 {
    Rd2831: u8,
    Rd0811: u8,
    Rd2427: u8,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
}
impl insert_instructionVar475 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("insert"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2427 = token_12(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3822:1, end:3822:2))"]
#[derive(Clone, Debug)]
struct madd_instructionVar476 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl madd_instructionVar476 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 19 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 1 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            let Rd2427 = token_12(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831, Rd2427), pattern_len))
        };
        let ((), (Rd0811, Rd2831, Rd2427), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3830:1, end:3830:2))"]
#[derive(Clone, Debug)]
struct madd_instructionVar477 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl madd_instructionVar477 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 19 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 3 {
                return None;
            }
            let Re2831 = token_15(tokens);
            let Re2427 = token_12(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2831, Re2427), pattern_len))
        };
        let ((), (Rd0811, Re2831, Re2427), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Re2831,
                Re2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4064:1, end:4064:2))"]
#[derive(Clone, Debug)]
struct madd_u_instructionVar478 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl madd_u_instructionVar478 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madd.u"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c57 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 19 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 2 {
                return None;
            }
            let Re2831 = token_15(tokens);
            let Re2427 = token_12(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2831, Re2427), pattern_len))
        };
        let ((), (Rd0811, Re2831, Re2427), sub_len) =
            sub_pattern_c57(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Re2831,
                Re2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4397:1, end:4397:2))"]
#[derive(Clone, Debug)]
struct madds_instructionVar479 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl madds_instructionVar479 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 19 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 5 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            let Rd2427 = token_12(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831, Rd2427), pattern_len))
        };
        let ((), (Rd0811, Rd2831, Rd2427), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4406:1, end:4406:2))"]
#[derive(Clone, Debug)]
struct madds_instructionVar480 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl madds_instructionVar480 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 19 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 7 {
                return None;
            }
            let Re2831 = token_15(tokens);
            let Re2427 = token_12(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2831, Re2427), pattern_len))
        };
        let ((), (Rd0811, Re2831, Re2427), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Re2831,
                Re2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4603:1, end:4603:2))"]
#[derive(Clone, Debug)]
struct madds_u_instructionVar481 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl madds_u_instructionVar481 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.u"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c58 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 19 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 4 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            let Rd2427 = token_12(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831, Rd2427), pattern_len))
        };
        let ((), (Rd0811, Rd2831, Rd2427), sub_len) =
            sub_pattern_c58(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4620:1, end:4620:2))"]
#[derive(Clone, Debug)]
struct madds_u_instructionVar482 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl madds_u_instructionVar482 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("madds.u"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c58 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 19 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 6 {
                return None;
            }
            let Re2427 = token_12(tokens);
            let Re2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c58(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Re2831,
                Re2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5277:1, end:5277:2))"]
#[derive(Clone, Debug)]
struct msub_instructionVar483 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl msub_instructionVar483 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 51 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 1 {
                return None;
            }
            let Rd2427 = token_12(tokens);
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5285:1, end:5285:2))"]
#[derive(Clone, Debug)]
struct msub_instructionVar484 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl msub_instructionVar484 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 51 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 3 {
                return None;
            }
            let Re2831 = token_15(tokens);
            let Re2427 = token_12(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2831, Re2427), pattern_len))
        };
        let ((), (Rd0811, Re2831, Re2427), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Re2831,
                Re2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5471:1, end:5471:2))"]
#[derive(Clone, Debug)]
struct msub_u_instructionVar485 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl msub_u_instructionVar485 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msub.u"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c57 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 51 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 2 {
                return None;
            }
            let Re2427 = token_12(tokens);
            let Re2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c57(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Re2831,
                Re2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6139:1, end:6139:2))"]
#[derive(Clone, Debug)]
struct msubs_instructionVar486 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl msubs_instructionVar486 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 51 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 5 {
                return None;
            }
            let Rd2427 = token_12(tokens);
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6148:1, end:6148:2))"]
#[derive(Clone, Debug)]
struct msubs_instructionVar487 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl msubs_instructionVar487 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 51 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 7 {
                return None;
            }
            let Re2427 = token_12(tokens);
            let Re2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Re2831,
                Re2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6335:1, end:6335:2))"]
#[derive(Clone, Debug)]
struct msubs_u_instructionVar488 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl msubs_u_instructionVar488 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.u"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c58 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 51 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 4 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            let Rd2427 = token_12(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831, Rd2427), pattern_len))
        };
        let ((), (Rd0811, Rd2831, Rd2427), sub_len) =
            sub_pattern_c58(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6352:1, end:6352:2))"]
#[derive(Clone, Debug)]
struct msubs_u_instructionVar489 {
    Re2831: u8,
    Re2427: u8,
    Rd0811: u8,
    const1220Z: Tableconst1220Z,
}
impl msubs_u_instructionVar489 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("msubs.u"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c58 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 51 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 6 {
                return None;
            }
            let Re2427 = token_12(tokens);
            let Re2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c58(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) =
            Tableconst1220Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Re2831,
                Re2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7319:1, end:7319:2))"]
#[derive(Clone, Debug)]
struct sel_instructionVar490 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl sel_instructionVar490 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sel"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c54 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 171 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 4 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            let Rd2427 = token_12(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831, Rd2427), pattern_len))
        };
        let ((), (Rd0811, Rd2831, Rd2427), sub_len) =
            sub_pattern_c54(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7331:1, end:7331:2))"]
#[derive(Clone, Debug)]
struct seln_instructionVar491 {
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    const1220S: Tableconst1220S,
}
impl seln_instructionVar491 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("seln"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 171 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_27(tokens) != 5 {
                return None;
            }
            let Rd2831 = token_15(tokens);
            let Rd2427 = token_12(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831, Rd2427), pattern_len))
        };
        let ((), (Rd0811, Rd2831, Rd2427), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) =
            Tableconst1220S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd2831,
                Rd2427,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1315:1, end:1315:2))"]
#[derive(Clone, Debug)]
struct and_and_t_instructionVar492 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl and_and_t_instructionVar492 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.and.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1323:1, end:1323:2))"]
#[derive(Clone, Debug)]
struct and_andn_t_instructionVar493 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl and_andn_t_instructionVar493 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.andn.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1403:1, end:1403:2))"]
#[derive(Clone, Debug)]
struct and_nor_t_instructionVar494 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl and_nor_t_instructionVar494 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.nor.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1411:1, end:1411:2))"]
#[derive(Clone, Debug)]
struct and_or_t_instructionVar495 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl and_or_t_instructionVar495 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.or.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1419:1, end:1419:2))"]
#[derive(Clone, Debug)]
struct and_t_instructionVar496 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl and_t_instructionVar496 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1439:1, end:1439:2))"]
#[derive(Clone, Debug)]
struct andn_t_instructionVar497 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl andn_t_instructionVar497 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("andn.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1590:1, end:1590:2))"]
#[derive(Clone, Debug)]
struct cachea_i_instructionVar498 {
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl cachea_i_instructionVar498 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cachea.i"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpo1215 = token_15(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1612:1, end:1612:2))"]
#[derive(Clone, Debug)]
struct cachea_w_instructionVar499 {
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl cachea_w_instructionVar499 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cachea.w"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpo1215 = token_15(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1634:1, end:1634:2))"]
#[derive(Clone, Debug)]
struct cachea_wi_instructionVar500 {
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl cachea_wi_instructionVar500 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cachea.wi"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpo1215 = token_15(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3630:1, end:3630:2))"]
#[derive(Clone, Debug)]
struct ldlcx_instructionVar501 {
    BO: TableBO,
    off10: Tableoff10,
}
impl ldlcx_instructionVar501 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ldlcx"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c27 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 73 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 36 {
                return None;
            }
            let off10 = if let Some((len, table)) =
                Tableoff10::parse(tokens, &mut context_instance, inst_start)
            {
                block_1_len = block_1_len.max(len as AddrType);
                table
            } else {
                return None;
            };
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((off10), (), pattern_len))
        };
        let ((mut off10), (), sub_len) = sub_pattern_c27(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, off10 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3666:1, end:3666:2))"]
#[derive(Clone, Debug)]
struct lducx_instructionVar502 {
    off10: Tableoff10,
    BO: TableBO,
}
impl lducx_instructionVar502 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lducx"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c27 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 73 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 37 {
                return None;
            }
            let off10 = if let Some((len, table)) =
                Tableoff10::parse(tokens, &mut context_instance, inst_start)
            {
                block_1_len = block_1_len.max(len as AddrType);
                table
            } else {
                return None;
            };
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((off10), (), pattern_len))
        };
        let ((mut off10), (), sub_len) = sub_pattern_c27(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8069:1, end:8069:2))"]
#[derive(Clone, Debug)]
struct stlcx_instructionVar503 {
    BO: TableBO,
}
impl stlcx_instructionVar503 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("stlcx"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c27 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 73 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 38 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c27(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8084:1, end:8084:2))"]
#[derive(Clone, Debug)]
struct stucx_instructionVar504 {
    BO: TableBO,
}
impl stucx_instructionVar504 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("stucx"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c27 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 73 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 39 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c27(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1924:1, end:1924:2))"]
#[derive(Clone, Debug)]
struct cmpswap_w_instructionVar505 {
    Rpe1215: u8,
    Rpo1215: u8,
    Ree0811: u8,
    Reo0811: u8,
    off10: Tableoff10,
}
impl cmpswap_w_instructionVar505 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cmpswap.w"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree0811),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Reo0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        let Ree0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1953:1, end:1953:2))"]
#[derive(Clone, Debug)]
struct cop_instructionVar506 {
    op2027: u8,
    op1617: u8,
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl cop_instructionVar506 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cop"));
        let extend: [DisplayElement; 10usize] = [
            <DisplayElement>::Literal(" "),
            DisplayElement::Number(true, false, self.op2027 as u64),
            <DisplayElement>::Literal("["),
            DisplayElement::Number(true, false, self.op1617 as u64),
            <DisplayElement>::Literal("],"),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let op2027 = token_25(tokens_current);
        let op1617 = token_17(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op2027,
                op1617,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1961:1, end:1961:2))"]
#[derive(Clone, Debug)]
struct cop_instructionVar507 {
    op2023: u8,
    op1617: u8,
    Rd2831: u8,
    Rd2427: u8,
    Rd0811: u8,
    Rd1215: u8,
}
impl cop_instructionVar507 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cop"));
        let extend: [DisplayElement; 12usize] = [
            <DisplayElement>::Literal(" "),
            DisplayElement::Number(true, false, self.op2023 as u64),
            <DisplayElement>::Literal("["),
            DisplayElement::Number(true, false, self.op1617 as u64),
            <DisplayElement>::Literal("],"),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd2427),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let op1617 = token_17(tokens_current);
        let Rd2427 = token_12(tokens_current);
        let op2023 = token_7(tokens_current);
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op2023,
                op1617,
                Rd2831,
                Rd2427,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3718:1, end:3718:2))"]
#[derive(Clone, Debug)]
struct loopu_instructionVar508 {
    off1630pc15s: Tableoff1630pc15s,
}
impl loopu_instructionVar508 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("loopu"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off1630pc15s }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1998:1, end:1998:2))"]
#[derive(Clone, Debug)]
struct debug_instructionVar509 {}
impl debug_instructionVar509 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("debug"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2440:1, end:2440:2))"]
#[derive(Clone, Debug)]
struct fret_instructionVar510 {}
impl fret_instructionVar510 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("fret"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2593:1, end:2593:2))"]
#[derive(Clone, Debug)]
struct ins_t_instructionVar511 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl ins_t_instructionVar511 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ins.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2609:1, end:2609:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar512 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl insert_instructionVar512 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("insert"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2636:1, end:2636:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar513 {
    Rd2831: u8,
    Rd0811: u8,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl insert_instructionVar513 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("insert"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2654:1, end:2654:2))"]
#[derive(Clone, Debug)]
struct insn_t_instructionVar514 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl insn_t_instructionVar514 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("insn.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3087:1, end:3087:2))"]
#[derive(Clone, Debug)]
struct jnz_a_instructionVar515 {
    Ra0811: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jnz_a_instructionVar515 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jnz.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3131:1, end:3131:2))"]
#[derive(Clone, Debug)]
struct jz_a_instructionVar516 {
    Ra0811: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jz_a_instructionVar516 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jz.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3709:1, end:3709:2))"]
#[derive(Clone, Debug)]
struct loop_instructionVar517 {
    Ra1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl loop_instructionVar517 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("loop"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6371:1, end:6371:2))"]
#[derive(Clone, Debug)]
struct mtcr_instructionVar518 {
    Rd0811: u8,
    const1227Z: Tableconst1227Z,
}
impl mtcr_instructionVar518 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mtcr"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.const1227Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c41 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 205 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_15(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c41(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) =
            Tableconst1227Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2829:1, end:2829:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar519 {
    Rd0811: u8,
    Rd1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jeq_instructionVar519 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jeq"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2835:1, end:2835:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar520 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jeq_instructionVar520 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jeq"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2841:1, end:2841:2))"]
#[derive(Clone, Debug)]
struct jeq_a_instructionVar521 {
    Ra0811: u8,
    Ra1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jeq_a_instructionVar521 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jeq.a"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2847:1, end:2847:2))"]
#[derive(Clone, Debug)]
struct jge_instructionVar522 {
    Rd0811: u8,
    Rd1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jge_instructionVar522 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jge"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2853:1, end:2853:2))"]
#[derive(Clone, Debug)]
struct jge_instructionVar523 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jge_instructionVar523 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jge"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2859:1, end:2859:2))"]
#[derive(Clone, Debug)]
struct jge_u_instructionVar524 {
    Rd0811: u8,
    Rd1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jge_u_instructionVar524 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jge.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2865:1, end:2865:2))"]
#[derive(Clone, Debug)]
struct jge_u_instructionVar525 {
    Rd0811: u8,
    const1215Z: Tableconst1215Z,
    off1630pc15s: Tableoff1630pc15s,
}
impl jge_u_instructionVar525 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jge.u"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2894:1, end:2894:2))"]
#[derive(Clone, Debug)]
struct ji_instructionVar526 {}
impl ji_instructionVar526 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ji"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::a11),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6797:1, end:6797:2))"]
#[derive(Clone, Debug)]
struct nop_instructionVar527 {}
impl nop_instructionVar527 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("nop"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7086:1, end:7086:2))"]
#[derive(Clone, Debug)]
struct ret_instructionVar528 {}
impl ret_instructionVar528 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ret"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7128:1, end:7128:2))"]
#[derive(Clone, Debug)]
struct rfe_instructionVar529 {}
impl rfe_instructionVar529 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rfe"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:604:1, end:604:2))"]
#[derive(Clone, Debug)]
struct nop_instructionVar530 {}
impl nop_instructionVar530 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("nop"));
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2888:1, end:2888:2))"]
#[derive(Clone, Debug)]
struct ji_instructionVar531 {
    Ra0811: u8,
}
impl ji_instructionVar531 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ji"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2949:1, end:2949:2))"]
#[derive(Clone, Debug)]
struct jlt_instructionVar532 {
    Rd0811: u8,
    Rd1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jlt_instructionVar532 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jlt"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2955:1, end:2955:2))"]
#[derive(Clone, Debug)]
struct jlt_instructionVar533 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jlt_instructionVar533 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jlt"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2961:1, end:2961:2))"]
#[derive(Clone, Debug)]
struct jlt_u_instructionVar534 {
    Rd0811: u8,
    Rd1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jlt_u_instructionVar534 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jlt.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2967:1, end:2967:2))"]
#[derive(Clone, Debug)]
struct jlt_u_instructionVar535 {
    Rd0811: u8,
    const1215Z: Tableconst1215Z,
    off1630pc15s: Tableoff1630pc15s,
}
impl jlt_u_instructionVar535 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jlt.u"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3013:1, end:3013:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar536 {
    Rd0811: u8,
    Rd1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jne_instructionVar536 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jne"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3019:1, end:3019:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar537 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jne_instructionVar537 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jne"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3025:1, end:3025:2))"]
#[derive(Clone, Debug)]
struct jne_a_instructionVar538 {
    Ra0811: u8,
    Ra1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jne_a_instructionVar538 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jne.a"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3031:1, end:3031:2))"]
#[derive(Clone, Debug)]
struct jned_instructionVar539 {
    Rd0811: u8,
    Rd1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jned_instructionVar539 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jned"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3039:1, end:3039:2))"]
#[derive(Clone, Debug)]
struct jned_instructionVar540 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jned_instructionVar540 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jned"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3047:1, end:3047:2))"]
#[derive(Clone, Debug)]
struct jnei_instructionVar541 {
    Rd0811: u8,
    Rd1215: u8,
    off1630pc15s: Tableoff1630pc15s,
}
impl jnei_instructionVar541 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jnei"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3055:1, end:3055:2))"]
#[derive(Clone, Debug)]
struct jnei_instructionVar542 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jnei_instructionVar542 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jnei"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3209:1, end:3209:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar543 {
    Ra0811: u8,
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl ld_a_instructionVar543 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.a"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(",["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ra0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3241:1, end:3241:2))"]
#[derive(Clone, Debug)]
struct ld_b_instructionVar544 {
    Rd0811: u8,
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl ld_b_instructionVar544 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.b"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(",["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3309:1, end:3309:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar545 {
    Rd0811: u8,
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl ld_bu_instructionVar545 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.bu"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(",["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3335:1, end:3335:2))"]
#[derive(Clone, Debug)]
struct ld_d_instructionVar546 {
    Re0811: u8,
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl ld_d_instructionVar546 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.d"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal(",["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpo1215 = token_15(tokens_current);
        let Re0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Re0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3361:1, end:3361:2))"]
#[derive(Clone, Debug)]
struct ld_da_instructionVar547 {
    Rpe0811: u8,
    Rpo0811: u8,
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl ld_da_instructionVar547 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.da"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_7_display(self.Rpe0811),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo0811),
            <DisplayElement>::Literal(",["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpo1215 = token_15(tokens_current);
        let Rpo0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        let Rpe0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe0811,
                Rpo0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3377:1, end:3377:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar548 {
    Re0811: u8,
    ReN0811: u8,
    BO: TableBO,
}
impl ld_dd_instructionVar548 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.dd"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 9 {
                return None;
            }
            let ReN0811 = token_12(tokens);
            let Re0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 9 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (ReN0811, Re0811), pattern_len))
        };
        let ((), (ReN0811, Re0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3395:1, end:3395:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar549 {
    Re0811: u8,
    ReN0811: u8,
    BO: TableBO,
}
impl ld_dd_instructionVar549 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.dd"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 9 {
                return None;
            }
            let ReN0811 = token_12(tokens);
            let Re0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 25 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (ReN0811, Re0811), pattern_len))
        };
        let ((), (ReN0811, Re0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3405:1, end:3405:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar550 {
    Re0811: u8,
    ReN0811: u8,
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl ld_dd_instructionVar550 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.dd"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
            <DisplayElement>::Literal(",["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Re0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        let ReN0811 = token_12(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Re0811,
                ReN0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3416:1, end:3416:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar551 {
    Re0811: u8,
    ReN0811: u8,
    BO: TableBO,
}
impl ld_dd_instructionVar551 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.dd"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 9 {
                return None;
            }
            let Re0811 = token_12(tokens);
            let ReN0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 41 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3480:1, end:3480:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar552 {
    Rd0811: u8,
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl ld_h_instructionVar552 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.h"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(",["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpe1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3505:1, end:3505:2))"]
#[derive(Clone, Debug)]
struct ld_hu_instructionVar553 {
    Rd0811: u8,
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl ld_hu_instructionVar553 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.hu"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(",["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3544:1, end:3544:2))"]
#[derive(Clone, Debug)]
struct ld_q_instructionVar554 {
    Rd0811: u8,
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl ld_q_instructionVar554 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.q"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(",["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpo1215 = token_15(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3613:1, end:3613:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar555 {
    Rd0811: u8,
    Rpe1215: u8,
    Rpo1215: u8,
    off10: Tableoff10,
}
impl ld_w_instructionVar555 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.w"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(",["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpe1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3623:1, end:3623:2))"]
#[derive(Clone, Debug)]
struct ldlcx_instructionVar556 {
    off18: Tableoff18,
}
impl ldlcx_instructionVar556 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ldlcx"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 21 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 2 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3658:1, end:3658:2))"]
#[derive(Clone, Debug)]
struct ldmst_instructionVar557 {
    Rpe1215: u8,
    Rpo1215: u8,
    Ree0811: u8,
    Reo0811: u8,
    off10: Tableoff10,
}
impl ldmst_instructionVar557 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ldmst"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree0811),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Reo0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        let Ree0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3674:1, end:3674:2))"]
#[derive(Clone, Debug)]
struct lducx_instructionVar558 {
    off18: Tableoff18,
}
impl lducx_instructionVar558 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lducx"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 21 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 3 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3694:1, end:3694:2))"]
#[derive(Clone, Debug)]
struct lea_instructionVar559 {
    Ra0811: u8,
    BO: TableBO,
}
impl lea_instructionVar559 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lea"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c32 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 73 {
                return None;
            }
            let Ra0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 40 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) = sub_pattern_c32(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7695:1, end:7695:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar560 {
    Rpe1215: u8,
    Rpo1215: u8,
    Ra0811: u8,
    off10: Tableoff10,
}
impl st_a_instructionVar560 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.a"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpo1215 = token_15(tokens_current);
        let Ra0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Ra0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7769:1, end:7769:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar561 {
    Rpe1215: u8,
    Rpo1215: u8,
    Rd0811: u8,
    off10: Tableoff10,
}
impl st_b_instructionVar561 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.b"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7795:1, end:7795:2))"]
#[derive(Clone, Debug)]
struct st_d_instructionVar562 {
    Rpe1215: u8,
    Rpo1215: u8,
    Re0811: u8,
    off10: Tableoff10,
}
impl st_d_instructionVar562 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.d"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Re0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Re0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7821:1, end:7821:2))"]
#[derive(Clone, Debug)]
struct st_da_instructionVar563 {
    Rpe1215: u8,
    Rpo1215: u8,
    Rp0811: u8,
    off10: Tableoff10,
}
impl st_da_instructionVar563 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.da"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_6_display(self.Rp0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpe1215 = token_15(tokens_current);
        let Rp0811 = token_12(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Rp0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7837:1, end:7837:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar564 {
    Re0811: u8,
    ReN0811: u8,
    BO: TableBO,
}
impl st_dd_instructionVar564 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.dd"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 137 {
                return None;
            }
            let Re0811 = token_12(tokens);
            let ReN0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 9 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7855:1, end:7855:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar565 {
    Re0811: u8,
    ReN0811: u8,
    BO: TableBO,
}
impl st_dd_instructionVar565 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.dd"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 137 {
                return None;
            }
            let ReN0811 = token_12(tokens);
            let Re0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 25 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (ReN0811, Re0811), pattern_len))
        };
        let ((), (ReN0811, Re0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7865:1, end:7865:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar566 {
    Rpe1215: u8,
    Rpo1215: u8,
    Re0811: u8,
    ReN0811: u8,
    off10: Tableoff10,
}
impl st_dd_instructionVar566 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.dd"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let ReN0811 = token_12(tokens_current);
        let Re0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7876:1, end:7876:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar567 {
    Re0811: u8,
    ReN0811: u8,
    BO: TableBO,
}
impl st_dd_instructionVar567 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.dd"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal("/"),
            meaning_2_display(self.ReN0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 137 {
                return None;
            }
            let ReN0811 = token_12(tokens);
            let Re0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_31(tokens) != 41 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (ReN0811, Re0811), pattern_len))
        };
        let ((), (ReN0811, Re0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7941:1, end:7941:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar568 {
    Rpe1215: u8,
    Rpo1215: u8,
    Rd0811: u8,
    off10: Tableoff10,
}
impl st_h_instructionVar568 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.h"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpo1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7972:1, end:7972:2))"]
#[derive(Clone, Debug)]
struct st_q_instructionVar569 {
    Rpe1215: u8,
    Rpo1215: u8,
    Rd0811: u8,
    off10: Tableoff10,
}
impl st_q_instructionVar569 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.q"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8052:1, end:8052:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar570 {
    Rpe1215: u8,
    Rpo1215: u8,
    Rd0811: u8,
    off10: Tableoff10,
}
impl st_w_instructionVar570 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.w"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8062:1, end:8062:2))"]
#[derive(Clone, Debug)]
struct stlcx_instructionVar571 {
    off18: Tableoff18,
}
impl stlcx_instructionVar571 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("stlcx"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 21 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8077:1, end:8077:2))"]
#[derive(Clone, Debug)]
struct stucx_instructionVar572 {
    off18: Tableoff18,
}
impl stucx_instructionVar572 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("stucx"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 21 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 1 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8267:1, end:8267:2))"]
#[derive(Clone, Debug)]
struct swap_w_instructionVar573 {
    Rpe1215: u8,
    Rpo1215: u8,
    Rd0811: u8,
    off10: Tableoff10,
}
impl swap_w_instructionVar573 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("swap.w"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        let Rpe1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8291:1, end:8291:2))"]
#[derive(Clone, Debug)]
struct swapmsk_w_instructionVar574 {
    Rpe1215: u8,
    Rpo1215: u8,
    Ree0811: u8,
    Reo0811: u8,
    off10: Tableoff10,
}
impl swapmsk_w_instructionVar574 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("swapmsk.w"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree0811),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpe1215 = token_15(tokens_current);
        let Ree0811 = token_12(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        let Reo0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3217:1, end:3217:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar575 {
    Ra0811: u8,
    off18: Tableoff18,
}
impl ld_a_instructionVar575 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 133 {
                return None;
            }
            let Ra0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 2 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3223:1, end:3223:2))"]
#[derive(Clone, Debug)]
struct ld_b_instructionVar576 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl ld_b_instructionVar576 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.b"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 5 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3302:1, end:3302:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar577 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl ld_bu_instructionVar577 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.bu"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 5 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 1 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3328:1, end:3328:2))"]
#[derive(Clone, Debug)]
struct ld_d_instructionVar578 {
    Re0811: u8,
    off18: Tableoff18,
}
impl ld_d_instructionVar578 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.d"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 133 {
                return None;
            }
            let Re0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 1 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3371:1, end:3371:2))"]
#[derive(Clone, Debug)]
struct ld_da_instructionVar579 {
    Rp0811: u8,
    off18: Tableoff18,
}
impl ld_da_instructionVar579 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.da"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_6_display(self.Rp0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 133 {
                return None;
            }
            let Rp0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 3 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) = sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rp0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3488:1, end:3488:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar580 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl ld_h_instructionVar580 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.h"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 5 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 2 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3513:1, end:3513:2))"]
#[derive(Clone, Debug)]
struct ld_hu_instructionVar581 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl ld_hu_instructionVar581 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.hu"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 5 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 3 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3526:1, end:3526:2))"]
#[derive(Clone, Debug)]
struct ld_q_instructionVar582 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl ld_q_instructionVar582 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.q"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 69 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3596:1, end:3596:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar583 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl ld_w_instructionVar583 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.w"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 133 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3650:1, end:3650:2))"]
#[derive(Clone, Debug)]
struct ldmst_instructionVar584 {
    Ree0811: u8,
    Reo0811: u8,
    off18: Tableoff18,
}
impl ldmst_instructionVar584 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ldmst"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree0811),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 229 {
                return None;
            }
            let Reo0811 = token_12(tokens);
            let Ree0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 1 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Reo0811, Ree0811), pattern_len))
        };
        let ((), (Reo0811, Ree0811), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off18,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3681:1, end:3681:2))"]
#[derive(Clone, Debug)]
struct lea_instructionVar585 {
    Ra0811: u8,
    off18: Tableoff18,
}
impl lea_instructionVar585 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lea"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 197 {
                return None;
            }
            let Ra0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) = sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5049:1, end:5049:2))"]
#[derive(Clone, Debug)]
struct mfcr_instructionVar586 {
    Rd2831: u8,
    const1227Z: Tableconst1227Z,
}
impl mfcr_instructionVar586 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mfcr"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c41 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 77 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) = sub_pattern_c41(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) =
            Tableconst1227Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5162:1, end:5162:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar587 {
    Rd2831: u8,
    const1227S: Tableconst1227S,
}
impl mov_instructionVar587 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c40 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 59 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) = sub_pattern_c40(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227S = if let Some((len, table)) =
            Tableconst1227S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227S, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5175:1, end:5175:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar588 {
    Re2831: u8,
    const1227S: Tableconst1227S,
}
impl mov_instructionVar588 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re2831),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c40 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 251 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            let Re2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re2831), pattern_len))
        };
        let ((), (Re2831), sub_len) = sub_pattern_c40(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227S = if let Some((len, table)) =
            Tableconst1227S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227S, Re2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5252:1, end:5252:2))"]
#[derive(Clone, Debug)]
struct mov_u_instructionVar589 {
    Rd2831: u8,
    const1227Z: Tableconst1227Z,
}
impl mov_u_instructionVar589 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov.u"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 187 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) = sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) =
            Tableconst1227Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5258:1, end:5258:2))"]
#[derive(Clone, Debug)]
struct movh_instructionVar590 {
    Rd2831: u8,
    const1227Z: Tableconst1227Z,
}
impl movh_instructionVar590 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("movh"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c41 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 123 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) = sub_pattern_c41(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) =
            Tableconst1227Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5264:1, end:5264:2))"]
#[derive(Clone, Debug)]
struct movh_a_instructionVar591 {
    Ra2831: u8,
    const1227Z: Tableconst1227Z,
}
impl movh_a_instructionVar591 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("movh.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra2831),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 145 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            let Ra2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra2831), pattern_len))
        };
        let ((), (Ra2831), sub_len) = sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) =
            Tableconst1227Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Ra2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6765:1, end:6765:2))"]
#[derive(Clone, Debug)]
struct nand_t_instructionVar592 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl nand_t_instructionVar592 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("nand.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6812:1, end:6812:2))"]
#[derive(Clone, Debug)]
struct not_instructionVar593 {
    Rd0811: u8,
}
impl not_instructionVar593 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("not"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6831:1, end:6831:2))"]
#[derive(Clone, Debug)]
struct nor_t_instructionVar594 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl nor_t_instructionVar594 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("nor.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6867:1, end:6867:2))"]
#[derive(Clone, Debug)]
struct or_and_t_instructionVar595 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl or_and_t_instructionVar595 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.and.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6877:1, end:6877:2))"]
#[derive(Clone, Debug)]
struct or_andn_t_instructionVar596 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl or_andn_t_instructionVar596 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.andn.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6959:1, end:6959:2))"]
#[derive(Clone, Debug)]
struct or_nor_t_instructionVar597 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl or_nor_t_instructionVar597 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.nor.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6969:1, end:6969:2))"]
#[derive(Clone, Debug)]
struct or_or_t_instructionVar598 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl or_or_t_instructionVar598 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.or.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6979:1, end:6979:2))"]
#[derive(Clone, Debug)]
struct or_t_instructionVar599 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl or_t_instructionVar599 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6999:1, end:6999:2))"]
#[derive(Clone, Debug)]
struct orn_t_instructionVar600 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl orn_t_instructionVar600 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("orn.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7218:1, end:7218:2))"]
#[derive(Clone, Debug)]
struct rsub_instructionVar601 {
    Rd0811: u8,
}
impl rsub_instructionVar601 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rsub"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7250:1, end:7250:2))"]
#[derive(Clone, Debug)]
struct sat_b_instructionVar602 {
    Rd0811: u8,
}
impl sat_b_instructionVar602 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sat.b"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7268:1, end:7268:2))"]
#[derive(Clone, Debug)]
struct sat_bu_instructionVar603 {
    Rd0811: u8,
}
impl sat_bu_instructionVar603 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sat.bu"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7282:1, end:7282:2))"]
#[derive(Clone, Debug)]
struct sat_h_instructionVar604 {
    Rd0811: u8,
}
impl sat_h_instructionVar604 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sat.h"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7300:1, end:7300:2))"]
#[derive(Clone, Debug)]
struct sat_hu_instructionVar605 {
    Rd0811: u8,
}
impl sat_hu_instructionVar605 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sat.hu"));
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7339:1, end:7339:2))"]
#[derive(Clone, Debug)]
struct sh_instructionVar606 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl sh_instructionVar606 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7346:1, end:7346:2))"]
#[derive(Clone, Debug)]
struct sh_instructionVar607 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl sh_instructionVar607 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7374:1, end:7374:2))"]
#[derive(Clone, Debug)]
struct sh_and_t_instructionVar608 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl sh_and_t_instructionVar608 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.and.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7383:1, end:7383:2))"]
#[derive(Clone, Debug)]
struct sh_andn_t_instructionVar609 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl sh_andn_t_instructionVar609 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.andn.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7476:1, end:7476:2))"]
#[derive(Clone, Debug)]
struct sh_nand_t_instructionVar610 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_nand_t_instructionVar610 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.nand.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7497:1, end:7497:2))"]
#[derive(Clone, Debug)]
struct sh_nor_t_instructionVar611 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl sh_nor_t_instructionVar611 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.nor.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7506:1, end:7506:2))"]
#[derive(Clone, Debug)]
struct sh_or_t_instructionVar612 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl sh_or_t_instructionVar612 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.or.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7515:1, end:7515:2))"]
#[derive(Clone, Debug)]
struct sh_orn_t_instructionVar613 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_orn_t_instructionVar613 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.orn.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7524:1, end:7524:2))"]
#[derive(Clone, Debug)]
struct sh_xnor_t_instructionVar614 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_xnor_t_instructionVar614 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.xnor.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7533:1, end:7533:2))"]
#[derive(Clone, Debug)]
struct sh_xor_t_instructionVar615 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_xor_t_instructionVar615 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sh.xor.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7703:1, end:7703:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar616 {
    Ra0811: u8,
    off18: Tableoff18,
}
impl st_a_instructionVar616 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.a"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 165 {
                return None;
            }
            let Ra0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 2 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7744:1, end:7744:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar617 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl st_b_instructionVar617 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.b"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 37 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7788:1, end:7788:2))"]
#[derive(Clone, Debug)]
struct st_d_instructionVar618 {
    Re0811: u8,
    off18: Tableoff18,
}
impl st_d_instructionVar618 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.d"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 165 {
                return None;
            }
            let Re0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 1 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7831:1, end:7831:2))"]
#[derive(Clone, Debug)]
struct st_da_instructionVar619 {
    Rp0811: u8,
    off18: Tableoff18,
}
impl st_da_instructionVar619 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.da"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_6_display(self.Rp0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 165 {
                return None;
            }
            let Rp0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 3 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) = sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rp0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7949:1, end:7949:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar620 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl st_h_instructionVar620 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.h"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 37 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 2 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7955:1, end:7955:2))"]
#[derive(Clone, Debug)]
struct st_q_instructionVar621 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl st_q_instructionVar621 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.q"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 101 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7980:1, end:7980:2))"]
#[derive(Clone, Debug)]
struct st_t_instructionVar622 {
    off18: Tableoff18,
    const0810Z: Tableconst0810Z,
    const1111Z: Tableconst1111Z,
}
impl st_t_instructionVar622 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.t"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.const0810Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1111Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 213 {
                return None;
            }
            let const0810Z = if let Some((len, table)) =
                Tableconst0810Z::parse(tokens, &mut context_instance, inst_start)
            {
                block_0_len = block_0_len.max(len as AddrType);
                table
            } else {
                return None;
            };
            let const1111Z = if let Some((len, table)) =
                Tableconst1111Z::parse(tokens, &mut context_instance, inst_start)
            {
                block_0_len = block_0_len.max(len as AddrType);
                table
            } else {
                return None;
            };
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((const0810Z, const1111Z), (), pattern_len))
        };
        let ((mut const0810Z, mut const1111Z), (), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off18,
                const0810Z,
                const1111Z,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8034:1, end:8034:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar623 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl st_w_instructionVar623 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 165 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8258:1, end:8258:2))"]
#[derive(Clone, Debug)]
struct swap_w_instructionVar624 {
    Rd0811: u8,
    off18: Tableoff18,
}
impl swap_w_instructionVar624 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("swap.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off18
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c38 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 229 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_33(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c38(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8420:1, end:8420:2))"]
#[derive(Clone, Debug)]
struct xnor_t_instructionVar625 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl xnor_t_instructionVar625 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xnor.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8520:1, end:8520:2))"]
#[derive(Clone, Debug)]
struct xor_t_instructionVar626 {
    Rd2831: u8,
    Rd0811: u8,
    Rd1215: u8,
    const2327Z: Tableconst2327Z,
    const1620Z: Tableconst1620Z,
}
impl xor_t_instructionVar626 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.t"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let const1620Z = if let Some((len, table)) =
            Tableconst1620Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) =
            Tableconst2327Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd2831 = token_15(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                const1620Z,
                Rd2831,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1032:1, end:1032:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar627 {
    Rd0811: u8,
    Rd1215: u8,
}
impl add_instructionVar627 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1041:1, end:1041:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar628 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl add_instructionVar628 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1049:1, end:1049:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar629 {
    Rd0811: u8,
    Rd1215: u8,
}
impl add_instructionVar629 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1056:1, end:1056:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar630 {
    Rd0811: u8,
    Rd1215: u8,
}
impl add_instructionVar630 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1063:1, end:1063:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar631 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl add_instructionVar631 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1070:1, end:1070:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar632 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl add_instructionVar632 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1092:1, end:1092:2))"]
#[derive(Clone, Debug)]
struct add_a_instructionVar633 {
    Ra0811: u8,
    Ra1215: u8,
}
impl add_a_instructionVar633 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add.a"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1100:1, end:1100:2))"]
#[derive(Clone, Debug)]
struct add_a_instructionVar634 {
    Ra0811: u8,
    const1215S: Tableconst1215S,
}
impl add_a_instructionVar634 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1165:1, end:1165:2))"]
#[derive(Clone, Debug)]
struct addi_instructionVar635 {
    Rd2831: u8,
    Rd0811: u8,
    const1227S: Tableconst1227S,
}
impl addi_instructionVar635 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("addi"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 27 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227S = if let Some((len, table)) =
            Tableconst1227S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1227S,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1172:1, end:1172:2))"]
#[derive(Clone, Debug)]
struct addih_instructionVar636 {
    Rd2831: u8,
    Rd0811: u8,
    const1227Z: Tableconst1227Z,
}
impl addih_instructionVar636 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("addih"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd2831),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 155 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            let Rd2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) =
            Tableconst1227Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1227Z,
                Rd2831,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1179:1, end:1179:2))"]
#[derive(Clone, Debug)]
struct addih_a_instructionVar637 {
    Ra2831: u8,
    Ra0811: u8,
    const1227Z: Tableconst1227Z,
}
impl addih_a_instructionVar637 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("addih.a"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra2831),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 17 {
                return None;
            }
            let Ra0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            let Ra2831 = token_15(tokens);
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811, Ra2831), pattern_len))
        };
        let ((), (Ra0811, Ra2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) =
            Tableconst1227Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1227Z,
                Ra2831,
                Ra0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1185:1, end:1185:2))"]
#[derive(Clone, Debug)]
struct adds_instructionVar638 {
    Rd0811: u8,
    Rd1215: u8,
}
impl adds_instructionVar638 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("adds"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1288:1, end:1288:2))"]
#[derive(Clone, Debug)]
struct and_instructionVar639 {
    Rd0811: u8,
    Rd1215: u8,
}
impl and_instructionVar639 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1296:1, end:1296:2))"]
#[derive(Clone, Debug)]
struct and_instructionVar640 {
    const0815Z: Tableconst0815Z,
}
impl and_instructionVar640 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const0815Z = if let Some((len, table)) =
            Tableconst0815Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1448:1, end:1448:2))"]
#[derive(Clone, Debug)]
struct bisr_instructionVar641 {
    const0815Z: Tableconst0815Z,
}
impl bisr_instructionVar641 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("bisr"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.const0815Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const0815Z = if let Some((len, table)) =
            Tableconst0815Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1676:1, end:1676:2))"]
#[derive(Clone, Debug)]
struct cadd_instructionVar642 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl cadd_instructionVar642 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cadd"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1703:1, end:1703:2))"]
#[derive(Clone, Debug)]
struct caddn_instructionVar643 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl caddn_instructionVar643 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("caddn"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1731:1, end:1731:2))"]
#[derive(Clone, Debug)]
struct call_instructionVar644 {
    off0815pc8s: Tableoff0815pc8s,
}
impl call_instructionVar644 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("call"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off0815pc8s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0815pc8s = if let Some((len, table)) =
            Tableoff0815pc8s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1758:1, end:1758:2))"]
#[derive(Clone, Debug)]
struct call_instructionVar645 {
    off24pc: Tableoff24pc,
}
impl call_instructionVar645 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("call"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24pc
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 109 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) =
            Tableoff24pc::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1784:1, end:1784:2))"]
#[derive(Clone, Debug)]
struct calla_instructionVar646 {
    off24abs: Tableoff24abs,
}
impl calla_instructionVar646 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("calla"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24abs
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 237 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) =
            Tableoff24abs::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1882:1, end:1882:2))"]
#[derive(Clone, Debug)]
struct cmov_instructionVar647 {
    Rd0811: u8,
    Rd1215: u8,
}
impl cmov_instructionVar647 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cmov"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1888:1, end:1888:2))"]
#[derive(Clone, Debug)]
struct cmov_instructionVar648 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl cmov_instructionVar648 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cmov"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1894:1, end:1894:2))"]
#[derive(Clone, Debug)]
struct cmovn_instructionVar649 {
    Rd0811: u8,
    Rd1215: u8,
}
impl cmovn_instructionVar649 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cmovn"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1900:1, end:1900:2))"]
#[derive(Clone, Debug)]
struct cmovn_instructionVar650 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl cmovn_instructionVar650 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cmovn"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2258:1, end:2258:2))"]
#[derive(Clone, Debug)]
struct eq_instructionVar651 {
    Rd0811: u8,
    Rd1215: u8,
}
impl eq_instructionVar651 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eq"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2264:1, end:2264:2))"]
#[derive(Clone, Debug)]
struct eq_instructionVar652 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl eq_instructionVar652 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("eq"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2403:1, end:2403:2))"]
#[derive(Clone, Debug)]
struct fcall_instructionVar653 {
    off24pc: Tableoff24pc,
}
impl fcall_instructionVar653 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("fcall"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24pc
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c32 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 97 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c32(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) =
            Tableoff24pc::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2415:1, end:2415:2))"]
#[derive(Clone, Debug)]
struct fcalla_instructionVar654 {
    off24abs: Tableoff24abs,
}
impl fcalla_instructionVar654 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("fcalla"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24abs
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 225 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) =
            Tableoff24abs::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2778:1, end:2778:2))"]
#[derive(Clone, Debug)]
struct j_instructionVar655 {
    off0815pc8s: Tableoff0815pc8s,
}
impl j_instructionVar655 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("j"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off0815pc8s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0815pc8s = if let Some((len, table)) =
            Tableoff0815pc8s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2785:1, end:2785:2))"]
#[derive(Clone, Debug)]
struct j_instructionVar656 {
    off24pc: Tableoff24pc,
}
impl j_instructionVar656 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("j"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24pc
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c28 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 29 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c28(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) =
            Tableoff24pc::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2791:1, end:2791:2))"]
#[derive(Clone, Debug)]
struct ja_instructionVar657 {
    off24abs: Tableoff24abs,
}
impl ja_instructionVar657 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ja"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24abs
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 157 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) =
            Tableoff24abs::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2798:1, end:2798:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar658 {
    Rd1215: u8,
    off0811pc4z16: Tableoff0811pc4z16,
}
impl jeq_instructionVar658 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jeq"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z16
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z16,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2806:1, end:2806:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar659 {
    off0811pc4z16: Tableoff0811pc4z16,
    const1215S: Tableconst1215S,
}
impl jeq_instructionVar659 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jeq"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z16
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z16,
                const1215S,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2814:1, end:2814:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar660 {
    Rd1215: u8,
    off0811pc4z: Tableoff0811pc4z,
}
impl jeq_instructionVar660 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jeq"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2822:1, end:2822:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar661 {
    off0811pc4z: Tableoff0811pc4z,
    const1215S: Tableconst1215S,
}
impl jeq_instructionVar661 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jeq"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                const1215S,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2872:1, end:2872:2))"]
#[derive(Clone, Debug)]
struct jgez_instructionVar662 {
    Rd1215: u8,
    off0811pc4z: Tableoff0811pc4z,
}
impl jgez_instructionVar662 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jgez"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2880:1, end:2880:2))"]
#[derive(Clone, Debug)]
struct jgtz_instructionVar663 {
    Rd1215: u8,
    off0811pc4z: Tableoff0811pc4z,
}
impl jgtz_instructionVar663 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jgtz"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2915:1, end:2915:2))"]
#[derive(Clone, Debug)]
struct jl_instructionVar664 {
    off24pc: Tableoff24pc,
}
impl jl_instructionVar664 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jl"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24pc
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c29 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 93 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c29(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) =
            Tableoff24pc::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2923:1, end:2923:2))"]
#[derive(Clone, Debug)]
struct jla_instructionVar665 {
    off24abs: Tableoff24abs,
}
impl jla_instructionVar665 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jla"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24abs
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 221 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) =
            Tableoff24abs::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2932:1, end:2932:2))"]
#[derive(Clone, Debug)]
struct jlez_instructionVar666 {
    Rd1215: u8,
    off0811pc4z: Tableoff0811pc4z,
}
impl jlez_instructionVar666 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jlez"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2974:1, end:2974:2))"]
#[derive(Clone, Debug)]
struct jltz_instructionVar667 {
    Rd1215: u8,
    off0811pc4z: Tableoff0811pc4z,
}
impl jltz_instructionVar667 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jltz"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2982:1, end:2982:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar668 {
    Rd1215: u8,
    off0811pc4z16: Tableoff0811pc4z16,
}
impl jne_instructionVar668 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jne"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z16
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z16,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2990:1, end:2990:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar669 {
    off0811pc4z16: Tableoff0811pc4z16,
    const1215S: Tableconst1215S,
}
impl jne_instructionVar669 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jne"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z16
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z16,
                const1215S,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2998:1, end:2998:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar670 {
    Rd1215: u8,
    off0811pc4z: Tableoff0811pc4z,
}
impl jne_instructionVar670 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jne"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3006:1, end:3006:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar671 {
    off0811pc4z: Tableoff0811pc4z,
    const1215S: Tableconst1215S,
}
impl jne_instructionVar671 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jne"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                const1215S,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3064:1, end:3064:2))"]
#[derive(Clone, Debug)]
struct jnz_instructionVar672 {
    off0815pc8s: Tableoff0815pc8s,
}
impl jnz_instructionVar672 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jnz"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0815pc8s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0815pc8s = if let Some((len, table)) =
            Tableoff0815pc8s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3072:1, end:3072:2))"]
#[derive(Clone, Debug)]
struct jnz_instructionVar673 {
    Rd1215: u8,
    off0811pc4z: Tableoff0811pc4z,
}
impl jnz_instructionVar673 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jnz"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3080:1, end:3080:2))"]
#[derive(Clone, Debug)]
struct jnz_a_instructionVar674 {
    Ra1215: u8,
    off0811pc4z: Tableoff0811pc4z,
}
impl jnz_a_instructionVar674 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jnz.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3094:1, end:3094:2))"]
#[derive(Clone, Debug)]
struct jnz_t_instructionVar675 {
    off0811pc4z: Tableoff0811pc4z,
    const1215Z: Tableconst1215Z,
}
impl jnz_t_instructionVar675 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jnz.t"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                const1215Z,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3102:1, end:3102:2))"]
#[derive(Clone, Debug)]
struct jnz_t_instructionVar676 {
    Rd0811: u8,
    Nbit: TableNbit,
    off1630pc15s: Tableoff1630pc15s,
}
impl jnz_t_instructionVar676 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jnz.t"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.Nbit
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Nbit = if let Some((len, table)) =
            TableNbit::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Nbit,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3110:1, end:3110:2))"]
#[derive(Clone, Debug)]
struct jz_instructionVar677 {
    off0815pc8s: Tableoff0815pc8s,
}
impl jz_instructionVar677 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jz"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0815pc8s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0815pc8s = if let Some((len, table)) =
            Tableoff0815pc8s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3118:1, end:3118:2))"]
#[derive(Clone, Debug)]
struct jz_instructionVar678 {
    Rd1215: u8,
    off0811pc4z: Tableoff0811pc4z,
}
impl jz_instructionVar678 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jz"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3125:1, end:3125:2))"]
#[derive(Clone, Debug)]
struct jz_a_instructionVar679 {
    Ra1215: u8,
    off0811pc4z: Tableoff0811pc4z,
}
impl jz_a_instructionVar679 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jz.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3138:1, end:3138:2))"]
#[derive(Clone, Debug)]
struct jz_t_instructionVar680 {
    const1215Z: Tableconst1215Z,
    off0811pc4z: Tableoff0811pc4z,
}
impl jz_t_instructionVar680 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jz.t"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) =
            Tableoff0811pc4z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off0811pc4z,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3146:1, end:3146:2))"]
#[derive(Clone, Debug)]
struct jz_t_instructionVar681 {
    Rd0811: u8,
    Nbit: TableNbit,
    off1630pc15s: Tableoff1630pc15s,
}
impl jz_t_instructionVar681 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jz.t"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.Nbit
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Nbit = if let Some((len, table)) =
            TableNbit::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off1630pc15s = if let Some((len, table)) =
            Tableoff1630pc15s::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Nbit,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3154:1, end:3154:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar682 {
    SC: TableSC,
}
impl ld_a_instructionVar682 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::a15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SC
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3163:1, end:3163:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar683 {
    Ra0811: u8,
    SLRO: TableSLRO,
}
impl ld_a_instructionVar683 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3172:1, end:3172:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar684 {
    SRO: TableSRO,
}
impl ld_a_instructionVar684 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::a15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3190:1, end:3190:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar685 {
    Ra0811: u8,
    BOL: TableBOL,
}
impl ld_a_instructionVar685 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 153 {
                return None;
            }
            let Ra0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3249:1, end:3249:2))"]
#[derive(Clone, Debug)]
struct ld_b_instructionVar686 {
    Rd0811: u8,
    BOL: TableBOL,
}
impl ld_b_instructionVar686 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.b"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 121 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3256:1, end:3256:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar687 {
    Rd0811: u8,
    BOL: TableBOL,
}
impl ld_bu_instructionVar687 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.bu"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 57 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3274:1, end:3274:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar688 {
    SRO: TableSRO,
}
impl ld_bu_instructionVar688 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.bu"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3283:1, end:3283:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar689 {
    Rd0811: u8,
    SLRO: TableSLRO,
}
impl ld_bu_instructionVar689 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.bu"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3445:1, end:3445:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar690 {
    SRO: TableSRO,
}
impl ld_h_instructionVar690 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.h"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3454:1, end:3454:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar691 {
    Rd0811: u8,
    SLRO: TableSLRO,
}
impl ld_h_instructionVar691 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.h"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3473:1, end:3473:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar692 {
    Rd0811: u8,
    BOL: TableBOL,
}
impl ld_h_instructionVar692 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.h"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 201 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3519:1, end:3519:2))"]
#[derive(Clone, Debug)]
struct ld_hu_instructionVar693 {
    Rd0811: u8,
    BOL: TableBOL,
}
impl ld_hu_instructionVar693 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.hu"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 185 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3553:1, end:3553:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar694 {
    SC: TableSC,
}
impl ld_w_instructionVar694 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.w"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SC
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3572:1, end:3572:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar695 {
    SRO: TableSRO,
}
impl ld_w_instructionVar695 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.w"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3581:1, end:3581:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar696 {
    Rd0811: u8,
    SLRO: TableSLRO,
}
impl ld_w_instructionVar696 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.w"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3589:1, end:3589:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar697 {
    Rd0811: u8,
    BOL: TableBOL,
}
impl ld_w_instructionVar697 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.w"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 25 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3687:1, end:3687:2))"]
#[derive(Clone, Debug)]
struct lea_instructionVar698 {
    Ra0811: u8,
    BOL: TableBOL,
}
impl lea_instructionVar698 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lea"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 217 {
                return None;
            }
            let Ra0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3701:1, end:3701:2))"]
#[derive(Clone, Debug)]
struct loop_instructionVar699 {
    Ra1215: u8,
    off0811pc4o: Tableoff0811pc4o,
}
impl loop_instructionVar699 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("loop"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4o
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let off0811pc4o = if let Some((len, table)) =
            Tableoff0811pc4o::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4o,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3725:1, end:3725:2))"]
#[derive(Clone, Debug)]
struct lt_instructionVar700 {
    Rd0811: u8,
    Rd1215: u8,
}
impl lt_instructionVar700 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3731:1, end:3731:2))"]
#[derive(Clone, Debug)]
struct lt_instructionVar701 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl lt_instructionVar701 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("lt"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5134:1, end:5134:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar702 {
    Rd0811: u8,
    Rd1215: u8,
}
impl mov_instructionVar702 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5140:1, end:5140:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar703 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl mov_instructionVar703 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5147:1, end:5147:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar704 {
    Re0811: u8,
    const1215S: Tableconst1215S,
}
impl mov_instructionVar704 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Re0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5155:1, end:5155:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar705 {
    const0815Z: Tableconst0815Z,
}
impl mov_instructionVar705 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const0815Z = if let Some((len, table)) =
            Tableconst0815Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5203:1, end:5203:2))"]
#[derive(Clone, Debug)]
struct mov_a_instructionVar706 {
    Ra0811: u8,
    const1215Z: Tableconst1215Z,
}
impl mov_a_instructionVar706 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5211:1, end:5211:2))"]
#[derive(Clone, Debug)]
struct mov_a_instructionVar707 {
    Ra0811: u8,
    Rd1215: u8,
}
impl mov_a_instructionVar707 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov.a"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5225:1, end:5225:2))"]
#[derive(Clone, Debug)]
struct mov_aa_instructionVar708 {
    Ra0811: u8,
    Ra1215: u8,
}
impl mov_aa_instructionVar708 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov.aa"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra0811 = token_12(tokens_current);
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5239:1, end:5239:2))"]
#[derive(Clone, Debug)]
struct mov_d_instructionVar709 {
    Rd0811: u8,
    Ra1215: u8,
}
impl mov_d_instructionVar709 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov.d"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6384:1, end:6384:2))"]
#[derive(Clone, Debug)]
struct mul_instructionVar710 {
    Rd0811: u8,
    Rd1215: u8,
}
impl mul_instructionVar710 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mul"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6840:1, end:6840:2))"]
#[derive(Clone, Debug)]
struct or_instructionVar711 {
    Rd0811: u8,
    Rd1215: u8,
}
impl or_instructionVar711 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6848:1, end:6848:2))"]
#[derive(Clone, Debug)]
struct or_instructionVar712 {
    const0815Z: Tableconst0815Z,
}
impl or_instructionVar712 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const0815Z = if let Some((len, table)) =
            Tableconst0815Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7543:1, end:7543:2))"]
#[derive(Clone, Debug)]
struct sha_instructionVar713 {
    Rd0811: u8,
    const1215S: Tableconst1215S,
}
impl sha_instructionVar713 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sha"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215S = if let Some((len, table)) =
            Tableconst1215S::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7647:1, end:7647:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar714 {
    SC: TableSC,
}
impl st_a_instructionVar714 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.a"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SC
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::a15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7656:1, end:7656:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar715 {
    SRO: TableSRO,
}
impl st_a_instructionVar715 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.a"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SRO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::a15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7665:1, end:7665:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar716 {
    Ra0811: u8,
    SSRO: TableSSRO,
}
impl st_a_instructionVar716 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.a"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SSRO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7709:1, end:7709:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar717 {
    Ra0811: u8,
    BOL: TableBOL,
}
impl st_a_instructionVar717 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.a"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 181 {
                return None;
            }
            let Ra0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7727:1, end:7727:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar718 {
    Rd0811: u8,
    SSRO: TableSSRO,
}
impl st_b_instructionVar718 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.b"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SSRO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7736:1, end:7736:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar719 {
    SRO: TableSRO,
}
impl st_b_instructionVar719 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.b"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SRO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7750:1, end:7750:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar720 {
    Rd0811: u8,
    BOL: TableBOL,
}
impl st_b_instructionVar720 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.b"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 233 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7905:1, end:7905:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar721 {
    Rd0811: u8,
    SSRO: TableSSRO,
}
impl st_h_instructionVar721 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.h"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SSRO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7914:1, end:7914:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar722 {
    SRO: TableSRO,
}
impl st_h_instructionVar722 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.h"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SRO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7933:1, end:7933:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar723 {
    Rd0811: u8,
    BOL: TableBOL,
}
impl st_h_instructionVar723 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.h"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 249 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7991:1, end:7991:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar724 {
    SC: TableSC,
}
impl st_w_instructionVar724 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SC
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8010:1, end:8010:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar725 {
    Rd0811: u8,
    SSRO: TableSSRO,
}
impl st_w_instructionVar725 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SSRO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8019:1, end:8019:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar726 {
    SRO: TableSRO,
}
impl st_w_instructionVar726 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SRO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8027:1, end:8027:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar727 {
    Rd0811: u8,
    BOL: TableBOL,
}
impl st_w_instructionVar727 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BOL
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_4(tokens) != 89 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8093:1, end:8093:2))"]
#[derive(Clone, Debug)]
struct sub_instructionVar728 {
    Rd0811: u8,
    Rd1215: u8,
}
impl sub_instructionVar728 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8101:1, end:8101:2))"]
#[derive(Clone, Debug)]
struct sub_instructionVar729 {
    Rd0811: u8,
    Rd1215: u8,
}
impl sub_instructionVar729 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub"));
        let extend: [DisplayElement; 6usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8108:1, end:8108:2))"]
#[derive(Clone, Debug)]
struct sub_instructionVar730 {
    Rd0811: u8,
    Rd1215: u8,
}
impl sub_instructionVar730 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8123:1, end:8123:2))"]
#[derive(Clone, Debug)]
struct sub_a_instructionVar731 {
    const0815Z: Tableconst0815Z,
}
impl sub_a_instructionVar731 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Register(Register::a10),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const0815Z = if let Some((len, table)) =
            Tableconst0815Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8175:1, end:8175:2))"]
#[derive(Clone, Debug)]
struct subs_instructionVar732 {
    Rd0811: u8,
    Rd1215: u8,
}
impl subs_instructionVar732 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("subs"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd0811 = token_12(tokens_current);
        let Rd1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8429:1, end:8429:2))"]
#[derive(Clone, Debug)]
struct xor_instructionVar733 {
    Rd0811: u8,
    Rd1215: u8,
}
impl xor_instructionVar733 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd1215),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rd1215 = token_15(tokens_current);
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:510:1, end:510:2))"]
#[derive(Clone, Debug)]
struct ldl_il_instructionVar734 {
    R0608: u8,
    imm16: Tableimm16,
}
impl ldl_il_instructionVar734 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ldl.il"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm16
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let imm16 = if let Some((len, table)) =
            Tableimm16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm16, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:521:1, end:521:2))"]
#[derive(Clone, Debug)]
struct ldl_iu_instructionVar735 {
    R0608: u8,
    imm16: Tableimm16,
}
impl ldl_iu_instructionVar735 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ldl.iu"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm16
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let imm16 = if let Some((len, table)) =
            Tableimm16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm16, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:421:1, end:421:2))"]
#[derive(Clone, Debug)]
struct jc_a_instructionVar736 {
    CONDCB: TableCONDCB,
    imm16abs: Tableimm16abs,
}
impl jc_a_instructionVar736 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jc.a"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.imm16abs
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCB
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCB = if let Some((len, table)) =
            TableCONDCB::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let imm16abs = if let Some((len, table)) =
            Tableimm16abs::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { CONDCB, imm16abs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1246:1, end:1246:2))"]
#[derive(Clone, Debug)]
struct addsc_a_instructionVar737 {
    Ra0811: u8,
    Ra1215: u8,
    const0607Z: Tableconst0607Z,
}
impl addsc_a_instructionVar737 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("addsc.a"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Register(Register::d15),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0607Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const0607Z = if let Some((len, table)) =
            Tableconst0607Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra1215 = token_15(tokens_current);
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0607Z,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1646:1, end:1646:2))"]
#[derive(Clone, Debug)]
struct cachei_i_instructionVar738 {
    BO: TableBO,
}
impl cachei_i_instructionVar738 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cachei.i"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_7(tokens) != 8 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 10 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1657:1, end:1657:2))"]
#[derive(Clone, Debug)]
struct cachei_w_instructionVar739 {
    BO: TableBO,
}
impl cachei_w_instructionVar739 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cachei.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_7(tokens) != 8 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 11 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1668:1, end:1668:2))"]
#[derive(Clone, Debug)]
struct cachei_wi_instructionVar740 {
    BO: TableBO,
}
impl cachei_wi_instructionVar740 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cachei.wi"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_7(tokens) != 8 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 15 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1582:1, end:1582:2))"]
#[derive(Clone, Debug)]
struct cachea_i_instructionVar741 {
    BO: TableBO,
}
impl cachea_i_instructionVar741 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cachea.i"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 2 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 14 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1604:1, end:1604:2))"]
#[derive(Clone, Debug)]
struct cachea_w_instructionVar742 {
    BO: TableBO,
}
impl cachea_w_instructionVar742 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cachea.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 2 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 12 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1626:1, end:1626:2))"]
#[derive(Clone, Debug)]
struct cachea_wi_instructionVar743 {
    BO: TableBO,
}
impl cachea_wi_instructionVar743 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cachea.wi"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 2 {
                return None;
            }
            if token_12(tokens) != 0 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 13 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) = sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1911:1, end:1911:2))"]
#[derive(Clone, Debug)]
struct cmpswap_w_instructionVar744 {
    Ree0811: u8,
    Reo0811: u8,
    BO: TableBO,
}
impl cmpswap_w_instructionVar744 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("cmpswap.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree0811),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 1 {
                return None;
            }
            let Reo0811 = token_12(tokens);
            let Ree0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 3 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Reo0811, Ree0811), pattern_len))
        };
        let ((), (Reo0811, Ree0811), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3201:1, end:3201:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar745 {
    Ra0811: u8,
    BO: TableBO,
}
impl ld_a_instructionVar745 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 0 {
                return None;
            }
            let Ra0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 6 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3233:1, end:3233:2))"]
#[derive(Clone, Debug)]
struct ld_b_instructionVar746 {
    Rd0811: u8,
    BO: TableBO,
}
impl ld_b_instructionVar746 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.b"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 0 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3295:1, end:3295:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar747 {
    Rd0811: u8,
    BO: TableBO,
}
impl ld_bu_instructionVar747 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.bu"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 0 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 1 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3321:1, end:3321:2))"]
#[derive(Clone, Debug)]
struct ld_d_instructionVar748 {
    Re0811: u8,
    BO: TableBO,
}
impl ld_d_instructionVar748 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.d"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_1_display(self.Re0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 0 {
                return None;
            }
            let Re0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 5 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3353:1, end:3353:2))"]
#[derive(Clone, Debug)]
struct ld_da_instructionVar749 {
    Rp0811: u8,
    BO: TableBO,
}
impl ld_da_instructionVar749 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.da"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_6_display(self.Rp0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 0 {
                return None;
            }
            let Rp0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 7 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rp0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3466:1, end:3466:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar750 {
    Rd0811: u8,
    BO: TableBO,
}
impl ld_h_instructionVar750 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.h"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 0 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 2 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3498:1, end:3498:2))"]
#[derive(Clone, Debug)]
struct ld_hu_instructionVar751 {
    Rd0811: u8,
    BO: TableBO,
}
impl ld_hu_instructionVar751 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.hu"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 0 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 3 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3536:1, end:3536:2))"]
#[derive(Clone, Debug)]
struct ld_q_instructionVar752 {
    Rd0811: u8,
    BO: TableBO,
}
impl ld_q_instructionVar752 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.q"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 0 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 8 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3606:1, end:3606:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar753 {
    Rd0811: u8,
    BO: TableBO,
}
impl ld_w_instructionVar753 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.w"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 0 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 4 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3642:1, end:3642:2))"]
#[derive(Clone, Debug)]
struct ldmst_instructionVar754 {
    Ree0811: u8,
    Reo0811: u8,
    BO: TableBO,
}
impl ldmst_instructionVar754 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ldmst"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree0811),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 1 {
                return None;
            }
            let Reo0811 = token_12(tokens);
            let Ree0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 1 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Reo0811, Ree0811), pattern_len))
        };
        let ((), (Reo0811, Ree0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7687:1, end:7687:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar755 {
    Ra0811: u8,
    BO: TableBO,
}
impl st_a_instructionVar755 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.a"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 2 {
                return None;
            }
            let Ra0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 6 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7761:1, end:7761:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar756 {
    Rd0811: u8,
    BO: TableBO,
}
impl st_b_instructionVar756 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.b"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 2 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7781:1, end:7781:2))"]
#[derive(Clone, Debug)]
struct st_d_instructionVar757 {
    Re0811: u8,
    BO: TableBO,
}
impl st_d_instructionVar757 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.d"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_1_display(self.Re0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 2 {
                return None;
            }
            let Re0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 5 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7813:1, end:7813:2))"]
#[derive(Clone, Debug)]
struct st_da_instructionVar758 {
    Rp0811: u8,
    BO: TableBO,
}
impl st_da_instructionVar758 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.da"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_6_display(self.Rp0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 2 {
                return None;
            }
            let Rp0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 7 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) = sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rp0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7926:1, end:7926:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar759 {
    Rd0811: u8,
    BO: TableBO,
}
impl st_h_instructionVar759 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.h"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 2 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 2 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7965:1, end:7965:2))"]
#[derive(Clone, Debug)]
struct st_q_instructionVar760 {
    Rd0811: u8,
    BO: TableBO,
}
impl st_q_instructionVar760 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.q"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 2 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 8 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8044:1, end:8044:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar761 {
    Rd0811: u8,
    BO: TableBO,
}
impl st_w_instructionVar761 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 2 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 4 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8249:1, end:8249:2))"]
#[derive(Clone, Debug)]
struct swap_w_instructionVar762 {
    Rd0811: u8,
    BO: TableBO,
}
impl swap_w_instructionVar762 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("swap.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 1 {
                return None;
            }
            let Rd0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 0 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) = sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8282:1, end:8282:2))"]
#[derive(Clone, Debug)]
struct swapmsk_w_instructionVar763 {
    Ree0811: u8,
    Reo0811: u8,
    BO: TableBO,
}
impl swapmsk_w_instructionVar763 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("swapmsk.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.BO
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(","),
            meaning_3_display(self.Ree0811),
            <DisplayElement>::Literal("/"),
            meaning_4_display(self.Reo0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 4;
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut ContextMemory| {
            let mut pattern_len = 0;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2;
            if token_9(tokens) != 1 {
                return None;
            }
            let Ree0811 = token_12(tokens);
            let Reo0811 = token_12(tokens);
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2;
            if token_30(tokens) != 2 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ree0811, Reo0811), pattern_len))
        };
        let ((), (Ree0811, Reo0811), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3182:1, end:3182:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar764 {
    Ra0811: u8,
    SLR: TableSLR,
}
impl ld_a_instructionVar764 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.a"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_5_display(self.Ra0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3265:1, end:3265:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar765 {
    Rd0811: u8,
    SLR: TableSLR,
}
impl ld_bu_instructionVar765 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.bu"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3436:1, end:3436:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar766 {
    Rd0811: u8,
    SLR: TableSLR,
}
impl ld_h_instructionVar766 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.h"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3563:1, end:3563:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar767 {
    Rd0811: u8,
    SLR: TableSLR,
}
impl ld_w_instructionVar767 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.w"));
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(" "),
            meaning_0_display(self.Rd0811),
            <DisplayElement>::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7675:1, end:7675:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar768 {
    Ra0811: u8,
    SSR: TableSSR,
}
impl st_a_instructionVar768 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.a"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SSR
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_5_display(self.Ra0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7718:1, end:7718:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar769 {
    Rd0811: u8,
    SSR: TableSSR,
}
impl st_b_instructionVar769 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.b"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SSR
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7896:1, end:7896:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar770 {
    Rd0811: u8,
    SSR: TableSSR,
}
impl st_h_instructionVar770 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.h"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SSR
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8001:1, end:8001:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar771 {
    Rd0811: u8,
    SSR: TableSSR,
}
impl st_w_instructionVar771 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.w"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SSR
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            meaning_0_display(self.Rd0811),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Rd0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:363:1, end:363:2))"]
#[derive(Clone, Debug)]
struct dinit_instructionVar772 {
    R0608: u8,
    R0305: u8,
}
impl dinit_instructionVar772 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dinit"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("<"),
            <DisplayElement>::Register(Register::R0),
            <DisplayElement>::Literal(">,"),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:373:1, end:373:2))"]
#[derive(Clone, Debug)]
struct dstep_instructionVar773 {
    R0608: u8,
    R0305: u8,
}
impl dstep_instructionVar773 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("dstep"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("<"),
            <DisplayElement>::Register(Register::R0),
            <DisplayElement>::Literal(">,"),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:544:1, end:544:2))"]
#[derive(Clone, Debug)]
struct minit_instructionVar774 {
    R0608: u8,
    R0305: u8,
}
impl minit_instructionVar774 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("minit"));
        let extend: [DisplayElement; 9usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("<"),
            <DisplayElement>::Register(Register::R0),
            <DisplayElement>::Literal(">,"),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:576:1, end:576:2))"]
#[derive(Clone, Debug)]
struct mstep_l_instructionVar775 {
    R0608: u8,
    R0305: u8,
}
impl mstep_l_instructionVar775 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mstep.l"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:583:1, end:583:2))"]
#[derive(Clone, Debug)]
struct mstep_u_instructionVar776 {
    R0608: u8,
    R0305: u8,
}
impl mstep_u_instructionVar776 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mstep.u"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:206:1, end:206:2))"]
#[derive(Clone, Debug)]
struct add_f_instructionVar777 {
    R0608: u8,
    SIZE1: TableSIZE1,
}
impl add_f_instructionVar777 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add.f"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:245:1, end:245:2))"]
#[derive(Clone, Debug)]
struct and_f_instructionVar778 {
    R0608: u8,
    SIZE1: TableSIZE1,
}
impl and_f_instructionVar778 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.f"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:280:1, end:280:2))"]
#[derive(Clone, Debug)]
struct clr_instructionVar779 {
    R0608: u8,
    imm5: Tableimm5,
}
impl clr_instructionVar779 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("clr"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:319:1, end:319:2))"]
#[derive(Clone, Debug)]
struct comp_f_instructionVar780 {
    R0608: u8,
    SIZE1: TableSIZE1,
}
impl comp_f_instructionVar780 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("comp.f"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:401:1, end:401:2))"]
#[derive(Clone, Debug)]
struct inb_i_instructionVar781 {
    R0608: u8,
    imm5: Tableimm5,
}
impl inb_i_instructionVar781 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("inb.i"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:458:1, end:458:2))"]
#[derive(Clone, Debug)]
struct ld_f_instructionVar782 {
    R0608: u8,
    SIZE1: TableSIZE1,
}
impl ld_f_instructionVar782 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.f"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:635:1, end:635:2))"]
#[derive(Clone, Debug)]
struct or_f_instructionVar783 {
    R0608: u8,
    SIZE1: TableSIZE1,
}
impl or_f_instructionVar783 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.f"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:675:1, end:675:2))"]
#[derive(Clone, Debug)]
struct rl_instructionVar784 {
    R0608: u8,
    imm5: Tableimm5,
}
impl rl_instructionVar784 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rl"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:690:1, end:690:2))"]
#[derive(Clone, Debug)]
struct rr_instructionVar785 {
    R0608: u8,
    imm5: Tableimm5,
}
impl rr_instructionVar785 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("rr"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:704:1, end:704:2))"]
#[derive(Clone, Debug)]
struct set_instructionVar786 {
    R0608: u8,
    imm5: Tableimm5,
}
impl set_instructionVar786 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("set"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:721:1, end:721:2))"]
#[derive(Clone, Debug)]
struct shl_instructionVar787 {
    R0608: u8,
    imm5: Tableimm5,
}
impl shl_instructionVar787 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("shl"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:732:1, end:732:2))"]
#[derive(Clone, Debug)]
struct shr_instructionVar788 {
    R0608: u8,
    imm5: Tableimm5,
}
impl shr_instructionVar788 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("shr"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:742:1, end:742:2))"]
#[derive(Clone, Debug)]
struct st_f_instructionVar789 {
    SIZE1W: TableSIZE1W,
}
impl st_f_instructionVar789 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.f"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SIZE1W
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SIZE1W = if let Some((len, table)) =
            TableSIZE1W::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1W }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:786:1, end:786:2))"]
#[derive(Clone, Debug)]
struct sub_f_instructionVar790 {
    R0608: u8,
    SIZE1: TableSIZE1,
}
impl sub_f_instructionVar790 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub.f"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:815:1, end:815:2))"]
#[derive(Clone, Debug)]
struct xch_f_instructionVar791 {
    SIZE1RW: TableSIZE1RW,
}
impl xch_f_instructionVar791 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xch.f"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SIZE1RW
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SIZE1RW = if let Some((len, table)) =
            TableSIZE1RW::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1RW }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:846:1, end:846:2))"]
#[derive(Clone, Debug)]
struct xor_f_instructionVar792 {
    R0608: u8,
    SIZE1: TableSIZE1,
}
impl xor_f_instructionVar792 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.f"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:196:1, end:196:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar793 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl add_instructionVar793 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:216:1, end:216:2))"]
#[derive(Clone, Debug)]
struct add_i_instructionVar794 {
    R0608: u8,
    imm6: Tableimm6,
}
impl add_i_instructionVar794 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add.i"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:225:1, end:225:2))"]
#[derive(Clone, Debug)]
struct add_pi_instructionVar795 {
    R0608: u8,
    offset6: Tableoffset6,
}
impl add_pi_instructionVar795 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("add.pi"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6 = if let Some((len, table)) =
            Tableoffset6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:235:1, end:235:2))"]
#[derive(Clone, Debug)]
struct and_instructionVar796 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl and_instructionVar796 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:255:1, end:255:2))"]
#[derive(Clone, Debug)]
struct and_pi_instructionVar797 {
    R0608: u8,
    offset6: Tableoffset6,
}
impl and_pi_instructionVar797 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("and.pi"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6 = if let Some((len, table)) =
            Tableoffset6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:265:1, end:265:2))"]
#[derive(Clone, Debug)]
struct bcopy_instructionVar798 {
    CNT02: TableCNT02,
    DST: TableDST,
    SRC: TableSRC,
    CNC: TableCNC,
}
impl bcopy_instructionVar798 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("bcopy"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.DST
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SRC
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CNC
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CNT02
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let DST = if let Some((len, table)) =
            TableDST::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let SRC = if let Some((len, table)) =
            TableSRC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let CNC = if let Some((len, table)) =
            TableCNC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let CNT02 = if let Some((len, table)) =
            TableCNT02::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CNT02,
                DST,
                SRC,
                CNC,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:272:1, end:272:2))"]
#[derive(Clone, Debug)]
struct chkb_instructionVar799 {
    R0608: u8,
    SETCLR: TableSETCLR,
    imm5: Tableimm5,
}
impl chkb_instructionVar799 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("chkb"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SETCLR
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SETCLR = if let Some((len, table)) =
            TableSETCLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                SETCLR,
                imm5,
                R0608,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:310:1, end:310:2))"]
#[derive(Clone, Debug)]
struct comp_instructionVar800 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl comp_instructionVar800 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("comp"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:328:1, end:328:2))"]
#[derive(Clone, Debug)]
struct comp_i_instructionVar801 {
    R0608: u8,
    imm6: Tableimm6,
}
impl comp_i_instructionVar801 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("comp.i"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:336:1, end:336:2))"]
#[derive(Clone, Debug)]
struct comp_pi_instructionVar802 {
    R0608: u8,
    offset6: Tableoffset6,
}
impl comp_pi_instructionVar802 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("comp.pi"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6 = if let Some((len, table)) =
            Tableoffset6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:354:1, end:354:2))"]
#[derive(Clone, Debug)]
struct debug_instructionVar803 {
    CONDCB: TableCONDCB,
    EDA: TableEDA,
    DAC: TableDAC,
    SDB: TableSDB,
    RTA: TableRTA,
}
impl debug_instructionVar803 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("debug"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.DAC
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.RTA
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.EDA
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SDB
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCB
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let DAC = if let Some((len, table)) =
            TableDAC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let RTA = if let Some((len, table)) =
            TableRTA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let EDA = if let Some((len, table)) =
            TableEDA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let SDB = if let Some((len, table)) =
            TableSDB::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let CONDCB = if let Some((len, table)) =
            TableCONDCB::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCB,
                EDA,
                DAC,
                SDB,
                RTA,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:392:1, end:392:2))"]
#[derive(Clone, Debug)]
struct inb_instructionVar804 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl inb_instructionVar804 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("inb"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:430:1, end:430:2))"]
#[derive(Clone, Debug)]
struct jc_i_instructionVar805 {
    R0305: u8,
    CONDCB: TableCONDCB,
}
impl jc_i_instructionVar805 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jc.i"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCB
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCB = if let Some((len, table)) =
            TableCONDCB::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { CONDCB, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:440:1, end:440:2))"]
#[derive(Clone, Debug)]
struct jc_ia_instructionVar806 {
    R0305: u8,
    CONDCB: TableCONDCB,
}
impl jc_ia_instructionVar806 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jc.ia"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCB
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCB = if let Some((len, table)) =
            TableCONDCB::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { CONDCB, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:468:1, end:468:2))"]
#[derive(Clone, Debug)]
struct ld_i_instructionVar807 {
    R0608: u8,
    imm6: Tableimm6,
}
impl ld_i_instructionVar807 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.i"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:488:1, end:488:2))"]
#[derive(Clone, Debug)]
struct ld_p_instructionVar808 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl ld_p_instructionVar808 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.p"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:500:1, end:500:2))"]
#[derive(Clone, Debug)]
struct ld_pi_instructionVar809 {
    R0608: u8,
    offset6: Tableoffset6,
}
impl ld_pi_instructionVar809 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.pi"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6 = if let Some((len, table)) =
            Tableoffset6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:532:1, end:532:2))"]
#[derive(Clone, Debug)]
struct mclr_pi_instructionVar810 {
    R0608: u8,
    offset6: Tableoffset6,
}
impl mclr_pi_instructionVar810 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mclr.pi"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6 = if let Some((len, table)) =
            Tableoffset6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        let pcp_op0005 = token_2(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:553:1, end:553:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar811 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl mov_instructionVar811 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mov"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:564:1, end:564:2))"]
#[derive(Clone, Debug)]
struct mset_pi_instructionVar812 {
    R0608: u8,
    offset6: Tableoffset6,
}
impl mset_pi_instructionVar812 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("mset.pi"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6 = if let Some((len, table)) =
            Tableoffset6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        let pcp_op0005 = token_2(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:590:1, end:590:2))"]
#[derive(Clone, Debug)]
struct neg_instructionVar813 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl neg_instructionVar813 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("neg"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:613:1, end:613:2))"]
#[derive(Clone, Debug)]
struct not_instructionVar814 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl not_instructionVar814 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("not"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:624:1, end:624:2))"]
#[derive(Clone, Debug)]
struct or_instructionVar815 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl or_instructionVar815 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:645:1, end:645:2))"]
#[derive(Clone, Debug)]
struct or_pi_instructionVar816 {
    R0608: u8,
    offset6: Tableoffset6,
}
impl or_pi_instructionVar816 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("or.pi"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6 = if let Some((len, table)) =
            Tableoffset6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:655:1, end:655:2))"]
#[derive(Clone, Debug)]
struct pri_instructionVar817 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl pri_instructionVar817 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("pri"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:758:1, end:758:2))"]
#[derive(Clone, Debug)]
struct st_p_instructionVar818 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl st_p_instructionVar818 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.p"));
        let extend: [DisplayElement; 8usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:768:1, end:768:2))"]
#[derive(Clone, Debug)]
struct st_pi_instructionVar819 {
    offset6W: Tableoffset6W,
}
impl st_pi_instructionVar819 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.pi"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.offset6W
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6W = if let Some((len, table)) =
            Tableoffset6W::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6W }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:776:1, end:776:2))"]
#[derive(Clone, Debug)]
struct sub_instructionVar820 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl sub_instructionVar820 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:797:1, end:797:2))"]
#[derive(Clone, Debug)]
struct sub_i_instructionVar821 {
    R0608: u8,
    imm6: Tableimm6,
}
impl sub_i_instructionVar821 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub.i"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:806:1, end:806:2))"]
#[derive(Clone, Debug)]
struct sub_pi_instructionVar822 {
    R0608: u8,
    offset6: Tableoffset6,
}
impl sub_pi_instructionVar822 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("sub.pi"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6 = if let Some((len, table)) =
            Tableoffset6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:825:1, end:825:2))"]
#[derive(Clone, Debug)]
struct xch_pi_instructionVar823 {
    offset6RW: Tableoffset6RW,
}
impl xch_pi_instructionVar823 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xch.pi"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.offset6RW
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6RW = if let Some((len, table)) =
            Tableoffset6RW::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6RW }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:835:1, end:835:2))"]
#[derive(Clone, Debug)]
struct xor_instructionVar824 {
    R0608: u8,
    R0305: u8,
    CONDCA: TableCONDCA,
}
impl xor_instructionVar824 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor"));
        let extend: [DisplayElement; 7usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let CONDCA = if let Some((len, table)) =
            TableCONDCA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:856:1, end:856:2))"]
#[derive(Clone, Debug)]
struct xor_pi_instructionVar825 {
    R0608: u8,
    offset6: Tableoffset6,
}
impl xor_pi_instructionVar825 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("xor.pi"));
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal(" "),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let offset6 = if let Some((len, table)) =
            Tableoffset6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:288:1, end:288:2))"]
#[derive(Clone, Debug)]
struct clr_f_instructionVar826 {
    R0608: u8,
    SIZE5: TableSIZE5,
    imm5: Tableimm5,
}
impl clr_f_instructionVar826 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("clr.f"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE5
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let SIZE5 = if let Some((len, table)) =
            TableSIZE5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE5, imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:385:1, end:385:2))"]
#[derive(Clone, Debug)]
struct exit_instructionVar827 {
    EC: TableEC,
    ST: TableST,
    EP: TableEP,
    INT: TableINT,
    CONDCAB: TableCONDCAB,
}
impl exit_instructionVar827 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("exit"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.ST
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.EC
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.INT
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.EP
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCAB
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let ST = if let Some((len, table)) =
            TableST::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let EC = if let Some((len, table)) =
            TableEC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let INT = if let Some((len, table)) =
            TableINT::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let EP = if let Some((len, table)) =
            TableEP::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let CONDCAB = if let Some((len, table)) =
            TableCONDCAB::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                EC,
                ST,
                EP,
                INT,
                CONDCAB,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:412:1, end:412:2))"]
#[derive(Clone, Debug)]
struct jc_instructionVar828 {
    imm6pc: Tableimm6pc,
    CONDCB: TableCONDCB,
}
impl jc_instructionVar828 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jc"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.imm6pc
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCB
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm6pc = if let Some((len, table)) =
            Tableimm6pc::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let CONDCB = if let Some((len, table)) =
            TableCONDCB::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6pc, CONDCB }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:450:1, end:450:2))"]
#[derive(Clone, Debug)]
struct jl_instructionVar829 {
    imm10pc: Tableimm10pc,
}
impl jl_instructionVar829 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("jl"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.imm10pc
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm10pc = if let Some((len, table)) =
            Tableimm10pc::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm10pc }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:478:1, end:478:2))"]
#[derive(Clone, Debug)]
struct ld_if_instructionVar830 {
    R0608: u8,
    SIZE5: TableSIZE5,
    imm5: Tableimm5,
}
impl ld_if_instructionVar830 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("ld.if"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE5
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let SIZE5 = if let Some((len, table)) =
            TableSIZE5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE5, imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:712:1, end:712:2))"]
#[derive(Clone, Debug)]
struct set_f_instructionVar831 {
    R0608: u8,
    imm5: Tableimm5,
    SIZE5: TableSIZE5,
}
impl set_f_instructionVar831 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("set.f"));
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE5
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let SIZE5 = if let Some((len, table)) =
            TableSIZE5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, SIZE5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:750:1, end:750:2))"]
#[derive(Clone, Debug)]
struct st_if_instructionVar832 {
    SIZE5W: TableSIZE5W,
}
impl st_if_instructionVar832 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("st.if"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SIZE5W
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let SIZE5W = if let Some((len, table)) =
            TableSIZE5W::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE5W }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:345:1, end:345:2))"]
#[derive(Clone, Debug)]
struct copy_instructionVar833 {
    CNT03: TableCNT03,
    SRC: TableSRC,
    SIZE0: TableSIZE0,
    DST: TableDST,
    CNC: TableCNC,
}
impl copy_instructionVar833 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        display.push(DisplayElement::Literal("copy"));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal(" ")];
        display.extend_from_slice(&extend);
        self.DST
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SRC
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CNC
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CNT03
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE0
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let DST = if let Some((len, table)) =
            TableDST::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let SRC = if let Some((len, table)) =
            TableSRC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let CNC = if let Some((len, table)) =
            TableCNC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let CNT03 = if let Some((len, table)) =
            TableCNT03::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let SIZE0 = if let Some((len, table)) =
            TableSIZE0::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CNT03,
                SRC,
                SIZE0,
                DST,
                CNC,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableinstruction {
    Var0(debug_instructionVar0),
    Var1(disable_instructionVar1),
    Var2(dsync_instructionVar2),
    Var3(enable_instructionVar3),
    Var4(fret_instructionVar4),
    Var5(isync_instructionVar5),
    Var6(ji_instructionVar6),
    Var7(nop_instructionVar7),
    Var8(ret_instructionVar8),
    Var9(rfe_instructionVar9),
    Var10(rfm_instructionVar10),
    Var11(rslcx_instructionVar11),
    Var12(rstv_instructionVar12),
    Var13(svlcx_instructionVar13),
    Var14(tlbflush_a_instructionVar14),
    Var15(tlbflush_b_instructionVar15),
    Var16(trapsv_instructionVar16),
    Var17(trapv_instructionVar17),
    Var18(wait_instructionVar18),
    Var19(abs_instructionVar19),
    Var20(abs_b_instructionVar20),
    Var21(abs_h_instructionVar21),
    Var22(abss_instructionVar22),
    Var23(abss_h_instructionVar23),
    Var24(calli_instructionVar24),
    Var25(disable_instructionVar25),
    Var26(fcalli_instructionVar26),
    Var27(ji_instructionVar27),
    Var28(jli_instructionVar28),
    Var29(restore_instructionVar29),
    Var30(tlbdemap_instructionVar30),
    Var31(tlbmap_instructionVar31),
    Var32(tlbprobe_a_instructionVar32),
    Var33(tlbprobe_i_instructionVar33),
    Var34(updfl_instructionVar34),
    Var35(bsplit_instructionVar35),
    Var36(clo_instructionVar36),
    Var37(clo_h_instructionVar37),
    Var38(cls_instructionVar38),
    Var39(cls_h_instructionVar39),
    Var40(clz_instructionVar40),
    Var41(clz_h_instructionVar41),
    Var42(eqz_a_instructionVar42),
    Var43(ftoi_instructionVar43),
    Var44(ftoiz_instructionVar44),
    Var45(ftou_instructionVar45),
    Var46(ftouz_instructionVar46),
    Var47(itof_instructionVar47),
    Var48(ld_dd_instructionVar48),
    Var49(ld_dd_instructionVar49),
    Var50(mffr_instructionVar50),
    Var51(mov_instructionVar51),
    Var52(mov_instructionVar52),
    Var53(mov_a_instructionVar53),
    Var54(mov_aa_instructionVar54),
    Var55(mov_d_instructionVar55),
    Var56(mtfr_instructionVar56),
    Var57(nez_a_instructionVar57),
    Var58(parity_instructionVar58),
    Var59(qseed_f_instructionVar59),
    Var60(sat_b_instructionVar60),
    Var61(sat_bu_instructionVar61),
    Var62(sat_h_instructionVar62),
    Var63(sat_hu_instructionVar63),
    Var64(st_dd_instructionVar64),
    Var65(st_dd_instructionVar65),
    Var66(unpack_instructionVar66),
    Var67(utof_instructionVar67),
    Var68(absdif_instructionVar68),
    Var69(absdif_b_instructionVar69),
    Var70(absdif_h_instructionVar70),
    Var71(absdifs_instructionVar71),
    Var72(absdifs_h_instructionVar72),
    Var73(add_instructionVar73),
    Var74(add_a_instructionVar74),
    Var75(add_b_instructionVar75),
    Var76(add_h_instructionVar76),
    Var77(addc_instructionVar77),
    Var78(adds_instructionVar78),
    Var79(adds_h_instructionVar79),
    Var80(adds_hu_instructionVar80),
    Var81(adds_u_instructionVar81),
    Var82(addsc_at_instructionVar82),
    Var83(addx_instructionVar83),
    Var84(and_instructionVar84),
    Var85(and_eq_instructionVar85),
    Var86(and_ge_instructionVar86),
    Var87(and_ge_u_instructionVar87),
    Var88(and_lt_instructionVar88),
    Var89(and_lt_u_instructionVar89),
    Var90(and_ne_instructionVar90),
    Var91(andn_instructionVar91),
    Var92(bmerge_instructionVar92),
    Var93(cmp_f_instructionVar93),
    Var94(crc32_instructionVar94),
    Var95(div_instructionVar95),
    Var96(div_u_instructionVar96),
    Var97(div_f_instructionVar97),
    Var98(dvinit_instructionVar98),
    Var99(dvinit_b_instructionVar99),
    Var100(dvinit_bu_instructionVar100),
    Var101(dvinit_h_instructionVar101),
    Var102(dvinit_hu_instructionVar102),
    Var103(dvinit_u_instructionVar103),
    Var104(eq_instructionVar104),
    Var105(eq_a_instructionVar105),
    Var106(eq_b_instructionVar106),
    Var107(eq_h_instructionVar107),
    Var108(eq_w_instructionVar108),
    Var109(eqany_b_instructionVar109),
    Var110(eqany_h_instructionVar110),
    Var111(ftoq31_instructionVar111),
    Var112(ftoq31z_instructionVar112),
    Var113(ge_instructionVar113),
    Var114(ge_a_instructionVar114),
    Var115(ge_u_instructionVar115),
    Var116(lt_instructionVar116),
    Var117(lt_a_instructionVar117),
    Var118(lt_b_instructionVar118),
    Var119(lt_bu_instructionVar119),
    Var120(lt_h_instructionVar120),
    Var121(lt_hu_instructionVar121),
    Var122(lt_u_instructionVar122),
    Var123(lt_w_instructionVar123),
    Var124(lt_wu_instructionVar124),
    Var125(max_instructionVar125),
    Var126(max_b_instructionVar126),
    Var127(max_bu_instructionVar127),
    Var128(max_h_instructionVar128),
    Var129(max_hu_instructionVar129),
    Var130(max_u_instructionVar130),
    Var131(min_instructionVar131),
    Var132(min_b_instructionVar132),
    Var133(min_bu_instructionVar133),
    Var134(min_h_instructionVar134),
    Var135(min_hu_instructionVar135),
    Var136(min_u_instructionVar136),
    Var137(mov_instructionVar137),
    Var138(mul_instructionVar138),
    Var139(mul_instructionVar139),
    Var140(mul_f_instructionVar140),
    Var141(mul_u_instructionVar141),
    Var142(muls_instructionVar142),
    Var143(muls_u_instructionVar143),
    Var144(nand_instructionVar144),
    Var145(ne_instructionVar145),
    Var146(ne_a_instructionVar146),
    Var147(nor_instructionVar147),
    Var148(or_instructionVar148),
    Var149(or_eq_instructionVar149),
    Var150(or_ge_instructionVar150),
    Var151(or_ge_u_instructionVar151),
    Var152(or_lt_instructionVar152),
    Var153(or_lt_u_instructionVar153),
    Var154(or_ne_instructionVar154),
    Var155(orn_instructionVar155),
    Var156(q31tof_instructionVar156),
    Var157(sh_instructionVar157),
    Var158(sh_eq_instructionVar158),
    Var159(sh_ge_instructionVar159),
    Var160(sh_ge_u_instructionVar160),
    Var161(sh_h_instructionVar161),
    Var162(sh_lt_instructionVar162),
    Var163(sh_lt_u_instructionVar163),
    Var164(sh_ne_instructionVar164),
    Var165(sha_instructionVar165),
    Var166(sha_h_instructionVar166),
    Var167(shas_instructionVar167),
    Var168(sub_instructionVar168),
    Var169(sub_a_instructionVar169),
    Var170(sub_b_instructionVar170),
    Var171(sub_h_instructionVar171),
    Var172(subc_instructionVar172),
    Var173(subs_instructionVar173),
    Var174(subs_h_instructionVar174),
    Var175(subs_hu_instructionVar175),
    Var176(subs_u_instructionVar176),
    Var177(subx_instructionVar177),
    Var178(xnor_instructionVar178),
    Var179(xor_instructionVar179),
    Var180(xor_eq_instructionVar180),
    Var181(xor_ge_instructionVar181),
    Var182(xor_ge_u_instructionVar182),
    Var183(xor_lt_instructionVar183),
    Var184(xor_lt_u_instructionVar184),
    Var185(xor_ne_instructionVar185),
    Var186(xpose_b_instructionVar186),
    Var187(xpose_h_instructionVar187),
    Var188(addsc_a_instructionVar188),
    Var189(bisr_instructionVar189),
    Var190(mul_h_instructionVar190),
    Var191(mul_h_instructionVar191),
    Var192(mul_h_instructionVar192),
    Var193(mul_h_instructionVar193),
    Var194(mul_q_instructionVar194),
    Var195(mul_q_instructionVar195),
    Var196(mul_q_instructionVar196),
    Var197(mul_q_instructionVar197),
    Var198(mul_q_instructionVar198),
    Var199(mul_q_instructionVar199),
    Var200(mul_q_instructionVar200),
    Var201(mul_q_instructionVar201),
    Var202(mulm_h_instructionVar202),
    Var203(mulm_h_instructionVar203),
    Var204(mulm_h_instructionVar204),
    Var205(mulm_h_instructionVar205),
    Var206(mulr_h_instructionVar206),
    Var207(mulr_h_instructionVar207),
    Var208(mulr_h_instructionVar208),
    Var209(mulr_h_instructionVar209),
    Var210(mulr_q_instructionVar210),
    Var211(mulr_q_instructionVar211),
    Var212(sh_instructionVar212),
    Var213(sh_instructionVar213),
    Var214(syscall_instructionVar214),
    Var215(absdif_instructionVar215),
    Var216(absdifs_instructionVar216),
    Var217(add_instructionVar217),
    Var218(add_f_instructionVar218),
    Var219(addc_instructionVar219),
    Var220(adds_instructionVar220),
    Var221(adds_u_instructionVar221),
    Var222(addx_instructionVar222),
    Var223(and_instructionVar223),
    Var224(and_eq_instructionVar224),
    Var225(and_ge_instructionVar225),
    Var226(and_ge_u_instructionVar226),
    Var227(and_lt_instructionVar227),
    Var228(and_lt_u_instructionVar228),
    Var229(and_ne_instructionVar229),
    Var230(andn_instructionVar230),
    Var231(dvadj_instructionVar231),
    Var232(dvstep_instructionVar232),
    Var233(dvstep_u_instructionVar233),
    Var234(extr_instructionVar234),
    Var235(extr_u_instructionVar235),
    Var236(ixmax_instructionVar236),
    Var237(ixmax_u_instructionVar237),
    Var238(ixmin_instructionVar238),
    Var239(ixmin_u_instructionVar239),
    Var240(pack_instructionVar240),
    Var241(sub_f_instructionVar241),
    Var242(cadd_instructionVar242),
    Var243(caddn_instructionVar243),
    Var244(csub_instructionVar244),
    Var245(csubn_instructionVar245),
    Var246(dextr_instructionVar246),
    Var247(eq_instructionVar247),
    Var248(eqany_b_instructionVar248),
    Var249(eqany_h_instructionVar249),
    Var250(extr_instructionVar250),
    Var251(extr_u_instructionVar251),
    Var252(ge_instructionVar252),
    Var253(ge_u_instructionVar253),
    Var254(imask_instructionVar254),
    Var255(imask_instructionVar255),
    Var256(insert_instructionVar256),
    Var257(insert_instructionVar257),
    Var258(lt_instructionVar258),
    Var259(lt_u_instructionVar259),
    Var260(madd_instructionVar260),
    Var261(madd_instructionVar261),
    Var262(madd_f_instructionVar262),
    Var263(madd_u_instructionVar263),
    Var264(madds_instructionVar264),
    Var265(madds_instructionVar265),
    Var266(madds_u_instructionVar266),
    Var267(madds_u_instructionVar267),
    Var268(msub_instructionVar268),
    Var269(msub_instructionVar269),
    Var270(msub_f_instructionVar270),
    Var271(msub_u_instructionVar271),
    Var272(msubs_instructionVar272),
    Var273(msubs_instructionVar273),
    Var274(msubs_u_instructionVar274),
    Var275(msubs_u_instructionVar275),
    Var276(sel_instructionVar276),
    Var277(seln_instructionVar277),
    Var278(madd_h_instructionVar278),
    Var279(madd_h_instructionVar279),
    Var280(madd_h_instructionVar280),
    Var281(madd_h_instructionVar281),
    Var282(madd_q_instructionVar282),
    Var283(madd_q_instructionVar283),
    Var284(madd_q_instructionVar284),
    Var285(madd_q_instructionVar285),
    Var286(madd_q_instructionVar286),
    Var287(madd_q_instructionVar287),
    Var288(madd_q_instructionVar288),
    Var289(madd_q_instructionVar289),
    Var290(madd_q_instructionVar290),
    Var291(madd_q_instructionVar291),
    Var292(maddm_h_instructionVar292),
    Var293(maddm_h_instructionVar293),
    Var294(maddm_h_instructionVar294),
    Var295(maddm_h_instructionVar295),
    Var296(maddms_h_instructionVar296),
    Var297(maddms_h_instructionVar297),
    Var298(maddms_h_instructionVar298),
    Var299(maddms_h_instructionVar299),
    Var300(maddr_h_instructionVar300),
    Var301(maddr_h_instructionVar301),
    Var302(maddr_h_instructionVar302),
    Var303(maddr_h_instructionVar303),
    Var304(maddr_h_instructionVar304),
    Var305(maddr_q_instructionVar305),
    Var306(maddr_q_instructionVar306),
    Var307(maddrs_h_instructionVar307),
    Var308(maddrs_h_instructionVar308),
    Var309(maddrs_h_instructionVar309),
    Var310(maddrs_h_instructionVar310),
    Var311(maddrs_h_instructionVar311),
    Var312(maddrs_q_instructionVar312),
    Var313(maddrs_q_instructionVar313),
    Var314(madds_h_instructionVar314),
    Var315(madds_h_instructionVar315),
    Var316(madds_h_instructionVar316),
    Var317(madds_h_instructionVar317),
    Var318(madds_q_instructionVar318),
    Var319(madds_q_instructionVar319),
    Var320(madds_q_instructionVar320),
    Var321(madds_q_instructionVar321),
    Var322(madds_q_instructionVar322),
    Var323(madds_q_instructionVar323),
    Var324(madds_q_instructionVar324),
    Var325(madds_q_instructionVar325),
    Var326(madds_q_instructionVar326),
    Var327(madds_q_instructionVar327),
    Var328(maddsu_h_instructionVar328),
    Var329(maddsu_h_instructionVar329),
    Var330(maddsu_h_instructionVar330),
    Var331(maddsu_h_instructionVar331),
    Var332(maddsum_h_instructionVar332),
    Var333(maddsum_h_instructionVar333),
    Var334(maddsum_h_instructionVar334),
    Var335(maddsum_h_instructionVar335),
    Var336(maddsums_h_instructionVar336),
    Var337(maddsums_h_instructionVar337),
    Var338(maddsums_h_instructionVar338),
    Var339(maddsums_h_instructionVar339),
    Var340(maddsur_h_instructionVar340),
    Var341(maddsur_h_instructionVar341),
    Var342(maddsur_h_instructionVar342),
    Var343(maddsur_h_instructionVar343),
    Var344(maddsurs_h_instructionVar344),
    Var345(maddsurs_h_instructionVar345),
    Var346(maddsurs_h_instructionVar346),
    Var347(maddsurs_h_instructionVar347),
    Var348(maddsus_h_instructionVar348),
    Var349(maddsus_h_instructionVar349),
    Var350(maddsus_h_instructionVar350),
    Var351(maddsus_h_instructionVar351),
    Var352(max_instructionVar352),
    Var353(max_u_instructionVar353),
    Var354(min_instructionVar354),
    Var355(min_u_instructionVar355),
    Var356(msub_h_instructionVar356),
    Var357(msub_h_instructionVar357),
    Var358(msub_h_instructionVar358),
    Var359(msub_h_instructionVar359),
    Var360(msub_q_instructionVar360),
    Var361(msub_q_instructionVar361),
    Var362(msub_q_instructionVar362),
    Var363(msub_q_instructionVar363),
    Var364(msub_q_instructionVar364),
    Var365(msub_q_instructionVar365),
    Var366(msub_q_instructionVar366),
    Var367(msub_q_instructionVar367),
    Var368(msub_q_instructionVar368),
    Var369(msub_q_instructionVar369),
    Var370(msubad_h_instructionVar370),
    Var371(msubad_h_instructionVar371),
    Var372(msubad_h_instructionVar372),
    Var373(msubad_h_instructionVar373),
    Var374(msubadm_h_instructionVar374),
    Var375(msubadm_h_instructionVar375),
    Var376(msubadm_h_instructionVar376),
    Var377(msubadm_h_instructionVar377),
    Var378(msubadms_h_instructionVar378),
    Var379(msubadms_h_instructionVar379),
    Var380(msubadms_h_instructionVar380),
    Var381(msubadms_h_instructionVar381),
    Var382(msubadr_h_instructionVar382),
    Var383(msubadr_h_instructionVar383),
    Var384(msubadr_h_instructionVar384),
    Var385(msubadr_h_instructionVar385),
    Var386(msubadrs_h_instructionVar386),
    Var387(msubadrs_h_instructionVar387),
    Var388(msubadrs_h_instructionVar388),
    Var389(msubadrs_h_instructionVar389),
    Var390(msubads_h_instructionVar390),
    Var391(msubads_h_instructionVar391),
    Var392(msubads_h_instructionVar392),
    Var393(msubads_h_instructionVar393),
    Var394(msubm_h_instructionVar394),
    Var395(msubm_h_instructionVar395),
    Var396(msubm_h_instructionVar396),
    Var397(msubm_h_instructionVar397),
    Var398(msubms_h_instructionVar398),
    Var399(msubms_h_instructionVar399),
    Var400(msubms_h_instructionVar400),
    Var401(msubms_h_instructionVar401),
    Var402(msubr_h_instructionVar402),
    Var403(msubr_h_instructionVar403),
    Var404(msubr_h_instructionVar404),
    Var405(msubr_h_instructionVar405),
    Var406(msubr_h_instructionVar406),
    Var407(msubr_q_instructionVar407),
    Var408(msubr_q_instructionVar408),
    Var409(msubrs_h_instructionVar409),
    Var410(msubrs_h_instructionVar410),
    Var411(msubrs_h_instructionVar411),
    Var412(msubrs_h_instructionVar412),
    Var413(msubrs_h_instructionVar413),
    Var414(msubrs_q_instructionVar414),
    Var415(msubrs_q_instructionVar415),
    Var416(msubs_h_instructionVar416),
    Var417(msubs_h_instructionVar417),
    Var418(msubs_h_instructionVar418),
    Var419(msubs_h_instructionVar419),
    Var420(msubs_q_instructionVar420),
    Var421(msubs_q_instructionVar421),
    Var422(msubs_q_instructionVar422),
    Var423(msubs_q_instructionVar423),
    Var424(msubs_q_instructionVar424),
    Var425(msubs_q_instructionVar425),
    Var426(msubs_q_instructionVar426),
    Var427(msubs_q_instructionVar427),
    Var428(msubs_q_instructionVar428),
    Var429(msubs_q_instructionVar429),
    Var430(mul_instructionVar430),
    Var431(mul_instructionVar431),
    Var432(mul_u_instructionVar432),
    Var433(muls_instructionVar433),
    Var434(muls_u_instructionVar434),
    Var435(nand_instructionVar435),
    Var436(ne_instructionVar436),
    Var437(nor_instructionVar437),
    Var438(or_instructionVar438),
    Var439(or_eq_instructionVar439),
    Var440(or_ge_instructionVar440),
    Var441(or_ge_u_instructionVar441),
    Var442(or_lt_instructionVar442),
    Var443(or_lt_u_instructionVar443),
    Var444(or_ne_instructionVar444),
    Var445(orn_instructionVar445),
    Var446(rsub_instructionVar446),
    Var447(rsubs_instructionVar447),
    Var448(rsubs_u_instructionVar448),
    Var449(sh_eq_instructionVar449),
    Var450(sh_ge_instructionVar450),
    Var451(sh_ge_u_instructionVar451),
    Var452(sh_h_instructionVar452),
    Var453(sh_lt_instructionVar453),
    Var454(sh_lt_u_instructionVar454),
    Var455(sh_ne_instructionVar455),
    Var456(sha_instructionVar456),
    Var457(sha_h_instructionVar457),
    Var458(shas_instructionVar458),
    Var459(xnor_instructionVar459),
    Var460(xor_instructionVar460),
    Var461(xor_eq_instructionVar461),
    Var462(xor_ge_instructionVar462),
    Var463(xor_ge_u_instructionVar463),
    Var464(xor_lt_instructionVar464),
    Var465(xor_lt_u_instructionVar465),
    Var466(xor_ne_instructionVar466),
    Var467(cadd_instructionVar467),
    Var468(caddn_instructionVar468),
    Var469(dextr_instructionVar469),
    Var470(extr_instructionVar470),
    Var471(extr_u_instructionVar471),
    Var472(imask_instructionVar472),
    Var473(imask_instructionVar473),
    Var474(insert_instructionVar474),
    Var475(insert_instructionVar475),
    Var476(madd_instructionVar476),
    Var477(madd_instructionVar477),
    Var478(madd_u_instructionVar478),
    Var479(madds_instructionVar479),
    Var480(madds_instructionVar480),
    Var481(madds_u_instructionVar481),
    Var482(madds_u_instructionVar482),
    Var483(msub_instructionVar483),
    Var484(msub_instructionVar484),
    Var485(msub_u_instructionVar485),
    Var486(msubs_instructionVar486),
    Var487(msubs_instructionVar487),
    Var488(msubs_u_instructionVar488),
    Var489(msubs_u_instructionVar489),
    Var490(sel_instructionVar490),
    Var491(seln_instructionVar491),
    Var492(and_and_t_instructionVar492),
    Var493(and_andn_t_instructionVar493),
    Var494(and_nor_t_instructionVar494),
    Var495(and_or_t_instructionVar495),
    Var496(and_t_instructionVar496),
    Var497(andn_t_instructionVar497),
    Var498(cachea_i_instructionVar498),
    Var499(cachea_w_instructionVar499),
    Var500(cachea_wi_instructionVar500),
    Var501(ldlcx_instructionVar501),
    Var502(lducx_instructionVar502),
    Var503(stlcx_instructionVar503),
    Var504(stucx_instructionVar504),
    Var505(cmpswap_w_instructionVar505),
    Var506(cop_instructionVar506),
    Var507(cop_instructionVar507),
    Var508(loopu_instructionVar508),
    Var509(debug_instructionVar509),
    Var510(fret_instructionVar510),
    Var511(ins_t_instructionVar511),
    Var512(insert_instructionVar512),
    Var513(insert_instructionVar513),
    Var514(insn_t_instructionVar514),
    Var515(jnz_a_instructionVar515),
    Var516(jz_a_instructionVar516),
    Var517(loop_instructionVar517),
    Var518(mtcr_instructionVar518),
    Var519(jeq_instructionVar519),
    Var520(jeq_instructionVar520),
    Var521(jeq_a_instructionVar521),
    Var522(jge_instructionVar522),
    Var523(jge_instructionVar523),
    Var524(jge_u_instructionVar524),
    Var525(jge_u_instructionVar525),
    Var526(ji_instructionVar526),
    Var527(nop_instructionVar527),
    Var528(ret_instructionVar528),
    Var529(rfe_instructionVar529),
    Var530(nop_instructionVar530),
    Var531(ji_instructionVar531),
    Var532(jlt_instructionVar532),
    Var533(jlt_instructionVar533),
    Var534(jlt_u_instructionVar534),
    Var535(jlt_u_instructionVar535),
    Var536(jne_instructionVar536),
    Var537(jne_instructionVar537),
    Var538(jne_a_instructionVar538),
    Var539(jned_instructionVar539),
    Var540(jned_instructionVar540),
    Var541(jnei_instructionVar541),
    Var542(jnei_instructionVar542),
    Var543(ld_a_instructionVar543),
    Var544(ld_b_instructionVar544),
    Var545(ld_bu_instructionVar545),
    Var546(ld_d_instructionVar546),
    Var547(ld_da_instructionVar547),
    Var548(ld_dd_instructionVar548),
    Var549(ld_dd_instructionVar549),
    Var550(ld_dd_instructionVar550),
    Var551(ld_dd_instructionVar551),
    Var552(ld_h_instructionVar552),
    Var553(ld_hu_instructionVar553),
    Var554(ld_q_instructionVar554),
    Var555(ld_w_instructionVar555),
    Var556(ldlcx_instructionVar556),
    Var557(ldmst_instructionVar557),
    Var558(lducx_instructionVar558),
    Var559(lea_instructionVar559),
    Var560(st_a_instructionVar560),
    Var561(st_b_instructionVar561),
    Var562(st_d_instructionVar562),
    Var563(st_da_instructionVar563),
    Var564(st_dd_instructionVar564),
    Var565(st_dd_instructionVar565),
    Var566(st_dd_instructionVar566),
    Var567(st_dd_instructionVar567),
    Var568(st_h_instructionVar568),
    Var569(st_q_instructionVar569),
    Var570(st_w_instructionVar570),
    Var571(stlcx_instructionVar571),
    Var572(stucx_instructionVar572),
    Var573(swap_w_instructionVar573),
    Var574(swapmsk_w_instructionVar574),
    Var575(ld_a_instructionVar575),
    Var576(ld_b_instructionVar576),
    Var577(ld_bu_instructionVar577),
    Var578(ld_d_instructionVar578),
    Var579(ld_da_instructionVar579),
    Var580(ld_h_instructionVar580),
    Var581(ld_hu_instructionVar581),
    Var582(ld_q_instructionVar582),
    Var583(ld_w_instructionVar583),
    Var584(ldmst_instructionVar584),
    Var585(lea_instructionVar585),
    Var586(mfcr_instructionVar586),
    Var587(mov_instructionVar587),
    Var588(mov_instructionVar588),
    Var589(mov_u_instructionVar589),
    Var590(movh_instructionVar590),
    Var591(movh_a_instructionVar591),
    Var592(nand_t_instructionVar592),
    Var593(not_instructionVar593),
    Var594(nor_t_instructionVar594),
    Var595(or_and_t_instructionVar595),
    Var596(or_andn_t_instructionVar596),
    Var597(or_nor_t_instructionVar597),
    Var598(or_or_t_instructionVar598),
    Var599(or_t_instructionVar599),
    Var600(orn_t_instructionVar600),
    Var601(rsub_instructionVar601),
    Var602(sat_b_instructionVar602),
    Var603(sat_bu_instructionVar603),
    Var604(sat_h_instructionVar604),
    Var605(sat_hu_instructionVar605),
    Var606(sh_instructionVar606),
    Var607(sh_instructionVar607),
    Var608(sh_and_t_instructionVar608),
    Var609(sh_andn_t_instructionVar609),
    Var610(sh_nand_t_instructionVar610),
    Var611(sh_nor_t_instructionVar611),
    Var612(sh_or_t_instructionVar612),
    Var613(sh_orn_t_instructionVar613),
    Var614(sh_xnor_t_instructionVar614),
    Var615(sh_xor_t_instructionVar615),
    Var616(st_a_instructionVar616),
    Var617(st_b_instructionVar617),
    Var618(st_d_instructionVar618),
    Var619(st_da_instructionVar619),
    Var620(st_h_instructionVar620),
    Var621(st_q_instructionVar621),
    Var622(st_t_instructionVar622),
    Var623(st_w_instructionVar623),
    Var624(swap_w_instructionVar624),
    Var625(xnor_t_instructionVar625),
    Var626(xor_t_instructionVar626),
    Var627(add_instructionVar627),
    Var628(add_instructionVar628),
    Var629(add_instructionVar629),
    Var630(add_instructionVar630),
    Var631(add_instructionVar631),
    Var632(add_instructionVar632),
    Var633(add_a_instructionVar633),
    Var634(add_a_instructionVar634),
    Var635(addi_instructionVar635),
    Var636(addih_instructionVar636),
    Var637(addih_a_instructionVar637),
    Var638(adds_instructionVar638),
    Var639(and_instructionVar639),
    Var640(and_instructionVar640),
    Var641(bisr_instructionVar641),
    Var642(cadd_instructionVar642),
    Var643(caddn_instructionVar643),
    Var644(call_instructionVar644),
    Var645(call_instructionVar645),
    Var646(calla_instructionVar646),
    Var647(cmov_instructionVar647),
    Var648(cmov_instructionVar648),
    Var649(cmovn_instructionVar649),
    Var650(cmovn_instructionVar650),
    Var651(eq_instructionVar651),
    Var652(eq_instructionVar652),
    Var653(fcall_instructionVar653),
    Var654(fcalla_instructionVar654),
    Var655(j_instructionVar655),
    Var656(j_instructionVar656),
    Var657(ja_instructionVar657),
    Var658(jeq_instructionVar658),
    Var659(jeq_instructionVar659),
    Var660(jeq_instructionVar660),
    Var661(jeq_instructionVar661),
    Var662(jgez_instructionVar662),
    Var663(jgtz_instructionVar663),
    Var664(jl_instructionVar664),
    Var665(jla_instructionVar665),
    Var666(jlez_instructionVar666),
    Var667(jltz_instructionVar667),
    Var668(jne_instructionVar668),
    Var669(jne_instructionVar669),
    Var670(jne_instructionVar670),
    Var671(jne_instructionVar671),
    Var672(jnz_instructionVar672),
    Var673(jnz_instructionVar673),
    Var674(jnz_a_instructionVar674),
    Var675(jnz_t_instructionVar675),
    Var676(jnz_t_instructionVar676),
    Var677(jz_instructionVar677),
    Var678(jz_instructionVar678),
    Var679(jz_a_instructionVar679),
    Var680(jz_t_instructionVar680),
    Var681(jz_t_instructionVar681),
    Var682(ld_a_instructionVar682),
    Var683(ld_a_instructionVar683),
    Var684(ld_a_instructionVar684),
    Var685(ld_a_instructionVar685),
    Var686(ld_b_instructionVar686),
    Var687(ld_bu_instructionVar687),
    Var688(ld_bu_instructionVar688),
    Var689(ld_bu_instructionVar689),
    Var690(ld_h_instructionVar690),
    Var691(ld_h_instructionVar691),
    Var692(ld_h_instructionVar692),
    Var693(ld_hu_instructionVar693),
    Var694(ld_w_instructionVar694),
    Var695(ld_w_instructionVar695),
    Var696(ld_w_instructionVar696),
    Var697(ld_w_instructionVar697),
    Var698(lea_instructionVar698),
    Var699(loop_instructionVar699),
    Var700(lt_instructionVar700),
    Var701(lt_instructionVar701),
    Var702(mov_instructionVar702),
    Var703(mov_instructionVar703),
    Var704(mov_instructionVar704),
    Var705(mov_instructionVar705),
    Var706(mov_a_instructionVar706),
    Var707(mov_a_instructionVar707),
    Var708(mov_aa_instructionVar708),
    Var709(mov_d_instructionVar709),
    Var710(mul_instructionVar710),
    Var711(or_instructionVar711),
    Var712(or_instructionVar712),
    Var713(sha_instructionVar713),
    Var714(st_a_instructionVar714),
    Var715(st_a_instructionVar715),
    Var716(st_a_instructionVar716),
    Var717(st_a_instructionVar717),
    Var718(st_b_instructionVar718),
    Var719(st_b_instructionVar719),
    Var720(st_b_instructionVar720),
    Var721(st_h_instructionVar721),
    Var722(st_h_instructionVar722),
    Var723(st_h_instructionVar723),
    Var724(st_w_instructionVar724),
    Var725(st_w_instructionVar725),
    Var726(st_w_instructionVar726),
    Var727(st_w_instructionVar727),
    Var728(sub_instructionVar728),
    Var729(sub_instructionVar729),
    Var730(sub_instructionVar730),
    Var731(sub_a_instructionVar731),
    Var732(subs_instructionVar732),
    Var733(xor_instructionVar733),
    Var734(ldl_il_instructionVar734),
    Var735(ldl_iu_instructionVar735),
    Var736(jc_a_instructionVar736),
    Var737(addsc_a_instructionVar737),
    Var738(cachei_i_instructionVar738),
    Var739(cachei_w_instructionVar739),
    Var740(cachei_wi_instructionVar740),
    Var741(cachea_i_instructionVar741),
    Var742(cachea_w_instructionVar742),
    Var743(cachea_wi_instructionVar743),
    Var744(cmpswap_w_instructionVar744),
    Var745(ld_a_instructionVar745),
    Var746(ld_b_instructionVar746),
    Var747(ld_bu_instructionVar747),
    Var748(ld_d_instructionVar748),
    Var749(ld_da_instructionVar749),
    Var750(ld_h_instructionVar750),
    Var751(ld_hu_instructionVar751),
    Var752(ld_q_instructionVar752),
    Var753(ld_w_instructionVar753),
    Var754(ldmst_instructionVar754),
    Var755(st_a_instructionVar755),
    Var756(st_b_instructionVar756),
    Var757(st_d_instructionVar757),
    Var758(st_da_instructionVar758),
    Var759(st_h_instructionVar759),
    Var760(st_q_instructionVar760),
    Var761(st_w_instructionVar761),
    Var762(swap_w_instructionVar762),
    Var763(swapmsk_w_instructionVar763),
    Var764(ld_a_instructionVar764),
    Var765(ld_bu_instructionVar765),
    Var766(ld_h_instructionVar766),
    Var767(ld_w_instructionVar767),
    Var768(st_a_instructionVar768),
    Var769(st_b_instructionVar769),
    Var770(st_h_instructionVar770),
    Var771(st_w_instructionVar771),
    Var772(dinit_instructionVar772),
    Var773(dstep_instructionVar773),
    Var774(minit_instructionVar774),
    Var775(mstep_l_instructionVar775),
    Var776(mstep_u_instructionVar776),
    Var777(add_f_instructionVar777),
    Var778(and_f_instructionVar778),
    Var779(clr_instructionVar779),
    Var780(comp_f_instructionVar780),
    Var781(inb_i_instructionVar781),
    Var782(ld_f_instructionVar782),
    Var783(or_f_instructionVar783),
    Var784(rl_instructionVar784),
    Var785(rr_instructionVar785),
    Var786(set_instructionVar786),
    Var787(shl_instructionVar787),
    Var788(shr_instructionVar788),
    Var789(st_f_instructionVar789),
    Var790(sub_f_instructionVar790),
    Var791(xch_f_instructionVar791),
    Var792(xor_f_instructionVar792),
    Var793(add_instructionVar793),
    Var794(add_i_instructionVar794),
    Var795(add_pi_instructionVar795),
    Var796(and_instructionVar796),
    Var797(and_pi_instructionVar797),
    Var798(bcopy_instructionVar798),
    Var799(chkb_instructionVar799),
    Var800(comp_instructionVar800),
    Var801(comp_i_instructionVar801),
    Var802(comp_pi_instructionVar802),
    Var803(debug_instructionVar803),
    Var804(inb_instructionVar804),
    Var805(jc_i_instructionVar805),
    Var806(jc_ia_instructionVar806),
    Var807(ld_i_instructionVar807),
    Var808(ld_p_instructionVar808),
    Var809(ld_pi_instructionVar809),
    Var810(mclr_pi_instructionVar810),
    Var811(mov_instructionVar811),
    Var812(mset_pi_instructionVar812),
    Var813(neg_instructionVar813),
    Var814(not_instructionVar814),
    Var815(or_instructionVar815),
    Var816(or_pi_instructionVar816),
    Var817(pri_instructionVar817),
    Var818(st_p_instructionVar818),
    Var819(st_pi_instructionVar819),
    Var820(sub_instructionVar820),
    Var821(sub_i_instructionVar821),
    Var822(sub_pi_instructionVar822),
    Var823(xch_pi_instructionVar823),
    Var824(xor_instructionVar824),
    Var825(xor_pi_instructionVar825),
    Var826(clr_f_instructionVar826),
    Var827(exit_instructionVar827),
    Var828(jc_instructionVar828),
    Var829(jl_instructionVar829),
    Var830(ld_if_instructionVar830),
    Var831(set_f_instructionVar831),
    Var832(st_if_instructionVar832),
    Var833(copy_instructionVar833),
}
impl Tableinstruction {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var3(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var4(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var5(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var6(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var7(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var8(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var9(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var10(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var11(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var12(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var13(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var14(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var15(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var16(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var17(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var18(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var19(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var20(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var21(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var22(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var23(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var24(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var25(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var26(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var27(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var28(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var29(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var30(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var31(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var32(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var33(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var34(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var35(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var36(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var37(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var38(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var39(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var40(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var41(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var42(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var43(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var44(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var45(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var46(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var47(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var48(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var49(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var50(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var51(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var52(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var53(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var54(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var55(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var56(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var57(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var58(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var59(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var60(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var61(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var62(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var63(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var64(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var65(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var66(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var67(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var68(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var69(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var70(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var71(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var72(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var73(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var74(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var75(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var76(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var77(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var78(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var79(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var80(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var81(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var82(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var83(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var84(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var85(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var86(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var87(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var88(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var89(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var90(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var91(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var92(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var93(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var94(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var95(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var96(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var97(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var98(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var99(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var100(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var101(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var102(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var103(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var104(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var105(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var106(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var107(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var108(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var109(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var110(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var111(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var112(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var113(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var114(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var115(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var116(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var117(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var118(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var119(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var120(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var121(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var122(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var123(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var124(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var125(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var126(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var127(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var128(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var129(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var130(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var131(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var132(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var133(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var134(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var135(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var136(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var137(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var138(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var139(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var140(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var141(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var142(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var143(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var144(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var145(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var146(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var147(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var148(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var149(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var150(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var151(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var152(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var153(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var154(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var155(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var156(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var157(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var158(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var159(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var160(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var161(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var162(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var163(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var164(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var165(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var166(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var167(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var168(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var169(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var170(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var171(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var172(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var173(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var174(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var175(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var176(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var177(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var178(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var179(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var180(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var181(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var182(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var183(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var184(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var185(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var186(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var187(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var188(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var189(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var190(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var191(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var192(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var193(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var194(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var195(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var196(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var197(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var198(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var199(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var200(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var201(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var202(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var203(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var204(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var205(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var206(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var207(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var208(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var209(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var210(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var211(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var212(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var213(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var214(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var215(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var216(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var217(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var218(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var219(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var220(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var221(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var222(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var223(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var224(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var225(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var226(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var227(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var228(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var229(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var230(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var231(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var232(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var233(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var234(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var235(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var236(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var237(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var238(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var239(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var240(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var241(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var242(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var243(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var244(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var245(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var246(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var247(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var248(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var249(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var250(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var251(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var252(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var253(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var254(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var255(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var256(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var257(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var258(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var259(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var260(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var261(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var262(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var263(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var264(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var265(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var266(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var267(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var268(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var269(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var270(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var271(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var272(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var273(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var274(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var275(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var276(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var277(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var278(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var279(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var280(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var281(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var282(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var283(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var284(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var285(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var286(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var287(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var288(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var289(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var290(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var291(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var292(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var293(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var294(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var295(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var296(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var297(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var298(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var299(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var300(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var301(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var302(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var303(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var304(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var305(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var306(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var307(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var308(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var309(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var310(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var311(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var312(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var313(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var314(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var315(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var316(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var317(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var318(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var319(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var320(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var321(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var322(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var323(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var324(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var325(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var326(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var327(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var328(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var329(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var330(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var331(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var332(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var333(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var334(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var335(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var336(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var337(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var338(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var339(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var340(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var341(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var342(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var343(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var344(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var345(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var346(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var347(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var348(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var349(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var350(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var351(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var352(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var353(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var354(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var355(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var356(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var357(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var358(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var359(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var360(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var361(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var362(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var363(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var364(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var365(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var366(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var367(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var368(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var369(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var370(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var371(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var372(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var373(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var374(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var375(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var376(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var377(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var378(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var379(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var380(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var381(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var382(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var383(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var384(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var385(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var386(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var387(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var388(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var389(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var390(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var391(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var392(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var393(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var394(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var395(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var396(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var397(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var398(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var399(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var400(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var401(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var402(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var403(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var404(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var405(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var406(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var407(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var408(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var409(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var410(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var411(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var412(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var413(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var414(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var415(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var416(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var417(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var418(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var419(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var420(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var421(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var422(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var423(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var424(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var425(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var426(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var427(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var428(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var429(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var430(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var431(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var432(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var433(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var434(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var435(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var436(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var437(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var438(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var439(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var440(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var441(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var442(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var443(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var444(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var445(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var446(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var447(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var448(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var449(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var450(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var451(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var452(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var453(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var454(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var455(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var456(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var457(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var458(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var459(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var460(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var461(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var462(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var463(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var464(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var465(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var466(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var467(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var468(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var469(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var470(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var471(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var472(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var473(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var474(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var475(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var476(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var477(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var478(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var479(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var480(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var481(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var482(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var483(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var484(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var485(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var486(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var487(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var488(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var489(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var490(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var491(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var492(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var493(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var494(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var495(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var496(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var497(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var498(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var499(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var500(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var501(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var502(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var503(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var504(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var505(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var506(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var507(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var508(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var509(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var510(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var511(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var512(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var513(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var514(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var515(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var516(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var517(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var518(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var519(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var520(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var521(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var522(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var523(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var524(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var525(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var526(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var527(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var528(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var529(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var530(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var531(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var532(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var533(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var534(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var535(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var536(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var537(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var538(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var539(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var540(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var541(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var542(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var543(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var544(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var545(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var546(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var547(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var548(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var549(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var550(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var551(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var552(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var553(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var554(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var555(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var556(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var557(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var558(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var559(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var560(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var561(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var562(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var563(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var564(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var565(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var566(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var567(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var568(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var569(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var570(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var571(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var572(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var573(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var574(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var575(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var576(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var577(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var578(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var579(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var580(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var581(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var582(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var583(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var584(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var585(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var586(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var587(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var588(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var589(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var590(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var591(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var592(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var593(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var594(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var595(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var596(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var597(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var598(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var599(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var600(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var601(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var602(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var603(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var604(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var605(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var606(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var607(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var608(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var609(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var610(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var611(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var612(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var613(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var614(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var615(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var616(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var617(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var618(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var619(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var620(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var621(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var622(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var623(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var624(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var625(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var626(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var627(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var628(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var629(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var630(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var631(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var632(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var633(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var634(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var635(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var636(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var637(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var638(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var639(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var640(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var641(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var642(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var643(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var644(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var645(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var646(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var647(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var648(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var649(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var650(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var651(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var652(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var653(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var654(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var655(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var656(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var657(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var658(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var659(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var660(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var661(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var662(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var663(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var664(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var665(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var666(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var667(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var668(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var669(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var670(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var671(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var672(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var673(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var674(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var675(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var676(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var677(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var678(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var679(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var680(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var681(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var682(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var683(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var684(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var685(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var686(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var687(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var688(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var689(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var690(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var691(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var692(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var693(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var694(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var695(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var696(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var697(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var698(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var699(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var700(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var701(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var702(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var703(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var704(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var705(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var706(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var707(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var708(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var709(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var710(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var711(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var712(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var713(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var714(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var715(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var716(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var717(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var718(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var719(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var720(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var721(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var722(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var723(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var724(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var725(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var726(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var727(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var728(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var729(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var730(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var731(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var732(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var733(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var734(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var735(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var736(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var737(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var738(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var739(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var740(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var741(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var742(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var743(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var744(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var745(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var746(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var747(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var748(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var749(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var750(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var751(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var752(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var753(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var754(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var755(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var756(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var757(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var758(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var759(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var760(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var761(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var762(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var763(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var764(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var765(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var766(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var767(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var768(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var769(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var770(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var771(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var772(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var773(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var774(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var775(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var776(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var777(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var778(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var779(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var780(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var781(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var782(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var783(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var784(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var785(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var786(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var787(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var788(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var789(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var790(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var791(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var792(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var793(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var794(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var795(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var796(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var797(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var798(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var799(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var800(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var801(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var802(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var803(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var804(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var805(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var806(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var807(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var808(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var809(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var810(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var811(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var812(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var813(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var814(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var815(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var816(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var817(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var818(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var819(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var820(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var821(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var822(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var823(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var824(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var825(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var826(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var827(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var828(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var829(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var830(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var831(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var832(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var833(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 255) == 1
        {
            if let Some((inst_len, parsed)) =
                debug_instructionVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 255) == 3
        {
            if let Some((inst_len, parsed)) =
                disable_instructionVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 255) == 4
        {
            if let Some((inst_len, parsed)) =
                dsync_instructionVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 255) == 3
        {
            if let Some((inst_len, parsed)) =
                enable_instructionVar3::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var3(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                fret_instructionVar4::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var4(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 255) == 4
        {
            if let Some((inst_len, parsed)) =
                isync_instructionVar5::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var5(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 45
            && (tokens_param[1] & 255) == 11
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                ji_instructionVar6::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var6(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                nop_instructionVar7::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var7(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 255) == 1
        {
            if let Some((inst_len, parsed)) =
                ret_instructionVar8::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var8(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 255) == 1
        {
            if let Some((inst_len, parsed)) =
                rfe_instructionVar9::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var9(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 255) == 1
        {
            if let Some((inst_len, parsed)) =
                rfm_instructionVar10::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var10(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 255) == 2
        {
            if let Some((inst_len, parsed)) =
                rslcx_instructionVar11::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var11(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 47
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                rstv_instructionVar12::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var12(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 255) == 2
        {
            if let Some((inst_len, parsed)) =
                svlcx_instructionVar13::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var13(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 117
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                tlbflush_a_instructionVar14::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var14(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 117
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 80
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                tlbflush_b_instructionVar15::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var15(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 255) == 5
        {
            if let Some((inst_len, parsed)) =
                trapsv_instructionVar16::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var16(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 255) == 5
        {
            if let Some((inst_len, parsed)) =
                trapv_instructionVar17::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var17(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 255) == 0
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 255) == 5
        {
            if let Some((inst_len, parsed)) =
                wait_instructionVar18::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var18(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                abs_instructionVar19::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var19(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                abs_b_instructionVar20::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var20(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                abs_h_instructionVar21::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var21(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 208
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                abss_instructionVar22::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var22(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 208
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                abss_h_instructionVar23::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var23(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 45
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                calli_instructionVar24::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var24(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 255) == 3
        {
            if let Some((inst_len, parsed)) =
                disable_instructionVar25::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var25(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 45
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 16
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                fcalli_instructionVar26::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var26(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 45
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                ji_instructionVar27::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var27(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 45
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                jli_instructionVar28::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var28(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 13
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 255) == 3
        {
            if let Some((inst_len, parsed)) =
                restore_instructionVar29::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var29(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 117
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                tlbdemap_instructionVar30::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var30(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 117
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 255) == 4
        {
            if let Some((inst_len, parsed)) =
                tlbmap_instructionVar31::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var31(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 117
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                tlbprobe_a_instructionVar32::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var32(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 117
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 144
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                tlbprobe_i_instructionVar33::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var33(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 193
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                updfl_instructionVar34::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var34(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 144
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                bsplit_instructionVar35::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var35(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                clo_instructionVar36::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var36(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 208
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                clo_h_instructionVar37::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var37(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 208
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                cls_instructionVar38::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var38(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 224
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                cls_h_instructionVar39::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var39(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 176
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                clz_instructionVar40::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var40(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                clz_h_instructionVar41::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var41(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                eqz_a_instructionVar42::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var42(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 1
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                ftoi_instructionVar43::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var43(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 49
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                ftoiz_instructionVar44::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var44(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 33
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                ftou_instructionVar45::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var45(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 113
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                ftouz_instructionVar46::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var46(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 65
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                itof_instructionVar47::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var47(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 255) == 2
        {
            if let Some((inst_len, parsed)) =
                ld_dd_instructionVar48::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var48(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 255) == 10
        {
            if let Some((inst_len, parsed)) =
                ld_dd_instructionVar49::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var49(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 209
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                mffr_instructionVar50::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var50(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 240
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                mov_instructionVar51::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var51(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 8
        {
            if let Some((inst_len, parsed)) =
                mov_instructionVar52::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var52(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                mov_a_instructionVar53::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var53(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mov_aa_instructionVar54::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var54(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                mov_d_instructionVar55::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var55(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 193
            && (tokens_param[3] & 255) == 1
        {
            if let Some((inst_len, parsed)) =
                mtfr_instructionVar56::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var56(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 144
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                nez_a_instructionVar57::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var57(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                parity_instructionVar58::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var58(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 145
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                qseed_f_instructionVar59::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var59(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 224
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                sat_b_instructionVar60::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var60(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 240
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                sat_bu_instructionVar61::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var61(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 224
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                sat_h_instructionVar62::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var62(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 240
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                sat_hu_instructionVar63::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var63(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 255) == 2
        {
            if let Some((inst_len, parsed)) =
                st_dd_instructionVar64::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var64(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 255) == 10
        {
            if let Some((inst_len, parsed)) =
                st_dd_instructionVar65::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var65(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                unpack_instructionVar66::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var66(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 97
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                utof_instructionVar67::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var67(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 224
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                absdif_instructionVar68::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var68(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 224
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                absdif_b_instructionVar69::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var69(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 224
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                absdif_h_instructionVar70::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var70(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 240
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                absdifs_instructionVar71::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var71(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 240
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                absdifs_h_instructionVar72::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var72(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                add_instructionVar73::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var73(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[2] & 255) == 16
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                add_a_instructionVar74::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var74(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                add_b_instructionVar75::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var75(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                add_h_instructionVar76::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var76(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 80
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                addc_instructionVar77::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var77(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                adds_instructionVar78::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var78(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                adds_h_instructionVar79::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var79(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                adds_hu_instructionVar80::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var80(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                adds_u_instructionVar81::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var81(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                addsc_at_instructionVar82::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var82(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                addx_instructionVar83::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var83(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                and_instructionVar84::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var84(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                and_eq_instructionVar85::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var85(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                and_ge_instructionVar86::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var86(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 80
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                and_ge_u_instructionVar87::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var87(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                and_lt_instructionVar88::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var88(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                and_lt_u_instructionVar89::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var89(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 16
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                and_ne_instructionVar90::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var90(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 224
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                andn_instructionVar91::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var91(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 16
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                bmerge_instructionVar92::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var92(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 1
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                cmp_f_instructionVar93::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var93(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                crc32_instructionVar94::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var94(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 1
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                div_instructionVar95::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var95(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 17
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                div_u_instructionVar96::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var96(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 81
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                div_f_instructionVar97::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var97(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                dvinit_instructionVar98::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var98(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                dvinit_b_instructionVar99::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var99(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                dvinit_bu_instructionVar100::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var100(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                dvinit_h_instructionVar101::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var101(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                dvinit_hu_instructionVar102::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var102(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                dvinit_u_instructionVar103::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var103(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                eq_instructionVar104::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var104(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                eq_a_instructionVar105::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var105(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                eq_b_instructionVar106::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var106(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                eq_h_instructionVar107::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var107(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 9
        {
            if let Some((inst_len, parsed)) =
                eq_w_instructionVar108::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var108(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 96
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                eqany_b_instructionVar109::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var109(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 96
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                eqany_h_instructionVar110::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var110(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 17
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                ftoq31_instructionVar111::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var111(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 129
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                ftoq31z_instructionVar112::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var112(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                ge_instructionVar113::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var113(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                ge_a_instructionVar114::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var114(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 80
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                ge_u_instructionVar115::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var115(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                lt_instructionVar116::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var116(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                lt_a_instructionVar117::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var117(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                lt_b_instructionVar118::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var118(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                lt_bu_instructionVar119::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var119(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                lt_h_instructionVar120::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var120(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                lt_hu_instructionVar121::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var121(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                lt_u_instructionVar122::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var122(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 9
        {
            if let Some((inst_len, parsed)) =
                lt_w_instructionVar123::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var123(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 9
        {
            if let Some((inst_len, parsed)) =
                lt_wu_instructionVar124::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var124(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                max_instructionVar125::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var125(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                max_b_instructionVar126::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var126(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 176
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                max_bu_instructionVar127::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var127(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                max_h_instructionVar128::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var128(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 176
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                max_hu_instructionVar129::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var129(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 176
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                max_u_instructionVar130::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var130(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                min_instructionVar131::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var131(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                min_b_instructionVar132::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var132(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 144
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                min_bu_instructionVar133::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var133(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                min_h_instructionVar134::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var134(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 144
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                min_hu_instructionVar135::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var135(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 144
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                min_u_instructionVar136::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var136(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 16
            && (tokens_param[3] & 15) == 8
        {
            if let Some((inst_len, parsed)) =
                mov_instructionVar137::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var137(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 115
            && (tokens_param[2] & 255) == 10
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_instructionVar138::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var138(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 115
            && (tokens_param[2] & 255) == 106
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_instructionVar139::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var139(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 65
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_f_instructionVar140::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var140(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 115
            && (tokens_param[2] & 255) == 104
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_u_instructionVar141::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var141(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 115
            && (tokens_param[2] & 255) == 138
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                muls_instructionVar142::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var142(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 115
            && (tokens_param[2] & 255) == 136
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                muls_u_instructionVar143::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var143(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 144
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                nand_instructionVar144::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var144(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 16
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                ne_instructionVar145::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var145(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[2] & 255) == 16
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                ne_a_instructionVar146::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var146(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 176
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                nor_instructionVar147::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var147(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                or_instructionVar148::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var148(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 112
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                or_eq_instructionVar149::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var149(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 176
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                or_ge_instructionVar150::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var150(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                or_ge_u_instructionVar151::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var151(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 144
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                or_lt_instructionVar152::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var152(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                or_lt_u_instructionVar153::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var153(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                or_ne_instructionVar154::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var154(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 240
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                orn_instructionVar155::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var155(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 255) == 81
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                q31tof_instructionVar156::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var156(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                sh_instructionVar157::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var157(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 112
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                sh_eq_instructionVar158::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var158(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 176
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                sh_ge_instructionVar159::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var159(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                sh_ge_u_instructionVar160::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var160(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                sh_h_instructionVar161::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var161(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 144
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                sh_lt_instructionVar162::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var162(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                sh_lt_u_instructionVar163::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var163(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                sh_ne_instructionVar164::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var164(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 16
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                sha_instructionVar165::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var165(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 16
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                sha_h_instructionVar166::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var166(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                shas_instructionVar167::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var167(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                sub_instructionVar168::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var168(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                sub_a_instructionVar169::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var169(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                sub_b_instructionVar170::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var170(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 128
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                sub_h_instructionVar171::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var171(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 208
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                subc_instructionVar172::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var172(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                subs_instructionVar173::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var173(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 160
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                subs_h_instructionVar174::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var174(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 176
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                subs_hu_instructionVar175::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var175(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 176
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                subs_u_instructionVar176::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var176(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                subx_instructionVar177::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var177(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 208
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                xnor_instructionVar178::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var178(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 15
            && (tokens_param[2] & 255) == 192
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                xor_instructionVar179::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var179(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 240
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                xor_eq_instructionVar180::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var180(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                xor_ge_instructionVar181::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var181(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 64
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                xor_ge_u_instructionVar182::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var182(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 16
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                xor_lt_instructionVar183::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var183(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                xor_lt_u_instructionVar184::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var184(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 0
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                xor_ne_instructionVar185::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var185(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 48
            && (tokens_param[3] & 15) == 8
        {
            if let Some((inst_len, parsed)) =
                xpose_b_instructionVar186::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var186(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 11
            && (tokens_param[2] & 255) == 32
            && (tokens_param[3] & 15) == 8
        {
            if let Some((inst_len, parsed)) =
                xpose_h_instructionVar187::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var187(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 1
            && (tokens_param[2] & 252) == 0
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                addsc_a_instructionVar188::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var188(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 173
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                bisr_instructionVar189::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var189(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 96
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_h_instructionVar190::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var190(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 100
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_h_instructionVar191::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var191(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 104
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_h_instructionVar192::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var192(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 108
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_h_instructionVar193::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var193(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 147
            && (tokens_param[2] & 252) == 0
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_q_instructionVar194::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var194(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 147
            && (tokens_param[2] & 252) == 4
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_q_instructionVar195::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var195(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 147
            && (tokens_param[2] & 252) == 8
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_q_instructionVar196::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var196(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 147
            && (tokens_param[2] & 252) == 16
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_q_instructionVar197::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var197(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 147
            && (tokens_param[2] & 252) == 20
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_q_instructionVar198::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var198(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 147
            && (tokens_param[2] & 252) == 96
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_q_instructionVar199::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var199(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 147
            && (tokens_param[2] & 252) == 100
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_q_instructionVar200::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var200(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 147
            && (tokens_param[2] & 252) == 108
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_q_instructionVar201::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var201(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 112
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mulm_h_instructionVar202::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var202(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 116
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mulm_h_instructionVar203::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var203(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 120
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mulm_h_instructionVar204::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var204(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 124
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mulm_h_instructionVar205::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var205(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 48
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mulr_h_instructionVar206::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var206(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 52
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mulr_h_instructionVar207::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var207(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 56
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mulr_h_instructionVar208::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var208(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 179
            && (tokens_param[2] & 252) == 60
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mulr_h_instructionVar209::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var209(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 147
            && (tokens_param[2] & 252) == 24
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mulr_q_instructionVar210::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var210(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 147
            && (tokens_param[2] & 252) == 28
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mulr_q_instructionVar211::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var211(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 240) == 16
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                sh_instructionVar212::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var212(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 240) == 0
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                sh_instructionVar213::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var213(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 173
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 224) == 128
            && (tokens_param[3] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                syscall_instructionVar214::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var214(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 192
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                absdif_instructionVar215::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var215(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 224
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                absdifs_instructionVar216::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var216(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                add_instructionVar217::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var217(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 33
        {
            if let Some((inst_len, parsed)) =
                add_f_instructionVar218::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var218(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 160
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                addc_instructionVar219::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var219(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                adds_instructionVar220::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var220(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 96
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                adds_u_instructionVar221::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var221(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 128
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                addx_instructionVar222::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var222(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                and_instructionVar223::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var223(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                and_eq_instructionVar224::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var224(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 128
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                and_ge_instructionVar225::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var225(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 160
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                and_ge_u_instructionVar226::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var226(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                and_lt_instructionVar227::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var227(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 96
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                and_lt_u_instructionVar228::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var228(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 32
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                and_ne_instructionVar229::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var229(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 192
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                andn_instructionVar230::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var230(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 208
        {
            if let Some((inst_len, parsed)) =
                dvadj_instructionVar231::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var231(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 240
        {
            if let Some((inst_len, parsed)) =
                dvstep_instructionVar232::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var232(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 224
        {
            if let Some((inst_len, parsed)) =
                dvstep_u_instructionVar233::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var233(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 23
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 64
        {
            if let Some((inst_len, parsed)) =
                extr_instructionVar234::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var234(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 23
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 96
        {
            if let Some((inst_len, parsed)) =
                extr_u_instructionVar235::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var235(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 160
        {
            if let Some((inst_len, parsed)) =
                ixmax_instructionVar236::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var236(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 176
        {
            if let Some((inst_len, parsed)) =
                ixmax_u_instructionVar237::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var237(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 128
        {
            if let Some((inst_len, parsed)) =
                ixmin_instructionVar238::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var238(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 255) == 144
        {
            if let Some((inst_len, parsed)) =
                ixmin_u_instructionVar239::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var239(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                pack_instructionVar240::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var240(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 255) == 49
        {
            if let Some((inst_len, parsed)) =
                sub_f_instructionVar241::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var241(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 43
            && (tokens_param[2] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                cadd_instructionVar242::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var242(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 43
            && (tokens_param[2] & 255) == 16
        {
            if let Some((inst_len, parsed)) =
                caddn_instructionVar243::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var243(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 43
            && (tokens_param[2] & 255) == 32
        {
            if let Some((inst_len, parsed)) =
                csub_instructionVar244::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var244(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 43
            && (tokens_param[2] & 255) == 48
        {
            if let Some((inst_len, parsed)) =
                csubn_instructionVar245::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var245(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 23
            && (tokens_param[2] & 255) == 128
        {
            if let Some((inst_len, parsed)) =
                dextr_instructionVar246::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var246(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                eq_instructionVar247::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var247(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 192
            && (tokens_param[3] & 15) == 10
        {
            if let Some((inst_len, parsed)) =
                eqany_b_instructionVar248::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var248(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 192
            && (tokens_param[3] & 15) == 14
        {
            if let Some((inst_len, parsed)) =
                eqany_h_instructionVar249::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var249(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 87
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 224) == 64
        {
            if let Some((inst_len, parsed)) =
                extr_instructionVar250::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var250(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 87
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 224) == 96
        {
            if let Some((inst_len, parsed)) =
                extr_u_instructionVar251::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var251(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 128
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                ge_instructionVar252::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var252(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 160
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                ge_u_instructionVar253::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var253(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 87
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 224) == 32
        {
            if let Some((inst_len, parsed)) =
                imask_instructionVar254::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var254(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 215
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 224) == 32
        {
            if let Some((inst_len, parsed)) =
                imask_instructionVar255::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var255(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 23
            && (tokens_param[2] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                insert_instructionVar256::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var256(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 151
            && (tokens_param[2] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                insert_instructionVar257::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var257(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                lt_instructionVar258::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var258(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 96
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                lt_u_instructionVar259::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var259(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 3
            && (tokens_param[2] & 255) == 10
        {
            if let Some((inst_len, parsed)) =
                madd_instructionVar260::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var260(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 3
            && (tokens_param[2] & 255) == 106
        {
            if let Some((inst_len, parsed)) =
                madd_instructionVar261::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var261(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[2] & 255) == 97
        {
            if let Some((inst_len, parsed)) =
                madd_f_instructionVar262::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var262(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 3
            && (tokens_param[2] & 255) == 104
        {
            if let Some((inst_len, parsed)) =
                madd_u_instructionVar263::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var263(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 3
            && (tokens_param[2] & 255) == 138
        {
            if let Some((inst_len, parsed)) =
                madds_instructionVar264::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var264(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 3
            && (tokens_param[2] & 255) == 234
        {
            if let Some((inst_len, parsed)) =
                madds_instructionVar265::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var265(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 3
            && (tokens_param[2] & 255) == 136
        {
            if let Some((inst_len, parsed)) =
                madds_u_instructionVar266::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var266(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 3
            && (tokens_param[2] & 255) == 232
        {
            if let Some((inst_len, parsed)) =
                madds_u_instructionVar267::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var267(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 35
            && (tokens_param[2] & 255) == 10
        {
            if let Some((inst_len, parsed)) =
                msub_instructionVar268::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var268(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 35
            && (tokens_param[2] & 255) == 106
        {
            if let Some((inst_len, parsed)) =
                msub_instructionVar269::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var269(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[2] & 255) == 113
        {
            if let Some((inst_len, parsed)) =
                msub_f_instructionVar270::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var270(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 35
            && (tokens_param[2] & 255) == 104
        {
            if let Some((inst_len, parsed)) =
                msub_u_instructionVar271::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var271(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 35
            && (tokens_param[2] & 255) == 138
        {
            if let Some((inst_len, parsed)) =
                msubs_instructionVar272::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var272(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 35
            && (tokens_param[2] & 255) == 234
        {
            if let Some((inst_len, parsed)) =
                msubs_instructionVar273::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var273(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 35
            && (tokens_param[2] & 255) == 136
        {
            if let Some((inst_len, parsed)) =
                msubs_u_instructionVar274::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var274(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 35
            && (tokens_param[2] & 255) == 232
        {
            if let Some((inst_len, parsed)) =
                msubs_u_instructionVar275::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var275(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 43
            && (tokens_param[2] & 255) == 64
        {
            if let Some((inst_len, parsed)) =
                sel_instructionVar276::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var276(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 43
            && (tokens_param[2] & 255) == 80
        {
            if let Some((inst_len, parsed)) =
                seln_instructionVar277::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var277(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 96
        {
            if let Some((inst_len, parsed)) =
                madd_h_instructionVar278::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var278(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 100
        {
            if let Some((inst_len, parsed)) =
                madd_h_instructionVar279::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var279(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 104
        {
            if let Some((inst_len, parsed)) =
                madd_h_instructionVar280::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var280(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 108
        {
            if let Some((inst_len, parsed)) =
                madd_h_instructionVar281::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var281(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 16
        {
            if let Some((inst_len, parsed)) =
                madd_q_instructionVar282::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var282(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 0
        {
            if let Some((inst_len, parsed)) =
                madd_q_instructionVar283::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var283(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 4
        {
            if let Some((inst_len, parsed)) =
                madd_q_instructionVar284::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var284(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 8
        {
            if let Some((inst_len, parsed)) =
                madd_q_instructionVar285::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var285(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 20
        {
            if let Some((inst_len, parsed)) =
                madd_q_instructionVar286::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var286(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 96
        {
            if let Some((inst_len, parsed)) =
                madd_q_instructionVar287::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var287(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 100
        {
            if let Some((inst_len, parsed)) =
                madd_q_instructionVar288::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var288(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 108
        {
            if let Some((inst_len, parsed)) =
                madd_q_instructionVar289::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var289(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 112
        {
            if let Some((inst_len, parsed)) =
                madd_q_instructionVar290::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var290(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 116
        {
            if let Some((inst_len, parsed)) =
                madd_q_instructionVar291::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var291(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 112
        {
            if let Some((inst_len, parsed)) =
                maddm_h_instructionVar292::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var292(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 116
        {
            if let Some((inst_len, parsed)) =
                maddm_h_instructionVar293::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var293(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 120
        {
            if let Some((inst_len, parsed)) =
                maddm_h_instructionVar294::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var294(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 124
        {
            if let Some((inst_len, parsed)) =
                maddm_h_instructionVar295::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var295(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 240
        {
            if let Some((inst_len, parsed)) =
                maddms_h_instructionVar296::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var296(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 244
        {
            if let Some((inst_len, parsed)) =
                maddms_h_instructionVar297::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var297(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 248
        {
            if let Some((inst_len, parsed)) =
                maddms_h_instructionVar298::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var298(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 252
        {
            if let Some((inst_len, parsed)) =
                maddms_h_instructionVar299::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var299(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 120
        {
            if let Some((inst_len, parsed)) =
                maddr_h_instructionVar300::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var300(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 48
        {
            if let Some((inst_len, parsed)) =
                maddr_h_instructionVar301::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var301(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 52
        {
            if let Some((inst_len, parsed)) =
                maddr_h_instructionVar302::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var302(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 56
        {
            if let Some((inst_len, parsed)) =
                maddr_h_instructionVar303::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var303(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 60
        {
            if let Some((inst_len, parsed)) =
                maddr_h_instructionVar304::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var304(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 24
        {
            if let Some((inst_len, parsed)) =
                maddr_q_instructionVar305::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var305(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 28
        {
            if let Some((inst_len, parsed)) =
                maddr_q_instructionVar306::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var306(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 248
        {
            if let Some((inst_len, parsed)) =
                maddrs_h_instructionVar307::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var307(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 176
        {
            if let Some((inst_len, parsed)) =
                maddrs_h_instructionVar308::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var308(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 180
        {
            if let Some((inst_len, parsed)) =
                maddrs_h_instructionVar309::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var309(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 184
        {
            if let Some((inst_len, parsed)) =
                maddrs_h_instructionVar310::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var310(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 188
        {
            if let Some((inst_len, parsed)) =
                maddrs_h_instructionVar311::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var311(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 152
        {
            if let Some((inst_len, parsed)) =
                maddrs_q_instructionVar312::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var312(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 156
        {
            if let Some((inst_len, parsed)) =
                maddrs_q_instructionVar313::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var313(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 224
        {
            if let Some((inst_len, parsed)) =
                madds_h_instructionVar314::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var314(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 228
        {
            if let Some((inst_len, parsed)) =
                madds_h_instructionVar315::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var315(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 232
        {
            if let Some((inst_len, parsed)) =
                madds_h_instructionVar316::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var316(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 131
            && (tokens_param[2] & 252) == 236
        {
            if let Some((inst_len, parsed)) =
                madds_h_instructionVar317::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var317(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 144
        {
            if let Some((inst_len, parsed)) =
                madds_q_instructionVar318::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var318(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 128
        {
            if let Some((inst_len, parsed)) =
                madds_q_instructionVar319::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var319(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 132
        {
            if let Some((inst_len, parsed)) =
                madds_q_instructionVar320::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var320(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 136
        {
            if let Some((inst_len, parsed)) =
                madds_q_instructionVar321::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var321(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 148
        {
            if let Some((inst_len, parsed)) =
                madds_q_instructionVar322::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var322(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 224
        {
            if let Some((inst_len, parsed)) =
                madds_q_instructionVar323::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var323(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 228
        {
            if let Some((inst_len, parsed)) =
                madds_q_instructionVar324::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var324(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 236
        {
            if let Some((inst_len, parsed)) =
                madds_q_instructionVar325::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var325(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 240
        {
            if let Some((inst_len, parsed)) =
                madds_q_instructionVar326::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var326(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 67
            && (tokens_param[2] & 252) == 244
        {
            if let Some((inst_len, parsed)) =
                madds_q_instructionVar327::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var327(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 96
        {
            if let Some((inst_len, parsed)) =
                maddsu_h_instructionVar328::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var328(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 100
        {
            if let Some((inst_len, parsed)) =
                maddsu_h_instructionVar329::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var329(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 104
        {
            if let Some((inst_len, parsed)) =
                maddsu_h_instructionVar330::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var330(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 108
        {
            if let Some((inst_len, parsed)) =
                maddsu_h_instructionVar331::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var331(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 112
        {
            if let Some((inst_len, parsed)) =
                maddsum_h_instructionVar332::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var332(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 116
        {
            if let Some((inst_len, parsed)) =
                maddsum_h_instructionVar333::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var333(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 120
        {
            if let Some((inst_len, parsed)) =
                maddsum_h_instructionVar334::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var334(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 124
        {
            if let Some((inst_len, parsed)) =
                maddsum_h_instructionVar335::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var335(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 240
        {
            if let Some((inst_len, parsed)) =
                maddsums_h_instructionVar336::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var336(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 244
        {
            if let Some((inst_len, parsed)) =
                maddsums_h_instructionVar337::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var337(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 248
        {
            if let Some((inst_len, parsed)) =
                maddsums_h_instructionVar338::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var338(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 252
        {
            if let Some((inst_len, parsed)) =
                maddsums_h_instructionVar339::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var339(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 48
        {
            if let Some((inst_len, parsed)) =
                maddsur_h_instructionVar340::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var340(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 52
        {
            if let Some((inst_len, parsed)) =
                maddsur_h_instructionVar341::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var341(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 56
        {
            if let Some((inst_len, parsed)) =
                maddsur_h_instructionVar342::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var342(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 60
        {
            if let Some((inst_len, parsed)) =
                maddsur_h_instructionVar343::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var343(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 176
        {
            if let Some((inst_len, parsed)) =
                maddsurs_h_instructionVar344::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var344(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 180
        {
            if let Some((inst_len, parsed)) =
                maddsurs_h_instructionVar345::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var345(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 184
        {
            if let Some((inst_len, parsed)) =
                maddsurs_h_instructionVar346::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var346(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 188
        {
            if let Some((inst_len, parsed)) =
                maddsurs_h_instructionVar347::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var347(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 224
        {
            if let Some((inst_len, parsed)) =
                maddsus_h_instructionVar348::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var348(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 228
        {
            if let Some((inst_len, parsed)) =
                maddsus_h_instructionVar349::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var349(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 232
        {
            if let Some((inst_len, parsed)) =
                maddsus_h_instructionVar350::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var350(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 195
            && (tokens_param[2] & 252) == 236
        {
            if let Some((inst_len, parsed)) =
                maddsus_h_instructionVar351::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var351(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                max_instructionVar352::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var352(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 96
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                max_u_instructionVar353::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var353(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                min_instructionVar354::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var354(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 32
            && (tokens_param[3] & 15) == 3
        {
            if let Some((inst_len, parsed)) =
                min_u_instructionVar355::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var355(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 96
        {
            if let Some((inst_len, parsed)) =
                msub_h_instructionVar356::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var356(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 100
        {
            if let Some((inst_len, parsed)) =
                msub_h_instructionVar357::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var357(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 104
        {
            if let Some((inst_len, parsed)) =
                msub_h_instructionVar358::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var358(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 108
        {
            if let Some((inst_len, parsed)) =
                msub_h_instructionVar359::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var359(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 16
        {
            if let Some((inst_len, parsed)) =
                msub_q_instructionVar360::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var360(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 0
        {
            if let Some((inst_len, parsed)) =
                msub_q_instructionVar361::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var361(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 4
        {
            if let Some((inst_len, parsed)) =
                msub_q_instructionVar362::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var362(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 8
        {
            if let Some((inst_len, parsed)) =
                msub_q_instructionVar363::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var363(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 20
        {
            if let Some((inst_len, parsed)) =
                msub_q_instructionVar364::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var364(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 96
        {
            if let Some((inst_len, parsed)) =
                msub_q_instructionVar365::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var365(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 100
        {
            if let Some((inst_len, parsed)) =
                msub_q_instructionVar366::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var366(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 108
        {
            if let Some((inst_len, parsed)) =
                msub_q_instructionVar367::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var367(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 112
        {
            if let Some((inst_len, parsed)) =
                msub_q_instructionVar368::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var368(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 116
        {
            if let Some((inst_len, parsed)) =
                msub_q_instructionVar369::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var369(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 96
        {
            if let Some((inst_len, parsed)) =
                msubad_h_instructionVar370::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var370(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 100
        {
            if let Some((inst_len, parsed)) =
                msubad_h_instructionVar371::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var371(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 104
        {
            if let Some((inst_len, parsed)) =
                msubad_h_instructionVar372::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var372(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 108
        {
            if let Some((inst_len, parsed)) =
                msubad_h_instructionVar373::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var373(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 112
        {
            if let Some((inst_len, parsed)) =
                msubadm_h_instructionVar374::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var374(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 116
        {
            if let Some((inst_len, parsed)) =
                msubadm_h_instructionVar375::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var375(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 120
        {
            if let Some((inst_len, parsed)) =
                msubadm_h_instructionVar376::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var376(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 124
        {
            if let Some((inst_len, parsed)) =
                msubadm_h_instructionVar377::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var377(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 240
        {
            if let Some((inst_len, parsed)) =
                msubadms_h_instructionVar378::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var378(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 244
        {
            if let Some((inst_len, parsed)) =
                msubadms_h_instructionVar379::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var379(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 248
        {
            if let Some((inst_len, parsed)) =
                msubadms_h_instructionVar380::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var380(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 252
        {
            if let Some((inst_len, parsed)) =
                msubadms_h_instructionVar381::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var381(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 48
        {
            if let Some((inst_len, parsed)) =
                msubadr_h_instructionVar382::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var382(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 52
        {
            if let Some((inst_len, parsed)) =
                msubadr_h_instructionVar383::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var383(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 56
        {
            if let Some((inst_len, parsed)) =
                msubadr_h_instructionVar384::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var384(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 60
        {
            if let Some((inst_len, parsed)) =
                msubadr_h_instructionVar385::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var385(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 176
        {
            if let Some((inst_len, parsed)) =
                msubadrs_h_instructionVar386::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var386(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 180
        {
            if let Some((inst_len, parsed)) =
                msubadrs_h_instructionVar387::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var387(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 184
        {
            if let Some((inst_len, parsed)) =
                msubadrs_h_instructionVar388::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var388(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 188
        {
            if let Some((inst_len, parsed)) =
                msubadrs_h_instructionVar389::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var389(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 224
        {
            if let Some((inst_len, parsed)) =
                msubads_h_instructionVar390::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var390(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 228
        {
            if let Some((inst_len, parsed)) =
                msubads_h_instructionVar391::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var391(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 232
        {
            if let Some((inst_len, parsed)) =
                msubads_h_instructionVar392::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var392(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 227
            && (tokens_param[2] & 252) == 236
        {
            if let Some((inst_len, parsed)) =
                msubads_h_instructionVar393::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var393(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 112
        {
            if let Some((inst_len, parsed)) =
                msubm_h_instructionVar394::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var394(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 116
        {
            if let Some((inst_len, parsed)) =
                msubm_h_instructionVar395::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var395(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 120
        {
            if let Some((inst_len, parsed)) =
                msubm_h_instructionVar396::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var396(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 124
        {
            if let Some((inst_len, parsed)) =
                msubm_h_instructionVar397::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var397(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 240
        {
            if let Some((inst_len, parsed)) =
                msubms_h_instructionVar398::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var398(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 244
        {
            if let Some((inst_len, parsed)) =
                msubms_h_instructionVar399::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var399(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 248
        {
            if let Some((inst_len, parsed)) =
                msubms_h_instructionVar400::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var400(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 252
        {
            if let Some((inst_len, parsed)) =
                msubms_h_instructionVar401::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var401(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 120
        {
            if let Some((inst_len, parsed)) =
                msubr_h_instructionVar402::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var402(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 48
        {
            if let Some((inst_len, parsed)) =
                msubr_h_instructionVar403::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var403(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 52
        {
            if let Some((inst_len, parsed)) =
                msubr_h_instructionVar404::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var404(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 56
        {
            if let Some((inst_len, parsed)) =
                msubr_h_instructionVar405::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var405(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 60
        {
            if let Some((inst_len, parsed)) =
                msubr_h_instructionVar406::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var406(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 24
        {
            if let Some((inst_len, parsed)) =
                msubr_q_instructionVar407::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var407(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 28
        {
            if let Some((inst_len, parsed)) =
                msubr_q_instructionVar408::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var408(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 248
        {
            if let Some((inst_len, parsed)) =
                msubrs_h_instructionVar409::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var409(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 176
        {
            if let Some((inst_len, parsed)) =
                msubrs_h_instructionVar410::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var410(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 180
        {
            if let Some((inst_len, parsed)) =
                msubrs_h_instructionVar411::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var411(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 184
        {
            if let Some((inst_len, parsed)) =
                msubrs_h_instructionVar412::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var412(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 188
        {
            if let Some((inst_len, parsed)) =
                msubrs_h_instructionVar413::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var413(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 152
        {
            if let Some((inst_len, parsed)) =
                msubrs_q_instructionVar414::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var414(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 156
        {
            if let Some((inst_len, parsed)) =
                msubrs_q_instructionVar415::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var415(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 224
        {
            if let Some((inst_len, parsed)) =
                msubs_h_instructionVar416::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var416(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 228
        {
            if let Some((inst_len, parsed)) =
                msubs_h_instructionVar417::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var417(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 232
        {
            if let Some((inst_len, parsed)) =
                msubs_h_instructionVar418::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var418(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 163
            && (tokens_param[2] & 252) == 236
        {
            if let Some((inst_len, parsed)) =
                msubs_h_instructionVar419::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var419(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 144
        {
            if let Some((inst_len, parsed)) =
                msubs_q_instructionVar420::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var420(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 128
        {
            if let Some((inst_len, parsed)) =
                msubs_q_instructionVar421::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var421(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 132
        {
            if let Some((inst_len, parsed)) =
                msubs_q_instructionVar422::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var422(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 136
        {
            if let Some((inst_len, parsed)) =
                msubs_q_instructionVar423::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var423(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 148
        {
            if let Some((inst_len, parsed)) =
                msubs_q_instructionVar424::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var424(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 224
        {
            if let Some((inst_len, parsed)) =
                msubs_q_instructionVar425::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var425(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 228
        {
            if let Some((inst_len, parsed)) =
                msubs_q_instructionVar426::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var426(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 236
        {
            if let Some((inst_len, parsed)) =
                msubs_q_instructionVar427::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var427(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 240
        {
            if let Some((inst_len, parsed)) =
                msubs_q_instructionVar428::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var428(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 99
            && (tokens_param[2] & 252) == 244
        {
            if let Some((inst_len, parsed)) =
                msubs_q_instructionVar429::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var429(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 83
            && (tokens_param[2] & 224) == 32
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_instructionVar430::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var430(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 83
            && (tokens_param[2] & 224) == 96
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_instructionVar431::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var431(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 83
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mul_u_instructionVar432::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var432(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 83
            && (tokens_param[2] & 224) == 160
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                muls_instructionVar433::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var433(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 83
            && (tokens_param[2] & 224) == 128
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                muls_u_instructionVar434::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var434(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 32
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                nand_instructionVar435::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var435(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 32
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                ne_instructionVar436::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var436(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 96
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                nor_instructionVar437::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var437(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                or_instructionVar438::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var438(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 224
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                or_eq_instructionVar439::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var439(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 96
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                or_ge_instructionVar440::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var440(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 128
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                or_ge_u_instructionVar441::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var441(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 32
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                or_lt_instructionVar442::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var442(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                or_lt_u_instructionVar443::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var443(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                or_ne_instructionVar444::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var444(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 224
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                orn_instructionVar445::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var445(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                rsub_instructionVar446::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var446(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                rsubs_instructionVar447::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var447(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 96
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                rsubs_u_instructionVar448::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var448(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 224
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                sh_eq_instructionVar449::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var449(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 96
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                sh_ge_instructionVar450::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var450(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 128
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                sh_ge_u_instructionVar451::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var451(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 15) == 8
        {
            if let Some((inst_len, parsed)) =
                sh_h_instructionVar452::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var452(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 32
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                sh_lt_instructionVar453::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var453(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                sh_lt_u_instructionVar454::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var454(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                sh_ne_instructionVar455::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var455(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 32
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                sha_instructionVar456::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var456(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 32
            && (tokens_param[3] & 15) == 8
        {
            if let Some((inst_len, parsed)) =
                sha_h_instructionVar457::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var457(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                shas_instructionVar458::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var458(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 160
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                xnor_instructionVar459::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var459(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 143
            && (tokens_param[2] & 224) == 128
            && (tokens_param[3] & 15) == 1
        {
            if let Some((inst_len, parsed)) =
                xor_instructionVar460::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var460(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 224
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                xor_eq_instructionVar461::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var461(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 96
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                xor_ge_instructionVar462::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var462(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 128
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                xor_ge_u_instructionVar463::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var463(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 32
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                xor_lt_instructionVar464::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var464(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 64
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                xor_lt_u_instructionVar465::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var465(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 139
            && (tokens_param[2] & 224) == 0
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                xor_ne_instructionVar466::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var466(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 171
            && (tokens_param[2] & 224) == 0
        {
            if let Some((inst_len, parsed)) =
                cadd_instructionVar467::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var467(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 171
            && (tokens_param[2] & 224) == 32
        {
            if let Some((inst_len, parsed)) =
                caddn_instructionVar468::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var468(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 119
            && (tokens_param[2] & 127) == 0
        {
            if let Some((inst_len, parsed)) =
                dextr_instructionVar469::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var469(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 55
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 96) == 64
        {
            if let Some((inst_len, parsed)) =
                extr_instructionVar470::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var470(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 55
            && (tokens_param[1] & 240) == 0
            && (tokens_param[2] & 96) == 96
        {
            if let Some((inst_len, parsed)) =
                extr_u_instructionVar471::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var471(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 55
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 96) == 32
        {
            if let Some((inst_len, parsed)) =
                imask_instructionVar472::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var472(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 183
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 96) == 32
        {
            if let Some((inst_len, parsed)) =
                imask_instructionVar473::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var473(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 87
            && (tokens_param[2] & 224) == 0
        {
            if let Some((inst_len, parsed)) =
                insert_instructionVar474::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var474(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 215
            && (tokens_param[2] & 224) == 0
        {
            if let Some((inst_len, parsed)) =
                insert_instructionVar475::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var475(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 19
            && (tokens_param[2] & 224) == 32
        {
            if let Some((inst_len, parsed)) =
                madd_instructionVar476::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var476(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 19
            && (tokens_param[2] & 224) == 96
        {
            if let Some((inst_len, parsed)) =
                madd_instructionVar477::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var477(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 19
            && (tokens_param[2] & 224) == 64
        {
            if let Some((inst_len, parsed)) =
                madd_u_instructionVar478::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var478(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 19
            && (tokens_param[2] & 224) == 160
        {
            if let Some((inst_len, parsed)) =
                madds_instructionVar479::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var479(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 19
            && (tokens_param[2] & 224) == 224
        {
            if let Some((inst_len, parsed)) =
                madds_instructionVar480::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var480(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 19
            && (tokens_param[2] & 224) == 128
        {
            if let Some((inst_len, parsed)) =
                madds_u_instructionVar481::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var481(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 19
            && (tokens_param[2] & 224) == 192
        {
            if let Some((inst_len, parsed)) =
                madds_u_instructionVar482::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var482(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 51
            && (tokens_param[2] & 224) == 32
        {
            if let Some((inst_len, parsed)) =
                msub_instructionVar483::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var483(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 51
            && (tokens_param[2] & 224) == 96
        {
            if let Some((inst_len, parsed)) =
                msub_instructionVar484::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var484(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 51
            && (tokens_param[2] & 224) == 64
        {
            if let Some((inst_len, parsed)) =
                msub_u_instructionVar485::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var485(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 51
            && (tokens_param[2] & 224) == 160
        {
            if let Some((inst_len, parsed)) =
                msubs_instructionVar486::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var486(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 51
            && (tokens_param[2] & 224) == 224
        {
            if let Some((inst_len, parsed)) =
                msubs_instructionVar487::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var487(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 51
            && (tokens_param[2] & 224) == 128
        {
            if let Some((inst_len, parsed)) =
                msubs_u_instructionVar488::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var488(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 51
            && (tokens_param[2] & 224) == 192
        {
            if let Some((inst_len, parsed)) =
                msubs_u_instructionVar489::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var489(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 171
            && (tokens_param[2] & 224) == 128
        {
            if let Some((inst_len, parsed)) =
                sel_instructionVar490::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var490(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 171
            && (tokens_param[2] & 224) == 160
        {
            if let Some((inst_len, parsed)) =
                seln_instructionVar491::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var491(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 71
            && (tokens_param[2] & 96) == 0
        {
            if let Some((inst_len, parsed)) =
                and_and_t_instructionVar492::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var492(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 71
            && (tokens_param[2] & 96) == 96
        {
            if let Some((inst_len, parsed)) =
                and_andn_t_instructionVar493::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var493(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 71
            && (tokens_param[2] & 96) == 64
        {
            if let Some((inst_len, parsed)) =
                and_nor_t_instructionVar494::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var494(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 71
            && (tokens_param[2] & 96) == 32
        {
            if let Some((inst_len, parsed)) =
                and_or_t_instructionVar495::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var495(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 135
            && (tokens_param[2] & 96) == 0
        {
            if let Some((inst_len, parsed)) =
                and_t_instructionVar496::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var496(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 135
            && (tokens_param[2] & 96) == 96
        {
            if let Some((inst_len, parsed)) =
                andn_t_instructionVar497::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var497(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                cachea_i_instructionVar498::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var498(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                cachea_w_instructionVar499::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var499(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 7
        {
            if let Some((inst_len, parsed)) =
                cachea_wi_instructionVar500::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var500(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 73
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 15) == 9
        {
            if let Some((inst_len, parsed)) =
                ldlcx_instructionVar501::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var501(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 73
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 9
        {
            if let Some((inst_len, parsed)) =
                lducx_instructionVar502::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var502(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 73
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 15) == 9
        {
            if let Some((inst_len, parsed)) =
                stlcx_instructionVar503::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var503(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 73
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 15) == 9
        {
            if let Some((inst_len, parsed)) =
                stucx_instructionVar504::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var504(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 105
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                cmpswap_w_instructionVar505::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var505(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 75
            && (tokens_param[2] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                cop_instructionVar506::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var506(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 107
            && (tokens_param[2] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                cop_instructionVar507::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var507(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 253
            && (tokens_param[1] & 255) == 0
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                loopu_instructionVar508::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var508(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 0
            && (tokens_param[1] & 255) == 160
        {
            if let Some((inst_len, parsed)) =
                debug_instructionVar509::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var509(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 0
            && (tokens_param[1] & 255) == 112
        {
            if let Some((inst_len, parsed)) =
                fret_instructionVar510::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var510(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 103
            && (tokens_param[2] & 96) == 0
        {
            if let Some((inst_len, parsed)) =
                ins_t_instructionVar511::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var511(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 55
            && (tokens_param[2] & 96) == 0
        {
            if let Some((inst_len, parsed)) =
                insert_instructionVar512::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var512(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 183
            && (tokens_param[2] & 96) == 0
        {
            if let Some((inst_len, parsed)) =
                insert_instructionVar513::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var513(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 103
            && (tokens_param[2] & 96) == 32
        {
            if let Some((inst_len, parsed)) =
                insn_t_instructionVar514::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var514(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 189
            && (tokens_param[1] & 240) == 0
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jnz_a_instructionVar515::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var515(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 189
            && (tokens_param[1] & 240) == 0
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jz_a_instructionVar516::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var516(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 253
            && (tokens_param[1] & 15) == 0
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                loop_instructionVar517::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var517(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 205
            && (tokens_param[3] & 240) == 0
        {
            if let Some((inst_len, parsed)) =
                mtcr_instructionVar518::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var518(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 95
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jeq_instructionVar519::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var519(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 223
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jeq_instructionVar520::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var520(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 125
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jeq_a_instructionVar521::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var521(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 127
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jge_instructionVar522::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var522(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 255
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jge_instructionVar523::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var523(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 127
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jge_u_instructionVar524::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var524(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 255
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jge_u_instructionVar525::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var525(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 220
            && (tokens_param[1] & 255) == 11
        {
            if let Some((inst_len, parsed)) =
                ji_instructionVar526::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var526(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 0
            && (tokens_param[1] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                nop_instructionVar527::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var527(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 0
            && (tokens_param[1] & 255) == 144
        {
            if let Some((inst_len, parsed)) =
                ret_instructionVar528::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var528(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 0
            && (tokens_param[1] & 255) == 128
        {
            if let Some((inst_len, parsed)) =
                rfe_instructionVar529::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var529(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 255) == 0
            && (tokens_param[1] & 255) == 0
        {
            if let Some((inst_len, parsed)) =
                nop_instructionVar530::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var530(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 220
            && (tokens_param[1] & 240) == 0
        {
            if let Some((inst_len, parsed)) =
                ji_instructionVar531::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var531(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 63
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jlt_instructionVar532::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var532(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 191
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jlt_instructionVar533::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var533(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 63
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jlt_u_instructionVar534::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var534(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 191
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jlt_u_instructionVar535::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var535(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 95
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jne_instructionVar536::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var536(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 223
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jne_instructionVar537::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var537(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 125
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jne_a_instructionVar538::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var538(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 31
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jned_instructionVar539::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var539(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 159
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jned_instructionVar540::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var540(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 31
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jnei_instructionVar541::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var541(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 159
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jnei_instructionVar542::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var542(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                ld_a_instructionVar543::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var543(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                ld_b_instructionVar544::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var544(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                ld_bu_instructionVar545::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var545(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                ld_d_instructionVar546::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var546(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                ld_da_instructionVar547::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var547(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 9
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                ld_dd_instructionVar548::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var548(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 9
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                ld_dd_instructionVar549::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var549(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                ld_dd_instructionVar550::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var550(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 9
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 10
        {
            if let Some((inst_len, parsed)) =
                ld_dd_instructionVar551::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var551(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                ld_h_instructionVar552::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var552(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                ld_hu_instructionVar553::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var553(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                ld_q_instructionVar554::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var554(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 41
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                ld_w_instructionVar555::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var555(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 21
            && (tokens_param[1] & 15) == 0
            && (tokens_param[3] & 12) == 8
        {
            if let Some((inst_len, parsed)) =
                ldlcx_instructionVar556::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var556(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 105
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                ldmst_instructionVar557::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var557(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 21
            && (tokens_param[1] & 15) == 0
            && (tokens_param[3] & 12) == 12
        {
            if let Some((inst_len, parsed)) =
                lducx_instructionVar558::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var558(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 73
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 15) == 10
        {
            if let Some((inst_len, parsed)) =
                lea_instructionVar559::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var559(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                st_a_instructionVar560::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var560(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                st_b_instructionVar561::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var561(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                st_d_instructionVar562::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var562(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                st_da_instructionVar563::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var563(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 137
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 2
        {
            if let Some((inst_len, parsed)) =
                st_dd_instructionVar564::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var564(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 137
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                st_dd_instructionVar565::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var565(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                st_dd_instructionVar566::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var566(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 137
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 15) == 10
        {
            if let Some((inst_len, parsed)) =
                st_dd_instructionVar567::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var567(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                st_h_instructionVar568::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var568(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 15) == 6
        {
            if let Some((inst_len, parsed)) =
                st_q_instructionVar569::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var569(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 169
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 15) == 5
        {
            if let Some((inst_len, parsed)) =
                st_w_instructionVar570::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var570(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 21
            && (tokens_param[1] & 15) == 0
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                stlcx_instructionVar571::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var571(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 21
            && (tokens_param[1] & 15) == 0
            && (tokens_param[3] & 12) == 4
        {
            if let Some((inst_len, parsed)) =
                stucx_instructionVar572::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var572(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 105
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                swap_w_instructionVar573::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var573(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 105
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 15) == 4
        {
            if let Some((inst_len, parsed)) =
                swapmsk_w_instructionVar574::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var574(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 133
            && (tokens_param[3] & 12) == 8
        {
            if let Some((inst_len, parsed)) =
                ld_a_instructionVar575::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var575(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 5
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                ld_b_instructionVar576::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var576(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 5
            && (tokens_param[3] & 12) == 4
        {
            if let Some((inst_len, parsed)) =
                ld_bu_instructionVar577::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var577(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 133
            && (tokens_param[3] & 12) == 4
        {
            if let Some((inst_len, parsed)) =
                ld_d_instructionVar578::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var578(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 133
            && (tokens_param[3] & 12) == 12
        {
            if let Some((inst_len, parsed)) =
                ld_da_instructionVar579::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var579(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 5
            && (tokens_param[3] & 12) == 8
        {
            if let Some((inst_len, parsed)) =
                ld_h_instructionVar580::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var580(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 5
            && (tokens_param[3] & 12) == 12
        {
            if let Some((inst_len, parsed)) =
                ld_hu_instructionVar581::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var581(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 69
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                ld_q_instructionVar582::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var582(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 133
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                ld_w_instructionVar583::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var583(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 229
            && (tokens_param[3] & 12) == 4
        {
            if let Some((inst_len, parsed)) =
                ldmst_instructionVar584::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var584(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 197
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                lea_instructionVar585::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var585(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 77
            && (tokens_param[1] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mfcr_instructionVar586::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var586(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 59
            && (tokens_param[1] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mov_instructionVar587::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var587(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 251
            && (tokens_param[1] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mov_instructionVar588::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var588(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 187
            && (tokens_param[1] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                mov_u_instructionVar589::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var589(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 123
            && (tokens_param[1] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                movh_instructionVar590::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var590(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 145
            && (tokens_param[1] & 15) == 0
        {
            if let Some((inst_len, parsed)) =
                movh_a_instructionVar591::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var591(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 7
            && (tokens_param[2] & 96) == 0
        {
            if let Some((inst_len, parsed)) =
                nand_t_instructionVar592::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var592(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 70
            && (tokens_param[1] & 240) == 0
        {
            if let Some((inst_len, parsed)) =
                not_instructionVar593::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var593(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 135
            && (tokens_param[2] & 96) == 64
        {
            if let Some((inst_len, parsed)) =
                nor_t_instructionVar594::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var594(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 199
            && (tokens_param[2] & 96) == 0
        {
            if let Some((inst_len, parsed)) =
                or_and_t_instructionVar595::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var595(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 199
            && (tokens_param[2] & 96) == 96
        {
            if let Some((inst_len, parsed)) =
                or_andn_t_instructionVar596::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var596(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 199
            && (tokens_param[2] & 96) == 64
        {
            if let Some((inst_len, parsed)) =
                or_nor_t_instructionVar597::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var597(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 199
            && (tokens_param[2] & 96) == 32
        {
            if let Some((inst_len, parsed)) =
                or_or_t_instructionVar598::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var598(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 135
            && (tokens_param[2] & 96) == 32
        {
            if let Some((inst_len, parsed)) =
                or_t_instructionVar599::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var599(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 7
            && (tokens_param[2] & 96) == 32
        {
            if let Some((inst_len, parsed)) =
                orn_t_instructionVar600::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var600(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 50
            && (tokens_param[1] & 240) == 80
        {
            if let Some((inst_len, parsed)) =
                rsub_instructionVar601::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var601(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 50
            && (tokens_param[1] & 240) == 0
        {
            if let Some((inst_len, parsed)) =
                sat_b_instructionVar602::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var602(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 50
            && (tokens_param[1] & 240) == 16
        {
            if let Some((inst_len, parsed)) =
                sat_bu_instructionVar603::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var603(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 50
            && (tokens_param[1] & 240) == 32
        {
            if let Some((inst_len, parsed)) =
                sat_h_instructionVar604::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var604(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 50
            && (tokens_param[1] & 240) == 48
        {
            if let Some((inst_len, parsed)) =
                sat_hu_instructionVar605::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var605(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 6
            && (tokens_param[1] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                sh_instructionVar606::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var606(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 6
            && (tokens_param[1] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                sh_instructionVar607::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var607(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 39
            && (tokens_param[2] & 96) == 0
        {
            if let Some((inst_len, parsed)) =
                sh_and_t_instructionVar608::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var608(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 39
            && (tokens_param[2] & 96) == 96
        {
            if let Some((inst_len, parsed)) =
                sh_andn_t_instructionVar609::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var609(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 167
            && (tokens_param[2] & 96) == 0
        {
            if let Some((inst_len, parsed)) =
                sh_nand_t_instructionVar610::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var610(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 39
            && (tokens_param[2] & 96) == 64
        {
            if let Some((inst_len, parsed)) =
                sh_nor_t_instructionVar611::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var611(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 39
            && (tokens_param[2] & 96) == 32
        {
            if let Some((inst_len, parsed)) =
                sh_or_t_instructionVar612::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var612(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 167
            && (tokens_param[2] & 96) == 32
        {
            if let Some((inst_len, parsed)) =
                sh_orn_t_instructionVar613::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var613(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 167
            && (tokens_param[2] & 96) == 64
        {
            if let Some((inst_len, parsed)) =
                sh_xnor_t_instructionVar614::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var614(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 167
            && (tokens_param[2] & 96) == 96
        {
            if let Some((inst_len, parsed)) =
                sh_xor_t_instructionVar615::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var615(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 165
            && (tokens_param[3] & 12) == 8
        {
            if let Some((inst_len, parsed)) =
                st_a_instructionVar616::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var616(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 37
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                st_b_instructionVar617::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var617(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 165
            && (tokens_param[3] & 12) == 4
        {
            if let Some((inst_len, parsed)) =
                st_d_instructionVar618::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var618(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 165
            && (tokens_param[3] & 12) == 12
        {
            if let Some((inst_len, parsed)) =
                st_da_instructionVar619::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var619(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 37
            && (tokens_param[3] & 12) == 8
        {
            if let Some((inst_len, parsed)) =
                st_h_instructionVar620::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var620(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 101
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                st_q_instructionVar621::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var621(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 213
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                st_t_instructionVar622::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var622(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 165
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                st_w_instructionVar623::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var623(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 229
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                swap_w_instructionVar624::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var624(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 7
            && (tokens_param[2] & 96) == 64
        {
            if let Some((inst_len, parsed)) =
                xnor_t_instructionVar625::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var625(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 255) == 7
            && (tokens_param[2] & 96) == 96
        {
            if let Some((inst_len, parsed)) =
                xor_t_instructionVar626::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var626(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 18 {
            if let Some((inst_len, parsed)) =
                add_instructionVar627::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var627(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 146 {
            if let Some((inst_len, parsed)) =
                add_instructionVar628::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var628(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 26 {
            if let Some((inst_len, parsed)) =
                add_instructionVar629::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var629(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 66 {
            if let Some((inst_len, parsed)) =
                add_instructionVar630::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var630(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 154 {
            if let Some((inst_len, parsed)) =
                add_instructionVar631::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var631(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 194 {
            if let Some((inst_len, parsed)) =
                add_instructionVar632::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var632(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 48 {
            if let Some((inst_len, parsed)) =
                add_a_instructionVar633::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var633(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 176 {
            if let Some((inst_len, parsed)) =
                add_a_instructionVar634::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var634(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 27 {
            if let Some((inst_len, parsed)) =
                addi_instructionVar635::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var635(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 155 {
            if let Some((inst_len, parsed)) =
                addih_instructionVar636::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var636(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 17 {
            if let Some((inst_len, parsed)) =
                addih_a_instructionVar637::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var637(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 34 {
            if let Some((inst_len, parsed)) =
                adds_instructionVar638::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var638(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 38 {
            if let Some((inst_len, parsed)) =
                and_instructionVar639::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var639(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 22 {
            if let Some((inst_len, parsed)) =
                and_instructionVar640::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var640(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 224 {
            if let Some((inst_len, parsed)) =
                bisr_instructionVar641::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var641(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 138 {
            if let Some((inst_len, parsed)) =
                cadd_instructionVar642::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var642(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 202 {
            if let Some((inst_len, parsed)) =
                caddn_instructionVar643::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var643(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 92 {
            if let Some((inst_len, parsed)) =
                call_instructionVar644::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var644(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 109 {
            if let Some((inst_len, parsed)) =
                call_instructionVar645::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var645(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 237 {
            if let Some((inst_len, parsed)) =
                calla_instructionVar646::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var646(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 42 {
            if let Some((inst_len, parsed)) =
                cmov_instructionVar647::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var647(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 170 {
            if let Some((inst_len, parsed)) =
                cmov_instructionVar648::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var648(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 106 {
            if let Some((inst_len, parsed)) =
                cmovn_instructionVar649::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var649(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 234 {
            if let Some((inst_len, parsed)) =
                cmovn_instructionVar650::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var650(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 58 {
            if let Some((inst_len, parsed)) =
                eq_instructionVar651::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var651(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 186 {
            if let Some((inst_len, parsed)) =
                eq_instructionVar652::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var652(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 97 {
            if let Some((inst_len, parsed)) =
                fcall_instructionVar653::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var653(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 225 {
            if let Some((inst_len, parsed)) =
                fcalla_instructionVar654::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var654(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 60 {
            if let Some((inst_len, parsed)) =
                j_instructionVar655::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var655(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 29 {
            if let Some((inst_len, parsed)) =
                j_instructionVar656::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var656(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 157 {
            if let Some((inst_len, parsed)) =
                ja_instructionVar657::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var657(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 190 {
            if let Some((inst_len, parsed)) =
                jeq_instructionVar658::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var658(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 158 {
            if let Some((inst_len, parsed)) =
                jeq_instructionVar659::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var659(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 62 {
            if let Some((inst_len, parsed)) =
                jeq_instructionVar660::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var660(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 30 {
            if let Some((inst_len, parsed)) =
                jeq_instructionVar661::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var661(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 206 {
            if let Some((inst_len, parsed)) =
                jgez_instructionVar662::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var662(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 78 {
            if let Some((inst_len, parsed)) =
                jgtz_instructionVar663::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var663(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 93 {
            if let Some((inst_len, parsed)) =
                jl_instructionVar664::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var664(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 221 {
            if let Some((inst_len, parsed)) =
                jla_instructionVar665::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var665(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 142 {
            if let Some((inst_len, parsed)) =
                jlez_instructionVar666::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var666(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 14 {
            if let Some((inst_len, parsed)) =
                jltz_instructionVar667::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var667(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 254 {
            if let Some((inst_len, parsed)) =
                jne_instructionVar668::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var668(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 222 {
            if let Some((inst_len, parsed)) =
                jne_instructionVar669::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var669(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 126 {
            if let Some((inst_len, parsed)) =
                jne_instructionVar670::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var670(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 94 {
            if let Some((inst_len, parsed)) =
                jne_instructionVar671::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var671(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 238 {
            if let Some((inst_len, parsed)) =
                jnz_instructionVar672::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var672(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 246 {
            if let Some((inst_len, parsed)) =
                jnz_instructionVar673::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var673(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 124 {
            if let Some((inst_len, parsed)) =
                jnz_a_instructionVar674::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var674(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 174 {
            if let Some((inst_len, parsed)) =
                jnz_t_instructionVar675::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var675(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 127) == 111
            && (tokens_param[3] & 128) == 128
        {
            if let Some((inst_len, parsed)) =
                jnz_t_instructionVar676::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var676(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 110 {
            if let Some((inst_len, parsed)) =
                jz_instructionVar677::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var677(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 118 {
            if let Some((inst_len, parsed)) =
                jz_instructionVar678::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var678(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 188 {
            if let Some((inst_len, parsed)) =
                jz_a_instructionVar679::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var679(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 46 {
            if let Some((inst_len, parsed)) =
                jz_t_instructionVar680::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var680(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 127) == 111
            && (tokens_param[3] & 128) == 0
        {
            if let Some((inst_len, parsed)) =
                jz_t_instructionVar681::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var681(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 216 {
            if let Some((inst_len, parsed)) =
                ld_a_instructionVar682::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var682(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 200 {
            if let Some((inst_len, parsed)) =
                ld_a_instructionVar683::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var683(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 204 {
            if let Some((inst_len, parsed)) =
                ld_a_instructionVar684::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var684(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 153 {
            if let Some((inst_len, parsed)) =
                ld_a_instructionVar685::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var685(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 121 {
            if let Some((inst_len, parsed)) =
                ld_b_instructionVar686::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var686(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 57 {
            if let Some((inst_len, parsed)) =
                ld_bu_instructionVar687::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var687(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 12 {
            if let Some((inst_len, parsed)) =
                ld_bu_instructionVar688::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var688(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 8 {
            if let Some((inst_len, parsed)) =
                ld_bu_instructionVar689::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var689(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 140 {
            if let Some((inst_len, parsed)) =
                ld_h_instructionVar690::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var690(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 136 {
            if let Some((inst_len, parsed)) =
                ld_h_instructionVar691::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var691(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 201 {
            if let Some((inst_len, parsed)) =
                ld_h_instructionVar692::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var692(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 185 {
            if let Some((inst_len, parsed)) =
                ld_hu_instructionVar693::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var693(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 88 {
            if let Some((inst_len, parsed)) =
                ld_w_instructionVar694::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var694(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 76 {
            if let Some((inst_len, parsed)) =
                ld_w_instructionVar695::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var695(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 72 {
            if let Some((inst_len, parsed)) =
                ld_w_instructionVar696::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var696(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 25 {
            if let Some((inst_len, parsed)) =
                ld_w_instructionVar697::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var697(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 217 {
            if let Some((inst_len, parsed)) =
                lea_instructionVar698::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var698(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 252 {
            if let Some((inst_len, parsed)) =
                loop_instructionVar699::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var699(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 122 {
            if let Some((inst_len, parsed)) =
                lt_instructionVar700::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var700(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 250 {
            if let Some((inst_len, parsed)) =
                lt_instructionVar701::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var701(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 2 {
            if let Some((inst_len, parsed)) =
                mov_instructionVar702::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var702(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 130 {
            if let Some((inst_len, parsed)) =
                mov_instructionVar703::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var703(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 210 {
            if let Some((inst_len, parsed)) =
                mov_instructionVar704::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var704(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 218 {
            if let Some((inst_len, parsed)) =
                mov_instructionVar705::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var705(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 160 {
            if let Some((inst_len, parsed)) =
                mov_a_instructionVar706::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var706(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 96 {
            if let Some((inst_len, parsed)) =
                mov_a_instructionVar707::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var707(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 64 {
            if let Some((inst_len, parsed)) =
                mov_aa_instructionVar708::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var708(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 128 {
            if let Some((inst_len, parsed)) =
                mov_d_instructionVar709::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var709(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 226 {
            if let Some((inst_len, parsed)) =
                mul_instructionVar710::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var710(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 166 {
            if let Some((inst_len, parsed)) =
                or_instructionVar711::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var711(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 150 {
            if let Some((inst_len, parsed)) =
                or_instructionVar712::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var712(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 134 {
            if let Some((inst_len, parsed)) =
                sha_instructionVar713::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var713(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 248 {
            if let Some((inst_len, parsed)) =
                st_a_instructionVar714::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var714(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 236 {
            if let Some((inst_len, parsed)) =
                st_a_instructionVar715::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var715(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 232 {
            if let Some((inst_len, parsed)) =
                st_a_instructionVar716::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var716(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 181 {
            if let Some((inst_len, parsed)) =
                st_a_instructionVar717::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var717(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 40 {
            if let Some((inst_len, parsed)) =
                st_b_instructionVar718::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var718(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 44 {
            if let Some((inst_len, parsed)) =
                st_b_instructionVar719::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var719(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 233 {
            if let Some((inst_len, parsed)) =
                st_b_instructionVar720::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var720(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 168 {
            if let Some((inst_len, parsed)) =
                st_h_instructionVar721::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var721(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 172 {
            if let Some((inst_len, parsed)) =
                st_h_instructionVar722::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var722(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 249 {
            if let Some((inst_len, parsed)) =
                st_h_instructionVar723::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var723(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 120 {
            if let Some((inst_len, parsed)) =
                st_w_instructionVar724::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var724(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 104 {
            if let Some((inst_len, parsed)) =
                st_w_instructionVar725::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var725(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 108 {
            if let Some((inst_len, parsed)) =
                st_w_instructionVar726::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var726(parsed)));
            }
        }
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 89 {
            if let Some((inst_len, parsed)) =
                st_w_instructionVar727::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var727(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 82 {
            if let Some((inst_len, parsed)) =
                sub_instructionVar728::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var728(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 90 {
            if let Some((inst_len, parsed)) =
                sub_instructionVar729::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var729(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 162 {
            if let Some((inst_len, parsed)) =
                sub_instructionVar730::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var730(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 32 {
            if let Some((inst_len, parsed)) =
                sub_a_instructionVar731::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var731(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 98 {
            if let Some((inst_len, parsed)) =
                subs_instructionVar732::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var732(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 198 {
            if let Some((inst_len, parsed)) =
                xor_instructionVar733::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var733(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 63) == 0
            && (tokens_param[1] & 254) == 146
        {
            if let Some((inst_len, parsed)) =
                ldl_il_instructionVar734::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var734(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 63) == 0
            && (tokens_param[1] & 254) == 144
        {
            if let Some((inst_len, parsed)) =
                ldl_iu_instructionVar735::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var735(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 63) == 0
            && (tokens_param[1] & 252) == 232
        {
            if let Some((inst_len, parsed)) =
                jc_a_instructionVar736::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var736(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 63) == 16 {
            if let Some((inst_len, parsed)) =
                addsc_a_instructionVar737::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var737(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 240) == 128
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 3) == 2
        {
            if let Some((inst_len, parsed)) =
                cachei_i_instructionVar738::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var738(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 240) == 128
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 3) == 2
        {
            if let Some((inst_len, parsed)) =
                cachei_w_instructionVar739::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var739(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 240) == 128
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 3) == 3
        {
            if let Some((inst_len, parsed)) =
                cachei_wi_instructionVar740::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var740(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 128
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 3) == 3
        {
            if let Some((inst_len, parsed)) =
                cachea_i_instructionVar741::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var741(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 128
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 3) == 3
        {
            if let Some((inst_len, parsed)) =
                cachea_w_instructionVar742::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var742(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 128
            && (tokens_param[1] & 15) == 0
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 3) == 3
        {
            if let Some((inst_len, parsed)) =
                cachea_wi_instructionVar743::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var743(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 64
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                cmpswap_w_instructionVar744::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var744(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 0
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                ld_a_instructionVar745::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var745(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 0
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                ld_b_instructionVar746::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var746(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 0
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                ld_bu_instructionVar747::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var747(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 0
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                ld_d_instructionVar748::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var748(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 0
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                ld_da_instructionVar749::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var749(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 0
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                ld_h_instructionVar750::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var750(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 0
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                ld_hu_instructionVar751::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var751(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 0
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 3) == 2
        {
            if let Some((inst_len, parsed)) =
                ld_q_instructionVar752::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var752(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 0
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                ld_w_instructionVar753::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var753(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 64
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                ldmst_instructionVar754::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var754(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 128
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                st_a_instructionVar755::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var755(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 128
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                st_b_instructionVar756::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var756(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 128
            && (tokens_param[2] & 192) == 64
            && (tokens_param[3] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                st_d_instructionVar757::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var757(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 128
            && (tokens_param[2] & 192) == 192
            && (tokens_param[3] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                st_da_instructionVar758::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var758(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 128
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                st_h_instructionVar759::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var759(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 128
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 3) == 2
        {
            if let Some((inst_len, parsed)) =
                st_q_instructionVar760::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var760(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 128
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                st_w_instructionVar761::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var761(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 64
            && (tokens_param[2] & 192) == 0
            && (tokens_param[3] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                swap_w_instructionVar762::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var762(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 192) == 64
            && (tokens_param[2] & 192) == 128
            && (tokens_param[3] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                swapmsk_w_instructionVar763::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var763(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 192) == 192 {
            if let Some((inst_len, parsed)) =
                ld_a_instructionVar764::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var764(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 192) == 0 {
            if let Some((inst_len, parsed)) =
                ld_bu_instructionVar765::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var765(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 192) == 128 {
            if let Some((inst_len, parsed)) =
                ld_h_instructionVar766::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var766(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 192) == 64 {
            if let Some((inst_len, parsed)) =
                ld_w_instructionVar767::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var767(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 192) == 192 {
            if let Some((inst_len, parsed)) =
                st_a_instructionVar768::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var768(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 192) == 0 {
            if let Some((inst_len, parsed)) =
                st_b_instructionVar769::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var769(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 192) == 128 {
            if let Some((inst_len, parsed)) =
                st_h_instructionVar770::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var770(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 192) == 64 {
            if let Some((inst_len, parsed)) =
                st_w_instructionVar771::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var771(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 7) == 0
            && (tokens_param[1] & 254) == 192
        {
            if let Some((inst_len, parsed)) =
                dinit_instructionVar772::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var772(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 7) == 0
            && (tokens_param[1] & 254) == 194
        {
            if let Some((inst_len, parsed)) =
                dstep_instructionVar773::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var773(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 7) == 0
            && (tokens_param[1] & 254) == 196
        {
            if let Some((inst_len, parsed)) =
                minit_instructionVar774::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var774(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 7) == 0
            && (tokens_param[1] & 254) == 198
        {
            if let Some((inst_len, parsed)) =
                mstep_l_instructionVar775::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var775(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 7) == 0
            && (tokens_param[1] & 254) == 200
        {
            if let Some((inst_len, parsed)) =
                mstep_u_instructionVar776::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var776(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 4) == 0
            && (tokens_param[1] & 254) == 32
        {
            if let Some((inst_len, parsed)) =
                add_f_instructionVar777::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var777(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 4) == 0
            && (tokens_param[1] & 254) == 42
        {
            if let Some((inst_len, parsed)) =
                and_f_instructionVar778::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var778(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 254) == 150
        {
            if let Some((inst_len, parsed)) =
                clr_instructionVar779::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var779(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 4) == 0
            && (tokens_param[1] & 254) == 36
        {
            if let Some((inst_len, parsed)) =
                comp_f_instructionVar780::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var780(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 254) == 154
        {
            if let Some((inst_len, parsed)) =
                inb_i_instructionVar781::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var781(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 4) == 0
            && (tokens_param[1] & 254) == 50
        {
            if let Some((inst_len, parsed)) =
                ld_f_instructionVar782::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var782(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 4) == 0
            && (tokens_param[1] & 254) == 46
        {
            if let Some((inst_len, parsed)) =
                or_f_instructionVar783::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var783(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 254) == 142
        {
            if let Some((inst_len, parsed)) =
                rl_instructionVar784::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var784(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 254) == 140
        {
            if let Some((inst_len, parsed)) =
                rr_instructionVar785::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var785(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 254) == 148
        {
            if let Some((inst_len, parsed)) =
                set_instructionVar786::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var786(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 254) == 138
        {
            if let Some((inst_len, parsed)) =
                shl_instructionVar787::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var787(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 254) == 136
        {
            if let Some((inst_len, parsed)) =
                shr_instructionVar788::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var788(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 4) == 0
            && (tokens_param[1] & 254) == 52
        {
            if let Some((inst_len, parsed)) =
                st_f_instructionVar789::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var789(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 4) == 0
            && (tokens_param[1] & 254) == 34
        {
            if let Some((inst_len, parsed)) =
                sub_f_instructionVar790::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var790(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 4) == 0
            && (tokens_param[1] & 254) == 54
        {
            if let Some((inst_len, parsed)) =
                xch_f_instructionVar791::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var791(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 4) == 0
            && (tokens_param[1] & 254) == 48
        {
            if let Some((inst_len, parsed)) =
                xor_f_instructionVar792::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var792(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 96 {
            if let Some((inst_len, parsed)) =
                add_instructionVar793::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var793(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 128 {
            if let Some((inst_len, parsed)) =
                add_i_instructionVar794::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var794(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 64 {
            if let Some((inst_len, parsed)) =
                add_pi_instructionVar795::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var795(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 106 {
            if let Some((inst_len, parsed)) =
                and_instructionVar796::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var796(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 74 {
            if let Some((inst_len, parsed)) =
                and_pi_instructionVar797::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var797(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 19) == 0
            && (tokens_param[1] & 248) == 24
        {
            if let Some((inst_len, parsed)) =
                bcopy_instructionVar798::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var798(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 156 {
            if let Some((inst_len, parsed)) =
                chkb_instructionVar799::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var799(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 100 {
            if let Some((inst_len, parsed)) =
                comp_instructionVar800::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var800(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 132 {
            if let Some((inst_len, parsed)) =
                comp_i_instructionVar801::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var801(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 68 {
            if let Some((inst_len, parsed)) =
                comp_pi_instructionVar802::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var802(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 48) == 0
            && (tokens_param[1] & 252) == 252
        {
            if let Some((inst_len, parsed)) =
                debug_instructionVar803::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var803(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 122 {
            if let Some((inst_len, parsed)) =
                inb_instructionVar804::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var804(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 7) == 0
            && (tokens_param[1] & 252) == 240
        {
            if let Some((inst_len, parsed)) =
                jc_i_instructionVar805::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var805(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 7) == 0
            && (tokens_param[1] & 252) == 244
        {
            if let Some((inst_len, parsed)) =
                jc_ia_instructionVar806::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var806(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 152 {
            if let Some((inst_len, parsed)) =
                ld_i_instructionVar807::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var807(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 114 {
            if let Some((inst_len, parsed)) =
                ld_p_instructionVar808::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var808(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 82 {
            if let Some((inst_len, parsed)) =
                ld_pi_instructionVar809::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var809(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 72 {
            if let Some((inst_len, parsed)) =
                mclr_pi_instructionVar810::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var810(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 120 {
            if let Some((inst_len, parsed)) =
                mov_instructionVar811::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var811(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 76 {
            if let Some((inst_len, parsed)) =
                mset_pi_instructionVar812::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var812(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 102 {
            if let Some((inst_len, parsed)) =
                neg_instructionVar813::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var813(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 104 {
            if let Some((inst_len, parsed)) =
                not_instructionVar814::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var814(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 110 {
            if let Some((inst_len, parsed)) =
                or_instructionVar815::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var815(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 78 {
            if let Some((inst_len, parsed)) =
                or_pi_instructionVar816::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var816(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 124 {
            if let Some((inst_len, parsed)) =
                pri_instructionVar817::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var817(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 116 {
            if let Some((inst_len, parsed)) =
                st_p_instructionVar818::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var818(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 84 {
            if let Some((inst_len, parsed)) =
                st_pi_instructionVar819::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var819(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 98 {
            if let Some((inst_len, parsed)) =
                sub_instructionVar820::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var820(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 130 {
            if let Some((inst_len, parsed)) =
                sub_i_instructionVar821::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var821(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 66 {
            if let Some((inst_len, parsed)) =
                sub_pi_instructionVar822::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var822(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 86 {
            if let Some((inst_len, parsed)) =
                xch_pi_instructionVar823::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var823(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 112 {
            if let Some((inst_len, parsed)) =
                xor_instructionVar824::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var824(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 254) == 80 {
            if let Some((inst_len, parsed)) =
                xor_pi_instructionVar825::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var825(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 252) == 176 {
            if let Some((inst_len, parsed)) =
                clr_f_instructionVar826::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var826(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 112) == 0
            && (tokens_param[1] & 248) == 16
        {
            if let Some((inst_len, parsed)) =
                exit_instructionVar827::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var827(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 252) == 228 {
            if let Some((inst_len, parsed)) =
                jc_instructionVar828::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var828(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 252) == 224 {
            if let Some((inst_len, parsed)) =
                jl_instructionVar829::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var829(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 252) == 180 {
            if let Some((inst_len, parsed)) =
                ld_if_instructionVar830::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var830(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 252) == 172 {
            if let Some((inst_len, parsed)) =
                set_f_instructionVar831::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var831(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 252) == 184 {
            if let Some((inst_len, parsed)) =
                st_if_instructionVar832::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var832(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 248) == 8 {
            if let Some((inst_len, parsed)) =
                copy_instructionVar833::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var833(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:792:1, end:792:6))"]
#[derive(Clone, Debug)]
struct off10Var0 {
    op1621: u8,
    sop2831: u8,
}
impl off10Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (i128::try_from(self.op1621).unwrap()
            | u32::try_from(6i128)
                .ok()
                .and_then(|shl| {
                    i128::try_from(
                        (if self.sop2831 & 8 != 0 { -1 & !7 } else { 0 } | self.sop2831 as i8),
                    )
                    .unwrap()
                    .checked_shl(shl)
                })
                .unwrap_or(0));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = (i128::try_from(token_2(tokens_current)).unwrap()
            | u32::try_from(6i128)
                .ok()
                .and_then(|shl| {
                    i128::try_from(token_15(tokens_current))
                        .unwrap()
                        .checked_shl(shl)
                })
                .unwrap_or(0));
        let sop2831 = token_15(tokens_current);
        let op1621 = token_2(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1621, sop2831 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff10 {
    Var0(off10Var0),
}
impl Tableoff10 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                off10Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:794:1, end:794:6))"]
#[derive(Clone, Debug)]
struct off16Var0 {
    op1621: u8,
    op2831: u8,
    sop2227: u8,
}
impl off16Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = ((i128::try_from(self.op1621).unwrap()
            | u32::try_from(6i128)
                .ok()
                .and_then(|shl| i128::try_from(self.op2831).unwrap().checked_shl(shl))
                .unwrap_or(0))
            | u32::try_from(10i128)
                .ok()
                .and_then(|shl| {
                    i128::try_from(
                        (if self.sop2227 & 32 != 0 { -1 & !31 } else { 0 } | self.sop2227 as i8),
                    )
                    .unwrap()
                    .checked_shl(shl)
                })
                .unwrap_or(0));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = ((i128::try_from(token_2(tokens_current)).unwrap()
            | u32::try_from(6i128)
                .ok()
                .and_then(|shl| {
                    i128::try_from(token_15(tokens_current))
                        .unwrap()
                        .checked_shl(shl)
                })
                .unwrap_or(0))
            | u32::try_from(10i128)
                .ok()
                .and_then(|shl| {
                    i128::try_from(token_31(tokens_current))
                        .unwrap()
                        .checked_shl(shl)
                })
                .unwrap_or(0));
        let op2831 = token_15(tokens_current);
        let op1621 = token_2(tokens_current);
        let sop2227 = token_31(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op1621,
                op2831,
                sop2227,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableoff16 {
    Var0(off16Var0),
}
impl Tableoff16 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                off16Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:796:1, end:796:6))"]
#[derive(Clone, Debug)]
struct off18Var0 {
    op1215: u8,
    op2225: u8,
    op2831: u8,
    op1621: u8,
}
impl off18Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (((u32::try_from(28i128)
            .ok()
            .and_then(|shl| i128::try_from(self.op1215).unwrap().checked_shl(shl))
            .unwrap_or(0)
            | u32::try_from(10i128)
                .ok()
                .and_then(|shl| i128::try_from(self.op2225).unwrap().checked_shl(shl))
                .unwrap_or(0))
            | u32::try_from(6i128)
                .ok()
                .and_then(|shl| i128::try_from(self.op2831).unwrap().checked_shl(shl))
                .unwrap_or(0))
            | i128::try_from(self.op1621).unwrap());
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        let op1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        calc_reloc = (((u32::try_from(28i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_15(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0)
            | u32::try_from(10i128)
                .ok()
                .and_then(|shl| {
                    i128::try_from(token_30(tokens_current))
                        .unwrap()
                        .checked_shl(shl)
                })
                .unwrap_or(0))
            | u32::try_from(6i128)
                .ok()
                .and_then(|shl| {
                    i128::try_from(token_15(tokens_current))
                        .unwrap()
                        .checked_shl(shl)
                })
                .unwrap_or(0))
            | i128::try_from(token_2(tokens_current)).unwrap());
        let op2831 = token_15(tokens_current);
        let op1621 = token_2(tokens_current);
        let op2225 = token_30(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op1215,
                op2225,
                op2831,
                op1621,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableoff18 {
    Var0(off18Var0),
}
impl Tableoff18 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                off18Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:798:1, end:798:8))"]
#[derive(Clone, Debug)]
struct off24pcVar0 {
    op1631: u16,
    sop0815: u8,
}
impl off24pcVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            (i128::try_from(self.op1631).unwrap()
                | u32::try_from(16i128)
                    .ok()
                    .and_then(|shl| {
                        i128::try_from(
                            (if self.sop0815 & 128 != 0 {
                                -1 & !127
                            } else {
                                0
                            } | self.sop0815 as i8),
                        )
                        .unwrap()
                        .checked_shl(shl)
                    })
                    .unwrap_or(0))
            .wrapping_mul(2i128),
        );
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        let sop0815 = token_13(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            (i128::try_from(token_21(tokens_current)).unwrap()
                | u32::try_from(16i128)
                    .ok()
                    .and_then(|shl| {
                        i128::try_from(token_13(tokens_current))
                            .unwrap()
                            .checked_shl(shl)
                    })
                    .unwrap_or(0))
            .wrapping_mul(2i128),
        );
        let op1631 = token_21(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1631, sop0815 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff24pc {
    Var0(off24pcVar0),
}
impl Tableoff24pc {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                off24pcVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:800:1, end:800:9))"]
#[derive(Clone, Debug)]
struct off24absVar0 {
    op1631: u16,
    op0811: u8,
    op1215: u8,
}
impl off24absVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = ((u32::try_from(1i128)
            .ok()
            .and_then(|shl| i128::try_from(self.op1631).unwrap().checked_shl(shl))
            .unwrap_or(0)
            | u32::try_from(17i128)
                .ok()
                .and_then(|shl| i128::try_from(self.op0811).unwrap().checked_shl(shl))
                .unwrap_or(0))
            | u32::try_from(28i128)
                .ok()
                .and_then(|shl| i128::try_from(self.op1215).unwrap().checked_shl(shl))
                .unwrap_or(0));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        let op0811 = token_12(tokens_current);
        let op1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        calc_reloc = ((u32::try_from(1i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_21(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0)
            | u32::try_from(17i128)
                .ok()
                .and_then(|shl| {
                    i128::try_from(token_12(tokens_current))
                        .unwrap()
                        .checked_shl(shl)
                })
                .unwrap_or(0))
            | u32::try_from(28i128)
                .ok()
                .and_then(|shl| {
                    i128::try_from(token_15(tokens_current))
                        .unwrap()
                        .checked_shl(shl)
                })
                .unwrap_or(0));
        let op1631 = token_21(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op1631,
                op0811,
                op1215,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableoff24abs {
    Var0(off24absVar0),
}
impl Tableoff24abs {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                off24absVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:802:1, end:802:12))"]
#[derive(Clone, Debug)]
struct off0811pc4oVar0 {
    op0811: u8,
}
impl off0811pc4oVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            (4294967264i128
                | u32::try_from(1i128)
                    .ok()
                    .and_then(|shl| i128::try_from(self.op0811).unwrap().checked_shl(shl))
                    .unwrap_or(0)),
        );
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            (4294967264i128
                | u32::try_from(1i128)
                    .ok()
                    .and_then(|shl| {
                        i128::try_from(token_12(tokens_current))
                            .unwrap()
                            .checked_shl(shl)
                    })
                    .unwrap_or(0)),
        );
        let op0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0811pc4o {
    Var0(off0811pc4oVar0),
}
impl Tableoff0811pc4o {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                off0811pc4oVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:804:1, end:804:12))"]
#[derive(Clone, Debug)]
struct off0811pc4zVar0 {
    op0811: u8,
}
impl off0811pc4zVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(i128::try_from(self.op0811).unwrap().wrapping_mul(2i128));
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            i128::try_from(token_12(tokens_current))
                .unwrap()
                .wrapping_mul(2i128),
        );
        let op0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0811pc4z {
    Var0(off0811pc4zVar0),
}
impl Tableoff0811pc4z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                off0811pc4zVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:806:1, end:806:12))"]
#[derive(Clone, Debug)]
struct off0815pc8sVar0 {
    sop0815: u8,
}
impl off0815pc8sVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            i128::try_from(
                (if self.sop0815 & 128 != 0 {
                    -1 & !127
                } else {
                    0
                } | self.sop0815 as i8),
            )
            .unwrap()
            .wrapping_mul(2i128),
        );
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            i128::try_from(token_13(tokens_current))
                .unwrap()
                .wrapping_mul(2i128),
        );
        let sop0815 = token_13(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop0815 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0815pc8s {
    Var0(off0815pc8sVar0),
}
impl Tableoff0815pc8s {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                off0815pc8sVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:808:1, end:808:13))"]
#[derive(Clone, Debug)]
struct off1630pc15sVar0 {
    sop1630: u16,
}
impl off1630pc15sVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            i128::try_from(
                (if self.sop1630 & 16384 != 0 {
                    -1 & !16383
                } else {
                    0
                } | self.sop1630 as i16),
            )
            .unwrap()
            .wrapping_mul(2i128),
        );
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            i128::try_from(token_20(tokens_current))
                .unwrap()
                .wrapping_mul(2i128),
        );
        let sop1630 = token_20(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop1630 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff1630pc15s {
    Var0(off1630pc15sVar0),
}
impl Tableoff1630pc15s {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                off1630pc15sVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:811:1, end:811:14))"]
#[derive(Clone, Debug)]
struct off0811pc4z16Var0 {
    op0811: u8,
}
impl off0811pc4z16Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            i128::try_from(self.op0811)
                .unwrap()
                .wrapping_add(16i128)
                .wrapping_mul(2i128),
        );
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            i128::try_from(token_12(tokens_current))
                .unwrap()
                .wrapping_add(16i128)
                .wrapping_mul(2i128),
        );
        let op0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0811pc4z16 {
    Var0(off0811pc4z16Var0),
}
impl Tableoff0811pc4z16 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                off0811pc4z16Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:814:1, end:814:11))"]
#[derive(Clone, Debug)]
struct const0607ZVar0 {
    op0607: u8,
}
impl const0607ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.op0607 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let op0607 = token_9(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0607 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0607Z {
    Var0(const0607ZVar0),
}
impl Tableconst0607Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const0607ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:816:1, end:816:11))"]
#[derive(Clone, Debug)]
struct const0810ZVar0 {
    op0810: u8,
}
impl const0810ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.op0810 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let op0810 = token_11(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0810 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0810Z {
    Var0(const0810ZVar0),
}
impl Tableconst0810Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const0810ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:818:1, end:818:14))"]
#[derive(Clone, Debug)]
struct const0811Z6zzVar0 {
    op0811: u8,
}
impl const0811Z6zzVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = u32::try_from(2i128)
            .ok()
            .and_then(|shl| i128::try_from(self.op0811).unwrap().checked_shl(shl))
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            <DisplayElement>::Number(true, calc_reloc.is_negative(), calc_reloc.abs() as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = u32::try_from(2i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_12(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0);
        let op0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0811Z6zz {
    Var0(const0811Z6zzVar0),
}
impl Tableconst0811Z6zz {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const0811Z6zzVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:820:1, end:820:11))"]
#[derive(Clone, Debug)]
struct const0811ZVar0 {
    op0811: u8,
}
impl const0811ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.op0811 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let op0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0811Z {
    Var0(const0811ZVar0),
}
impl Tableconst0811Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const0811ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:822:1, end:822:13))"]
#[derive(Clone, Debug)]
struct const0811Z5zVar0 {
    op0811: u8,
}
impl const0811Z5zVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = u32::try_from(1i128)
            .ok()
            .and_then(|shl| i128::try_from(self.op0811).unwrap().checked_shl(shl))
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            <DisplayElement>::Number(true, calc_reloc.is_negative(), calc_reloc.abs() as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = u32::try_from(1i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_12(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0);
        let op0811 = token_12(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0811Z5z {
    Var0(const0811Z5zVar0),
}
impl Tableconst0811Z5z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const0811Z5zVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:824:1, end:824:11))"]
#[derive(Clone, Debug)]
struct const0815ZVar0 {
    op0815: u8,
}
impl const0815ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.op0815 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let op0815 = token_13(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0815 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0815Z {
    Var0(const0815ZVar0),
}
impl Tableconst0815Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const0815ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:826:1, end:826:15))"]
#[derive(Clone, Debug)]
struct const0815Z10zzVar0 {
    op0815: u8,
}
impl const0815Z10zzVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = u32::try_from(2i128)
            .ok()
            .and_then(|shl| i128::try_from(self.op0815).unwrap().checked_shl(shl))
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            <DisplayElement>::Number(true, calc_reloc.is_negative(), calc_reloc.abs() as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = u32::try_from(2i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_13(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0);
        let op0815 = token_13(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0815 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0815Z10zz {
    Var0(const0815Z10zzVar0),
}
impl Tableconst0815Z10zz {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const0815Z10zzVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:828:1, end:828:11))"]
#[derive(Clone, Debug)]
struct const1111ZVar0 {
    op1111: u8,
}
impl const1111ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.op1111 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let op1111 = token_14(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1111 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1111Z {
    Var0(const1111ZVar0),
}
impl Tableconst1111Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1111ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:830:1, end:830:11))"]
#[derive(Clone, Debug)]
struct const1215SVar0 {
    sop1215: u8,
}
impl const1215SVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(
                true,
                (if self.sop1215 & 8 != 0 { -1 & !7 } else { 0 } | self.sop1215 as i8)
                    .is_negative(),
                (if self.sop1215 & 8 != 0 { -1 & !7 } else { 0 } | self.sop1215 as i8).abs() as u64,
            ),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let sop1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215S {
    Var0(const1215SVar0),
}
impl Tableconst1215S {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1215SVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:832:1, end:832:11))"]
#[derive(Clone, Debug)]
struct const1215ZVar0 {
    op1215: u8,
}
impl const1215ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.op1215 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let op1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215Z {
    Var0(const1215ZVar0),
}
impl Tableconst1215Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1215ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:834:1, end:834:14))"]
#[derive(Clone, Debug)]
struct const1215Z6zzVar0 {
    op1215: u8,
}
impl const1215Z6zzVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = u32::try_from(2i128)
            .ok()
            .and_then(|shl| i128::try_from(self.op1215).unwrap().checked_shl(shl))
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            <DisplayElement>::Number(true, calc_reloc.is_negative(), calc_reloc.abs() as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = u32::try_from(2i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_15(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0);
        let op1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215Z6zz {
    Var0(const1215Z6zzVar0),
}
impl Tableconst1215Z6zz {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1215Z6zzVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:836:1, end:836:13))"]
#[derive(Clone, Debug)]
struct const1215Z5zVar0 {
    op1215: u8,
}
impl const1215Z5zVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = u32::try_from(1i128)
            .ok()
            .and_then(|shl| i128::try_from(self.op1215).unwrap().checked_shl(shl))
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            <DisplayElement>::Number(true, calc_reloc.is_negative(), calc_reloc.abs() as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = u32::try_from(1i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_15(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0);
        let op1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215Z5z {
    Var0(const1215Z5zVar0),
}
impl Tableconst1215Z5z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1215Z5zVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:838:1, end:838:11))"]
#[derive(Clone, Debug)]
struct const1220SVar0 {
    sop1620: u8,
    op1215: u8,
}
impl const1220SVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(
                    (if self.sop1620 & 16 != 0 { -1 & !15 } else { 0 } | self.sop1620 as i8),
                )
                .unwrap()
                .checked_shl(shl)
            })
            .unwrap_or(0)
            | i128::try_from(self.op1215).unwrap());
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            <DisplayElement>::Number(true, calc_reloc.is_negative(), calc_reloc.abs() as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        let op1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_18(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0)
            | i128::try_from(token_15(tokens_current)).unwrap());
        let sop1620 = token_18(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop1620, op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1220S {
    Var0(const1220SVar0),
}
impl Tableconst1220S {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1220SVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:840:1, end:840:11))"]
#[derive(Clone, Debug)]
struct const1220ZVar0 {
    op1620: u8,
    op1215: u8,
}
impl const1220ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .and_then(|shl| i128::try_from(self.op1620).unwrap().checked_shl(shl))
            .unwrap_or(0)
            | i128::try_from(self.op1215).unwrap());
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            <DisplayElement>::Number(true, calc_reloc.is_negative(), calc_reloc.abs() as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        let op1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_18(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0)
            | i128::try_from(token_15(tokens_current)).unwrap());
        let op1620 = token_18(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1620, op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1220Z {
    Var0(const1220ZVar0),
}
impl Tableconst1220Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1220ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:842:1, end:842:11))"]
#[derive(Clone, Debug)]
struct const1227SVar0 {
    sop1627: u16,
    op1215: u8,
}
impl const1227SVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(
                    (if self.sop1627 & 2048 != 0 {
                        -1 & !2047
                    } else {
                        0
                    } | self.sop1627 as i16),
                )
                .unwrap()
                .checked_shl(shl)
            })
            .unwrap_or(0)
            | i128::try_from(self.op1215).unwrap());
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            <DisplayElement>::Number(true, calc_reloc.is_negative(), calc_reloc.abs() as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        let op1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_19(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0)
            | i128::try_from(token_15(tokens_current)).unwrap());
        let sop1627 = token_19(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop1627, op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1227S {
    Var0(const1227SVar0),
}
impl Tableconst1227S {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1227SVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:844:1, end:844:11))"]
#[derive(Clone, Debug)]
struct const1227ZVar0 {
    op1627: u16,
    op1215: u8,
}
impl const1227ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .and_then(|shl| i128::try_from(self.op1627).unwrap().checked_shl(shl))
            .unwrap_or(0)
            | i128::try_from(self.op1215).unwrap());
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            <DisplayElement>::Number(true, calc_reloc.is_negative(), calc_reloc.abs() as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        let op1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_19(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0)
            | i128::try_from(token_15(tokens_current)).unwrap());
        let op1627 = token_19(tokens_current);
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1627, op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1227Z {
    Var0(const1227ZVar0),
}
impl Tableconst1227Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1227ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:846:1, end:846:11))"]
#[derive(Clone, Debug)]
struct const1617ZVar0 {
    op1617: u8,
}
impl const1617ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.op1617 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let op1617 = token_17(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1617 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1617Z {
    Var0(const1617ZVar0),
}
impl Tableconst1617Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1617ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:848:1, end:848:11))"]
#[derive(Clone, Debug)]
struct const1620ZVar0 {
    op1620: u8,
}
impl const1620ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.op1620 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let op1620 = token_18(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1620 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1620Z {
    Var0(const1620ZVar0),
}
impl Tableconst1620Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const1620ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:850:1, end:850:11))"]
#[derive(Clone, Debug)]
struct const2327ZVar0 {
    op2327: u8,
}
impl const2327ZVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.op2327 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let op2327 = token_32(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op2327 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst2327Z {
    Var0(const2327ZVar0),
}
impl Tableconst2327Z {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                const2327ZVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:852:1, end:852:5))"]
#[derive(Clone, Debug)]
struct NbitVar0 {
    op0707: u8,
    op1215: u8,
}
impl NbitVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .and_then(|shl| i128::try_from(self.op0707).unwrap().checked_shl(shl))
            .unwrap_or(0)
            | i128::try_from(self.op1215).unwrap());
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            <DisplayElement>::Number(true, calc_reloc.is_negative(), calc_reloc.abs() as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .and_then(|shl| {
                i128::try_from(token_10(tokens_current))
                    .unwrap()
                    .checked_shl(shl)
            })
            .unwrap_or(0)
            | i128::try_from(token_15(tokens_current)).unwrap());
        let op0707 = token_10(tokens_current);
        let op1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0707, op1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableNbit {
    Var0(NbitVar0),
}
impl TableNbit {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                NbitVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:860:1, end:860:3))"]
#[derive(Clone, Debug)]
struct BOVar0 {
    Rpe1215: u8,
    Rpo1215: u8,
}
impl BOVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+r]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rpe1215, Rpo1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:862:1, end:862:3))"]
#[derive(Clone, Debug)]
struct BOVar1 {
    Rpe1215: u8,
    Rpo1215: u8,
}
impl BOVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal("["),
            meaning_7_display(self.Rpe1215),
            <DisplayElement>::Literal("/"),
            meaning_8_display(self.Rpo1215),
            <DisplayElement>::Literal("+i]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Rpe1215 = token_15(tokens_current);
        let Rpo1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rpe1215, Rpo1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:864:1, end:864:3))"]
#[derive(Clone, Debug)]
struct BOVar2 {
    Ra1215: u8,
    off10: Tableoff10,
}
impl BOVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:866:1, end:866:3))"]
#[derive(Clone, Debug)]
struct BOVar3 {
    Ra1215: u8,
    off10: Tableoff10,
}
impl BOVar3 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:868:1, end:868:3))"]
#[derive(Clone, Debug)]
struct BOVar4 {
    Ra1215: u8,
    off10: Tableoff10,
}
impl BOVar4 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("[+"),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableBO {
    Var0(BOVar0),
    Var1(BOVar1),
    Var2(BOVar2),
    Var3(BOVar3),
    Var4(BOVar4),
}
impl TableBO {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var3(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var4(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 63) == 41
            && (tokens_param[2] & 63) == 0
            && (tokens_param[3] & 252) == 0
        {
            if let Some((inst_len, parsed)) =
                BOVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 63) == 41
            && (tokens_param[2] & 63) == 0
            && (tokens_param[3] & 252) == 8
        {
            if let Some((inst_len, parsed)) =
                BOVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 63) == 9
            && (tokens_param[3] & 12) == 8
        {
            if let Some((inst_len, parsed)) =
                BOVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 63) == 9
            && (tokens_param[3] & 12) == 0
        {
            if let Some((inst_len, parsed)) =
                BOVar3::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var3(parsed)));
            }
        }
        if tokens_param.len() >= 4
            && context_param.0 & 1 == 0
            && (tokens_param[0] & 63) == 9
            && (tokens_param[3] & 12) == 4
        {
            if let Some((inst_len, parsed)) =
                BOVar4::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var4(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:871:1, end:871:4))"]
#[derive(Clone, Debug)]
struct BOLVar0 {
    Ra1215: u8,
    off16: Tableoff16,
}
impl BOLVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off16
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2;
        let off16 = if let Some((len, table)) =
            Tableoff16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current = &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off16, Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableBOL {
    Var0(BOLVar0),
}
impl TableBOL {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 4 && context_param.0 & 1 == 0 {
            if let Some((inst_len, parsed)) =
                BOLVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:878:1, end:878:4))"]
#[derive(Clone, Debug)]
struct SSRVar0 {
    Ra1215: u8,
}
impl SSRVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:880:1, end:880:4))"]
#[derive(Clone, Debug)]
struct SSRVar1 {
    Ra1215: u8,
}
impl SSRVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:876:1, end:876:4))"]
#[derive(Clone, Debug)]
struct SSRVar2 {
    Ra1215: u8,
}
impl SSRVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:874:1, end:874:4))"]
#[derive(Clone, Debug)]
struct SSRVar3 {
    Ra1215: u8,
}
impl SSRVar3 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableSSR {
    Var0(SSRVar0),
    Var1(SSRVar1),
    Var2(SSRVar2),
    Var3(SSRVar3),
}
impl TableSSR {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var3(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 164 {
            if let Some((inst_len, parsed)) =
                SSRVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 36 {
            if let Some((inst_len, parsed)) =
                SSRVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 127) == 100 {
            if let Some((inst_len, parsed)) =
                SSRVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 63) == 52 {
            if let Some((inst_len, parsed)) =
                SSRVar3::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var3(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:887:1, end:887:4))"]
#[derive(Clone, Debug)]
struct SLRVar0 {
    Ra1215: u8,
}
impl SLRVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:889:1, end:889:4))"]
#[derive(Clone, Debug)]
struct SLRVar1 {
    Ra1215: u8,
}
impl SLRVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:885:1, end:885:4))"]
#[derive(Clone, Debug)]
struct SLRVar2 {
    Ra1215: u8,
}
impl SLRVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:883:1, end:883:4))"]
#[derive(Clone, Debug)]
struct SLRVar3 {
    Ra1215: u8,
}
impl SLRVar3 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableSLR {
    Var0(SLRVar0),
    Var1(SLRVar1),
    Var2(SLRVar2),
    Var3(SLRVar3),
}
impl TableSLR {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var3(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 132 {
            if let Some((inst_len, parsed)) =
                SLRVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 4 {
            if let Some((inst_len, parsed)) =
                SLRVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 127) == 68 {
            if let Some((inst_len, parsed)) =
                SLRVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 63) == 20 {
            if let Some((inst_len, parsed)) =
                SLRVar3::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var3(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:892:1, end:892:4))"]
#[derive(Clone, Debug)]
struct SROVar0 {
    Ra1215: u8,
    const0811Z: Tableconst0811Z,
}
impl SROVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0811Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const0811Z = if let Some((len, table)) =
            Tableconst0811Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0811Z, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:894:1, end:894:4))"]
#[derive(Clone, Debug)]
struct SROVar1 {
    Ra1215: u8,
    const0811Z5z: Tableconst0811Z5z,
}
impl SROVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0811Z5z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const0811Z5z = if let Some((len, table)) =
            Tableconst0811Z5z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0811Z5z,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:896:1, end:896:4))"]
#[derive(Clone, Debug)]
struct SROVar2 {
    Ra1215: u8,
    const0811Z6zz: Tableconst0811Z6zz,
}
impl SROVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            meaning_5_display(self.Ra1215),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0811Z6zz
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const0811Z6zz = if let Some((len, table)) =
            Tableconst0811Z6zz::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let Ra1215 = token_15(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0811Z6zz,
                Ra1215,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TableSRO {
    Var0(SROVar0),
    Var1(SROVar1),
    Var2(SROVar2),
}
impl TableSRO {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 223) == 12 {
            if let Some((inst_len, parsed)) =
                SROVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 223) == 140 {
            if let Some((inst_len, parsed)) =
                SROVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 95) == 76 {
            if let Some((inst_len, parsed)) =
                SROVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:899:1, end:899:5))"]
#[derive(Clone, Debug)]
struct SLROVar0 {
    const1215Z: Tableconst1215Z,
}
impl SLROVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            <DisplayElement>::Register(Register::a15),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:901:1, end:901:5))"]
#[derive(Clone, Debug)]
struct SLROVar1 {
    const1215Z5z: Tableconst1215Z5z,
}
impl SLROVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            <DisplayElement>::Register(Register::a15),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z5z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z5z = if let Some((len, table)) =
            Tableconst1215Z5z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z5z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:903:1, end:903:5))"]
#[derive(Clone, Debug)]
struct SLROVar2 {
    const1215Z6zz: Tableconst1215Z6zz,
}
impl SLROVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            <DisplayElement>::Register(Register::a15),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z6zz
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z6zz = if let Some((len, table)) =
            Tableconst1215Z6zz::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z6zz }))
    }
}
#[derive(Clone, Debug)]
enum TableSLRO {
    Var0(SLROVar0),
    Var1(SLROVar1),
    Var2(SLROVar2),
}
impl TableSLRO {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 8 {
            if let Some((inst_len, parsed)) =
                SLROVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 136 {
            if let Some((inst_len, parsed)) =
                SLROVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 127) == 72 {
            if let Some((inst_len, parsed)) =
                SLROVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:906:1, end:906:5))"]
#[derive(Clone, Debug)]
struct SSROVar0 {
    const1215Z: Tableconst1215Z,
}
impl SSROVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            <DisplayElement>::Register(Register::a15),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z = if let Some((len, table)) =
            Tableconst1215Z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:908:1, end:908:5))"]
#[derive(Clone, Debug)]
struct SSROVar1 {
    const1215Z5z: Tableconst1215Z5z,
}
impl SSROVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            <DisplayElement>::Register(Register::a15),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z5z
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z5z = if let Some((len, table)) =
            Tableconst1215Z5z::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z5z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:910:1, end:910:5))"]
#[derive(Clone, Debug)]
struct SSROVar2 {
    const1215Z6zz: Tableconst1215Z6zz,
}
impl SSROVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            <DisplayElement>::Register(Register::a15),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z6zz
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const1215Z6zz = if let Some((len, table)) =
            Tableconst1215Z6zz::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z6zz }))
    }
}
#[derive(Clone, Debug)]
enum TableSSRO {
    Var0(SSROVar0),
    Var1(SSROVar1),
    Var2(SSROVar2),
}
impl TableSSRO {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 40 {
            if let Some((inst_len, parsed)) =
                SSROVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 255) == 168 {
            if let Some((inst_len, parsed)) =
                SSROVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 127) == 104 {
            if let Some((inst_len, parsed)) =
                SSROVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:913:1, end:913:3))"]
#[derive(Clone, Debug)]
struct SCVar0 {
    const0815Z10zz: Tableconst0815Z10zz,
}
impl SCVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("["),
            <DisplayElement>::Register(Register::a10),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z10zz
            .display_extend(display, context, inst_start, inst_next, global_set);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let const0815Z10zz = if let Some((len, table)) =
            Tableconst0815Z10zz::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z10zz }))
    }
}
#[derive(Clone, Debug)]
enum TableSC {
    Var0(SCVar0),
}
impl TableSC {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 0 && (tokens_param[0] & 95) == 88 {
            if let Some((inst_len, parsed)) =
                SCVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:69:1, end:69:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar0 {}
impl CONDCAVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_UC")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:70:1, end:70:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar1 {}
impl CONDCAVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_Z")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:71:1, end:71:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar2 {}
impl CONDCAVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_NZ")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:72:1, end:72:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar3 {}
impl CONDCAVar3 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_V")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:73:1, end:73:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar4 {}
impl CONDCAVar4 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_ULT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:74:1, end:74:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar5 {}
impl CONDCAVar5 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_UGT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:75:1, end:75:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar6 {}
impl CONDCAVar6 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_SLT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:76:1, end:76:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar7 {}
impl CONDCAVar7 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_SGT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableCONDCA {
    Var0(CONDCAVar0),
    Var1(CONDCAVar1),
    Var2(CONDCAVar2),
    Var3(CONDCAVar3),
    Var4(CONDCAVar4),
    Var5(CONDCAVar5),
    Var6(CONDCAVar6),
    Var7(CONDCAVar7),
}
impl TableCONDCA {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var3(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var4(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var5(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var6(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var7(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 7) == 0 {
            if let Some((inst_len, parsed)) =
                CONDCAVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 7) == 1 {
            if let Some((inst_len, parsed)) =
                CONDCAVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 7) == 2 {
            if let Some((inst_len, parsed)) =
                CONDCAVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 7) == 3 {
            if let Some((inst_len, parsed)) =
                CONDCAVar3::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var3(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 7) == 4 {
            if let Some((inst_len, parsed)) =
                CONDCAVar4::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var4(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 7) == 5 {
            if let Some((inst_len, parsed)) =
                CONDCAVar5::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var5(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 7) == 6 {
            if let Some((inst_len, parsed)) =
                CONDCAVar6::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var6(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 7) == 7 {
            if let Some((inst_len, parsed)) =
                CONDCAVar7::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var7(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:78:1, end:78:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar0 {}
impl CONDCBVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_UC")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:79:1, end:79:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar1 {}
impl CONDCBVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_Z")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:80:1, end:80:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar2 {}
impl CONDCBVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_NZ")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:81:1, end:81:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar3 {}
impl CONDCBVar3 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_V")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:82:1, end:82:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar4 {}
impl CONDCBVar4 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_ULT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:83:1, end:83:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar5 {}
impl CONDCBVar5 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_UGT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:84:1, end:84:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar6 {}
impl CONDCBVar6 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_SLT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:85:1, end:85:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar7 {}
impl CONDCBVar7 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_SGT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:86:1, end:86:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar8 {}
impl CONDCBVar8 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_N")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:87:1, end:87:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar9 {}
impl CONDCBVar9 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_NN")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:88:1, end:88:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar10 {}
impl CONDCBVar10 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_NV")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:89:1, end:89:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar11 {}
impl CONDCBVar11 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_UGE")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:90:1, end:90:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar12 {}
impl CONDCBVar12 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_SGE")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:91:1, end:91:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar13 {}
impl CONDCBVar13 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_SLE")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:92:1, end:92:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar14 {}
impl CONDCBVar14 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_CNZ")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:93:1, end:93:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar15 {}
impl CONDCBVar15 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_CNN")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableCONDCB {
    Var0(CONDCBVar0),
    Var1(CONDCBVar1),
    Var2(CONDCBVar2),
    Var3(CONDCBVar3),
    Var4(CONDCBVar4),
    Var5(CONDCBVar5),
    Var6(CONDCBVar6),
    Var7(CONDCBVar7),
    Var8(CONDCBVar8),
    Var9(CONDCBVar9),
    Var10(CONDCBVar10),
    Var11(CONDCBVar11),
    Var12(CONDCBVar12),
    Var13(CONDCBVar13),
    Var14(CONDCBVar14),
    Var15(CONDCBVar15),
}
impl TableCONDCB {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var3(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var4(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var5(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var6(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var7(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var8(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var9(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var10(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var11(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var12(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var13(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var14(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var15(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 0
            && (tokens_param[1] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 64
            && (tokens_param[1] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 128
            && (tokens_param[1] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 192
            && (tokens_param[1] & 3) == 0
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar3::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var3(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 0
            && (tokens_param[1] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar4::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var4(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 64
            && (tokens_param[1] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar5::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var5(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 128
            && (tokens_param[1] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar6::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var6(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 192
            && (tokens_param[1] & 3) == 1
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar7::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var7(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 0
            && (tokens_param[1] & 3) == 2
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar8::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var8(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 64
            && (tokens_param[1] & 3) == 2
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar9::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var9(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 128
            && (tokens_param[1] & 3) == 2
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar10::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var10(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 192
            && (tokens_param[1] & 3) == 2
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar11::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var11(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 0
            && (tokens_param[1] & 3) == 3
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar12::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var12(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 64
            && (tokens_param[1] & 3) == 3
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar13::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var13(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 128
            && (tokens_param[1] & 3) == 3
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar14::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var14(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 192) == 192
            && (tokens_param[1] & 3) == 3
        {
            if let Some((inst_len, parsed)) =
                CONDCBVar15::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var15(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:96:1, end:96:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar0 {}
impl CONDCABVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_UC")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:97:1, end:97:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar1 {}
impl CONDCABVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_Z")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:98:1, end:98:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar2 {}
impl CONDCABVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_NZ")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:99:1, end:99:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar3 {}
impl CONDCABVar3 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_V")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:100:1, end:100:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar4 {}
impl CONDCABVar4 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_ULT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:101:1, end:101:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar5 {}
impl CONDCABVar5 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_UGT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:102:1, end:102:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar6 {}
impl CONDCABVar6 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_SLT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:103:1, end:103:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar7 {}
impl CONDCABVar7 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_SGT")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:104:1, end:104:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar8 {}
impl CONDCABVar8 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_N")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:105:1, end:105:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar9 {}
impl CONDCABVar9 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_NN")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:106:1, end:106:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar10 {}
impl CONDCABVar10 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_NV")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:107:1, end:107:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar11 {}
impl CONDCABVar11 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_UGE")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:108:1, end:108:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar12 {}
impl CONDCABVar12 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_SGE")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:109:1, end:109:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar13 {}
impl CONDCABVar13 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_SLE")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:110:1, end:110:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar14 {}
impl CONDCABVar14 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_CNZ")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:111:1, end:111:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar15 {}
impl CONDCABVar15 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("cc_CNN")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableCONDCAB {
    Var0(CONDCABVar0),
    Var1(CONDCABVar1),
    Var2(CONDCABVar2),
    Var3(CONDCABVar3),
    Var4(CONDCABVar4),
    Var5(CONDCABVar5),
    Var6(CONDCABVar6),
    Var7(CONDCABVar7),
    Var8(CONDCABVar8),
    Var9(CONDCABVar9),
    Var10(CONDCABVar10),
    Var11(CONDCABVar11),
    Var12(CONDCABVar12),
    Var13(CONDCABVar13),
    Var14(CONDCABVar14),
    Var15(CONDCABVar15),
}
impl TableCONDCAB {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var3(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var4(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var5(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var6(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var7(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var8(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var9(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var10(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var11(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var12(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var13(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var14(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var15(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 0 {
            if let Some((inst_len, parsed)) =
                CONDCABVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 1 {
            if let Some((inst_len, parsed)) =
                CONDCABVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 2 {
            if let Some((inst_len, parsed)) =
                CONDCABVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 3 {
            if let Some((inst_len, parsed)) =
                CONDCABVar3::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var3(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 4 {
            if let Some((inst_len, parsed)) =
                CONDCABVar4::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var4(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 5 {
            if let Some((inst_len, parsed)) =
                CONDCABVar5::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var5(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 6 {
            if let Some((inst_len, parsed)) =
                CONDCABVar6::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var6(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 7 {
            if let Some((inst_len, parsed)) =
                CONDCABVar7::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var7(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 8 {
            if let Some((inst_len, parsed)) =
                CONDCABVar8::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var8(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 9 {
            if let Some((inst_len, parsed)) =
                CONDCABVar9::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var9(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 10 {
            if let Some((inst_len, parsed)) =
                CONDCABVar10::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var10(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 11 {
            if let Some((inst_len, parsed)) =
                CONDCABVar11::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var11(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 12 {
            if let Some((inst_len, parsed)) =
                CONDCABVar12::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var12(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 13 {
            if let Some((inst_len, parsed)) =
                CONDCABVar13::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var13(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 14 {
            if let Some((inst_len, parsed)) =
                CONDCABVar14::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var14(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 15) == 15 {
            if let Some((inst_len, parsed)) =
                CONDCABVar15::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var15(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:113:1, end:113:5))"]
#[derive(Clone, Debug)]
struct imm5Var0 {
    pcp_op0004: u8,
}
impl imm5Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.pcp_op0004 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0004 = token_18(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0004 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm5 {
    Var0(imm5Var0),
}
impl Tableimm5 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 {
            if let Some((inst_len, parsed)) =
                imm5Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:114:1, end:114:5))"]
#[derive(Clone, Debug)]
struct imm6Var0 {
    pcp_op0005: u8,
}
impl imm6Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.pcp_op0005 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0005 = token_2(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm6 {
    Var0(imm6Var0),
}
impl Tableimm6 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 {
            if let Some((inst_len, parsed)) =
                imm6Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:116:1, end:116:6))"]
#[derive(Clone, Debug)]
struct imm16Var0 {
    pcp_op1631: u16,
}
impl imm16Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Literal("#"),
            DisplayElement::Number(true, false, self.pcp_op1631 as u64),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op1631 = token_21(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op1631 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm16 {
    Var0(imm16Var0),
}
impl Tableimm16 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 {
            if let Some((inst_len, parsed)) =
                imm16Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:117:1, end:117:8))"]
#[derive(Clone, Debug)]
struct offset6Var0 {
    pcp_op0005: u8,
}
impl offset6Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal("[#"),
            DisplayElement::Number(true, false, self.pcp_op0005 as u64),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0005 = token_2(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoffset6 {
    Var0(offset6Var0),
}
impl Tableoffset6 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 {
            if let Some((inst_len, parsed)) =
                offset6Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:119:1, end:119:9))"]
#[derive(Clone, Debug)]
struct offset6WVar0 {
    R0608: u8,
    pcp_op0005: u8,
}
impl offset6WVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 6usize] = [
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("[#"),
            DisplayElement::Number(true, false, self.pcp_op0005 as u64),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0005 = token_2(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoffset6W {
    Var0(offset6WVar0),
}
impl Tableoffset6W {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 {
            if let Some((inst_len, parsed)) =
                offset6WVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:120:1, end:120:10))"]
#[derive(Clone, Debug)]
struct offset6RWVar0 {
    R0608: u8,
    pcp_op0005: u8,
}
impl offset6RWVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 6usize] = [
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("[#"),
            DisplayElement::Number(true, false, self.pcp_op0005 as u64),
            <DisplayElement>::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        let pcp_op0005 = token_2(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoffset6RW {
    Var0(offset6RWVar0),
}
impl Tableoffset6RW {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 {
            if let Some((inst_len, parsed)) =
                offset6RWVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:122:1, end:122:4))"]
#[derive(Clone, Debug)]
struct SRCVar0 {}
impl SRCVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Register(Register::R4)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:123:1, end:123:4))"]
#[derive(Clone, Debug)]
struct SRCVar1 {}
impl SRCVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Register(Register::R4),
            <DisplayElement>::Literal("+"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:124:1, end:124:4))"]
#[derive(Clone, Debug)]
struct SRCVar2 {}
impl SRCVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Register(Register::R4),
            <DisplayElement>::Literal("-"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSRC {
    Var0(SRCVar0),
    Var1(SRCVar1),
    Var2(SRCVar2),
}
impl TableSRC {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 128) == 0
            && (tokens_param[1] & 1) == 0
        {
            if let Some((inst_len, parsed)) =
                SRCVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 128) == 128
            && (tokens_param[1] & 1) == 0
        {
            if let Some((inst_len, parsed)) =
                SRCVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 128) == 0
            && (tokens_param[1] & 1) == 1
        {
            if let Some((inst_len, parsed)) =
                SRCVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:126:1, end:126:4))"]
#[derive(Clone, Debug)]
struct DSTVar0 {}
impl DSTVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Register(Register::R5)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:127:1, end:127:4))"]
#[derive(Clone, Debug)]
struct DSTVar1 {}
impl DSTVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Register(Register::R5),
            <DisplayElement>::Literal("+"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:128:1, end:128:4))"]
#[derive(Clone, Debug)]
struct DSTVar2 {}
impl DSTVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 2usize] = [
            <DisplayElement>::Register(Register::R5),
            <DisplayElement>::Literal("-"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableDST {
    Var0(DSTVar0),
    Var1(DSTVar1),
    Var2(DSTVar2),
}
impl TableDST {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 6) == 0 {
            if let Some((inst_len, parsed)) =
                DSTVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 6) == 2 {
            if let Some((inst_len, parsed)) =
                DSTVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[1] & 6) == 4 {
            if let Some((inst_len, parsed)) =
                DSTVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:130:1, end:130:6))"]
#[derive(Clone, Debug)]
struct SIZE0Var0 {}
impl SIZE0Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("8")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:131:1, end:131:6))"]
#[derive(Clone, Debug)]
struct SIZE0Var1 {}
impl SIZE0Var1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("16")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:132:1, end:132:6))"]
#[derive(Clone, Debug)]
struct SIZE0Var2 {}
impl SIZE0Var2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("32")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE0 {
    Var0(SIZE0Var0),
    Var1(SIZE0Var1),
    Var2(SIZE0Var2),
}
impl TableSIZE0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 0 {
            if let Some((inst_len, parsed)) =
                SIZE0Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 1 {
            if let Some((inst_len, parsed)) =
                SIZE0Var1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 2 {
            if let Some((inst_len, parsed)) =
                SIZE0Var2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:134:1, end:134:6))"]
#[derive(Clone, Debug)]
struct SIZE1Var0 {
    R0305: u8,
}
impl SIZE1Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:135:1, end:135:6))"]
#[derive(Clone, Debug)]
struct SIZE1Var1 {
    R0305: u8,
}
impl SIZE1Var1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:136:1, end:136:6))"]
#[derive(Clone, Debug)]
struct SIZE1Var2 {
    R0305: u8,
}
impl SIZE1Var2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 5usize] = [
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE1 {
    Var0(SIZE1Var0),
    Var1(SIZE1Var1),
    Var2(SIZE1Var2),
}
impl TableSIZE1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 0 {
            if let Some((inst_len, parsed)) =
                SIZE1Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 1 {
            if let Some((inst_len, parsed)) =
                SIZE1Var1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 2 {
            if let Some((inst_len, parsed)) =
                SIZE1Var2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:138:1, end:138:7))"]
#[derive(Clone, Debug)]
struct SIZE1WVar0 {
    R0608: u8,
    R0305: u8,
}
impl SIZE1WVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 8usize] = [
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:139:1, end:139:7))"]
#[derive(Clone, Debug)]
struct SIZE1WVar1 {
    R0608: u8,
    R0305: u8,
}
impl SIZE1WVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 8usize] = [
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:140:1, end:140:7))"]
#[derive(Clone, Debug)]
struct SIZE1WVar2 {
    R0608: u8,
    R0305: u8,
}
impl SIZE1WVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 8usize] = [
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE1W {
    Var0(SIZE1WVar0),
    Var1(SIZE1WVar1),
    Var2(SIZE1WVar2),
}
impl TableSIZE1W {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 0 {
            if let Some((inst_len, parsed)) =
                SIZE1WVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 1 {
            if let Some((inst_len, parsed)) =
                SIZE1WVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 2 {
            if let Some((inst_len, parsed)) =
                SIZE1WVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:142:1, end:142:8))"]
#[derive(Clone, Debug)]
struct SIZE1RWVar0 {
    R0608: u8,
    R0305: u8,
}
impl SIZE1RWVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 8usize] = [
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:143:1, end:143:8))"]
#[derive(Clone, Debug)]
struct SIZE1RWVar1 {
    R0608: u8,
    R0305: u8,
}
impl SIZE1RWVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 8usize] = [
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        let R0305 = token_42(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:144:1, end:144:8))"]
#[derive(Clone, Debug)]
struct SIZE1RWVar2 {
    R0608: u8,
    R0305: u8,
}
impl SIZE1RWVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 8usize] = [
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0305),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0305 = token_42(tokens_current);
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE1RW {
    Var0(SIZE1RWVar0),
    Var1(SIZE1RWVar1),
    Var2(SIZE1RWVar2),
}
impl TableSIZE1RW {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 0 {
            if let Some((inst_len, parsed)) =
                SIZE1RWVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 1 {
            if let Some((inst_len, parsed)) =
                SIZE1RWVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 3) == 2 {
            if let Some((inst_len, parsed)) =
                SIZE1RWVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:146:1, end:146:6))"]
#[derive(Clone, Debug)]
struct SIZE5Var0 {}
impl SIZE5Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("8")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:147:1, end:147:6))"]
#[derive(Clone, Debug)]
struct SIZE5Var1 {}
impl SIZE5Var1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("16")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:148:1, end:148:6))"]
#[derive(Clone, Debug)]
struct SIZE5Var2 {}
impl SIZE5Var2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("32")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE5 {
    Var0(SIZE5Var0),
    Var1(SIZE5Var1),
    Var2(SIZE5Var2),
}
impl TableSIZE5 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 2) == 0
        {
            if let Some((inst_len, parsed)) =
                SIZE5Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 32
            && (tokens_param[1] & 2) == 0
        {
            if let Some((inst_len, parsed)) =
                SIZE5Var1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 2) == 2
        {
            if let Some((inst_len, parsed)) =
                SIZE5Var2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:150:1, end:150:7))"]
#[derive(Clone, Debug)]
struct SIZE5WVar0 {
    R0608: u8,
    imm5: Tableimm5,
}
impl SIZE5WVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:151:1, end:151:7))"]
#[derive(Clone, Debug)]
struct SIZE5WVar1 {
    R0608: u8,
    imm5: Tableimm5,
}
impl SIZE5WVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:152:1, end:152:7))"]
#[derive(Clone, Debug)]
struct SIZE5WVar2 {
    R0608: u8,
    imm5: Tableimm5,
}
impl SIZE5WVar2 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 4usize] = [
            <DisplayElement>::Literal("["),
            meaning_9_display(self.R0608),
            <DisplayElement>::Literal("],"),
            <DisplayElement>::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5
            .display_extend(display, context, inst_start, inst_next, global_set);
        let extend: [DisplayElement; 3usize] = [
            <DisplayElement>::Literal(","),
            <DisplayElement>::Literal(" "),
            <DisplayElement>::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as AddrType);
            table
        } else {
            return None;
        };
        let R0608 = token_45(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE5W {
    Var0(SIZE5WVar0),
    Var1(SIZE5WVar1),
    Var2(SIZE5WVar2),
}
impl TableSIZE5W {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var2(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 2) == 0
        {
            if let Some((inst_len, parsed)) =
                SIZE5WVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 32
            && (tokens_param[1] & 2) == 0
        {
            if let Some((inst_len, parsed)) =
                SIZE5WVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        if tokens_param.len() >= 2
            && context_param.0 & 1 == 1
            && (tokens_param[0] & 32) == 0
            && (tokens_param[1] & 2) == 2
        {
            if let Some((inst_len, parsed)) =
                SIZE5WVar2::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var2(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:158:1, end:158:4))"]
#[derive(Clone, Debug)]
struct CNCVar0 {
    pcp_op0506: u8,
}
impl CNCVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op0506 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0506 = token_26(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0506 }))
    }
}
#[derive(Clone, Debug)]
enum TableCNC {
    Var0(CNCVar0),
}
impl TableCNC {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                CNCVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:162:1, end:162:6))"]
#[derive(Clone, Debug)]
struct CNT03Var0 {
    pcp_op0204: u8,
}
impl CNT03Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op0204 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0204 = token_40(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0204 }))
    }
}
#[derive(Clone, Debug)]
enum TableCNT03 {
    Var0(CNT03Var0),
}
impl TableCNT03 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                CNT03Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:168:1, end:168:6))"]
#[derive(Clone, Debug)]
struct CNT02Var0 {
    pcp_op0203: u8,
}
impl CNT02Var0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op0203 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0203 = token_22(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0203 }))
    }
}
#[derive(Clone, Debug)]
enum TableCNT02 {
    Var0(CNT02Var0),
}
impl TableCNT02 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                CNT02Var0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:170:1, end:170:3))"]
#[derive(Clone, Debug)]
struct ECVar0 {
    pcp_op0707: u8,
}
impl ECVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op0707 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0707 = token_10(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0707 }))
    }
}
#[derive(Clone, Debug)]
enum TableEC {
    Var0(ECVar0),
}
impl TableEC {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                ECVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:171:1, end:171:3))"]
#[derive(Clone, Debug)]
struct EPVar0 {
    pcp_op0808: u8,
}
impl EPVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op0808 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0808 = token_47(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0808 }))
    }
}
#[derive(Clone, Debug)]
enum TableEP {
    Var0(EPVar0),
}
impl TableEP {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                EPVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:172:1, end:172:4))"]
#[derive(Clone, Debug)]
struct INTVar0 {
    pcp_op0909: u8,
}
impl INTVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op0909 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0909 = token_48(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0909 }))
    }
}
#[derive(Clone, Debug)]
enum TableINT {
    Var0(INTVar0),
}
impl TableINT {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                INTVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:173:1, end:173:3))"]
#[derive(Clone, Debug)]
struct STVar0 {
    pcp_op1010: u8,
}
impl STVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op1010 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op1010 = token_51(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op1010 }))
    }
}
#[derive(Clone, Debug)]
enum TableST {
    Var0(STVar0),
}
impl TableST {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                STVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:175:1, end:175:7))"]
#[derive(Clone, Debug)]
struct SETCLRVar0 {}
impl SETCLRVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("SET")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:176:1, end:176:7))"]
#[derive(Clone, Debug)]
struct SETCLRVar1 {}
impl SETCLRVar1 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Literal("CLR")];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSETCLR {
    Var0(SETCLRVar0),
    Var1(SETCLRVar1),
}
impl TableSETCLR {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
            Self::Var1(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 32) == 32 {
            if let Some((inst_len, parsed)) =
                SETCLRVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 && (tokens_param[0] & 32) == 0 {
            if let Some((inst_len, parsed)) =
                SETCLRVar1::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var1(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:178:1, end:178:4))"]
#[derive(Clone, Debug)]
struct SDBVar0 {
    pcp_op0000: u8,
}
impl SDBVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op0000 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0000 = token_34(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0000 }))
    }
}
#[derive(Clone, Debug)]
enum TableSDB {
    Var0(SDBVar0),
}
impl TableSDB {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                SDBVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:179:1, end:179:4))"]
#[derive(Clone, Debug)]
struct EDAVar0 {
    pcp_op0101: u8,
}
impl EDAVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op0101 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0101 = token_38(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0101 }))
    }
}
#[derive(Clone, Debug)]
enum TableEDA {
    Var0(EDAVar0),
}
impl TableEDA {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                EDAVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:180:1, end:180:4))"]
#[derive(Clone, Debug)]
struct RTAVar0 {
    pcp_op0202: u8,
}
impl RTAVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op0202 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0202 = token_39(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0202 }))
    }
}
#[derive(Clone, Debug)]
enum TableRTA {
    Var0(RTAVar0),
}
impl TableRTA {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                RTAVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:181:1, end:181:4))"]
#[derive(Clone, Debug)]
struct DACVar0 {
    pcp_op0303: u8,
}
impl DACVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op0303 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op0303 = token_41(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0303 }))
    }
}
#[derive(Clone, Debug)]
enum TableDAC {
    Var0(DACVar0),
}
impl TableDAC {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                DACVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:406:1, end:406:7))"]
#[derive(Clone, Debug)]
struct imm6pcVar0 {
    pcp_op0005: u8,
}
impl imm6pcVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(i128::try_from(self.pcp_op0005).unwrap());
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(i128::try_from(token_2(tokens_current)).unwrap());
        let pcp_op0005 = token_2(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm6pc {
    Var0(imm6pcVar0),
}
impl Tableimm6pc {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                imm6pcVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:407:1, end:407:8))"]
#[derive(Clone, Debug)]
struct imm10pcVar0 {
    pcp_op0009: u16,
}
impl imm10pcVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(i128::try_from(self.pcp_op0009).unwrap());
        let extend: [DisplayElement; 1usize] = [<DisplayElement>::Number(
            true,
            calc_reloc.is_negative(),
            calc_reloc.abs() as u64,
        )];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2;
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(i128::try_from(token_36(tokens_current)).unwrap());
        let pcp_op0009 = token_36(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0009 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm10pc {
    Var0(imm10pcVar0),
}
impl Tableimm10pc {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                imm10pcVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:408:1, end:408:9))"]
#[derive(Clone, Debug)]
struct imm16absVar0 {
    pcp_op1631: u16,
}
impl imm16absVar0 {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set: &mut GlobalSet,
    ) {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, false, self.pcp_op1631 as u64)];
        display.extend_from_slice(&extend);
    }
    fn parse(
        mut tokens_current: &[u8],
        context: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut pattern_len = 0;
        let mut context_instance = context.clone();
        let mut block_0_len = 2;
        let pcp_op1631 = token_21(tokens_current);
        pattern_len += block_0_len;
        tokens_current = &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op1631 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm16abs {
    Var0(imm16absVar0),
}
impl Tableimm16abs {
    fn display_extend(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &ContextMemory,
        inst_start: AddrType,
        inst_next: AddrType,
        global_set_param: &mut GlobalSet,
    ) {
        match self {
            Self::Var0(x) => {
                x.display_extend(display, context, inst_start, inst_next, global_set_param)
            }
        }
    }
    fn parse(
        tokens_param: &[u8],
        context_param: &mut ContextMemory,
        inst_start: AddrType,
    ) -> Option<(AddrType, Self)> {
        let mut context_current = context_param.clone();
        if tokens_param.len() >= 2 && context_param.0 & 1 == 1 {
            if let Some((inst_len, parsed)) =
                imm16absVar0::parse(tokens_param, &mut context_current, inst_start)
            {
                *context_param = context_current;
                return Some((inst_len, Self::Var0(parsed)));
            }
        }
        None
    }
}
pub fn parse_instruction(
    tokens: &[u8],
    context: &mut ContextMemory,
    inst_start: AddrType,
    global_set: &mut GlobalSet,
) -> Option<(u32, Vec<DisplayElement>)> {
    let (inst_len, instruction) = Tableinstruction::parse(tokens, context, inst_start)?;
    let inst_next = inst_start + inst_len;
    let mut display = vec![];
    instruction.display_extend(&mut display, context, inst_start, inst_next, global_set);
    Some((inst_next, display))
}
